{"id":4123,"date":"2020-09-30T21:54:32","date_gmt":"2020-09-30T16:24:32","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4123"},"modified":"2020-09-30T21:54:42","modified_gmt":"2020-09-30T16:24:42","slug":"typed-untyped-constant-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/","title":{"rendered":"Typed and Untyped constant in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#Typed_and_Untyped_Constants\" title=\"Typed and Untyped Constants\">Typed and Untyped Constants<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#Typed_Constant\" title=\"Typed Constant\">Typed Constant<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#Untyped_Constant\" title=\"Untyped Constant\">Untyped Constant<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Typed_and_Untyped_Constants\"><\/span><strong>Typed and Untyped Constants<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In go constant are treated in a different way than any other language. GO has a very strong type system that doesn&#8217;t allow implicit conversion between any of the types. Even with the same numeric types no operation is allowed without explicit conversion. For eg you cannot add a <strong>int32<\/strong> and <strong>int64<\/strong> value. To add those either <strong>int32<\/strong> has to be explicitly converted to <strong>int64<\/strong> or vice versa. However untyped constant have the flexibility of temporary escape from the GO&#8217;s type system as we will see in this article<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Typed_Constant\"><\/span><strong>Typed Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A const declared specifying the type in the declaration is a typed constant. For example below we are declaring a const of type int32<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const a int32 = 8<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This const a can only be assigned to a variable of type int32. If you assign it to a variable of any other type it will raise an error . For the illustration see below program.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    const a int32 = 8\n\n    var i1 int32\n    var i2 int64\n\n    i1 = a\n    i2 = a\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">cannot use a (type int32) as type int64 in assignment<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Untyped_Constant\"><\/span><strong>Untyped Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">An untyped constant is a constant whose type has not been specified. A untyped constant in GO can be either named or unnamed. In both cases it doesn&#8217;t have any type associated with it.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Examples of unnamed untyped constant.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">123        \/\/Default hidden type is int\n\"circle\"   \/\/Default hidden type is string\n5.6.       \/\/Default hidden type is float64\ntrue       \/\/Default hidden type is bool\n'a'        \/\/Default hidden type is rune\n3+5i       \/\/Default hidden type is complex128<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Examples of named untyped constant<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const a = 123        \/\/Default hidden type is int\nconst b = \"circle\"   \/\/Default hidden type is string\nconst c = 5.6       \/\/Default hidden type is float64\nconst d = true       \/\/Default hidden type is bool\nconst e = 'a'        \/\/Default hidden type is rune\nconst f = 3+5i       \/\/Default hidden type is complex128<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped constant\u00a0 does have a default hidden type. For example below table illustrates hidden default types for numerics, strings, characters and boolean<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Default Hidden type for Constants<\/p>\n\n\n\n<p> <\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-light-gray-background-color has-background\"><tbody><tr><td>Integers<\/td><td>int<\/td><\/tr><tr><td>Floats<\/td><td>float64<\/td><\/tr><tr><td>Complex Numbers<\/td><td>complex128<\/td><\/tr><tr><td>Strings<\/td><td>string<\/td><\/tr><tr><td>Booleans<\/td><td>bool<\/td><\/tr><tr><td>Characters<\/td><td>int32 or rune<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">When you print any untyped constant using <strong>fmt.Printf <\/strong>it will print the default hidden type. See below program and output for both unnamed and named\u00a0 untyped constant.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Unanamed untyped constant\n    fmt.Printf(\"Type: %T Value: %v\\n\", 123, 123)\n    fmt.Printf(\"Type: %T Value: %v\\n\", \"circle\", \"circle\")\n    fmt.Printf(\"Type: %T Value: %v\\n\", 5.6, 5.6)\n    fmt.Printf(\"Type: %T Value: %v\\n\", true, true)\n    fmt.Printf(\"Type: %T Value: %v\\n\", 'a', 'a')\n    fmt.Printf(\"Type: %T Value: %v\\n\", 3+5i, 3+5i)\n\n    \/\/Named untyped constant\n    const a = 123      \/\/Default hidden type is int\n    const b = \"circle\" \/\/Default hidden type is string\n    const c = 5.6      \/\/Default hidden type is float64\n    const d = true     \/\/Default hidden type is bool\n    const e = 'a'      \/\/Default hidden type is rune\n    const f = 3 + 5i   \/\/Default hidden type is complex128\n\n    fmt.Println(\"\")\n    fmt.Printf(\"Type: %T Value: %v\\n\", a, a)\n    fmt.Printf(\"Type: %T Value: %v\\n\", b, b)\n    fmt.Printf(\"Type: %T Value: %v\\n\", c, c)\n    fmt.Printf(\"Type: %T Value: %v\\n\", d, d)\n    fmt.Printf(\"Type: %T Value: %v\\n\", e, e)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f, f)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\n\nType: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program prints <strong>int32<\/strong> instead of rune as rune is an alias for <strong>int32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The default type of a named or unnamed constant type will become the type of variable they are assigned to. For example, in the below code variable a will get its type from the default type of unnamed constant <strong>123<\/strong> which is <strong>int<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var a = 123<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program illustrating above points for all unnamed type constant<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    \/\/Untyped\n    var u = 123      \/\/Default hidden type is int\n    var v = \"circle\" \/\/Default hidden type is string\n    var w = 5.6      \/\/Default hidden type is float64\n    var x = true     \/\/Default hidden type is bool\n    var y = 'a'      \/\/Default hidden type is rune\n    var z = 3 + 5i   \/\/Default hidden type is complex128\n    fmt.Printf(\"Type: %T Value: %v\\n\", u, u)\n    fmt.Printf(\"Type: %T Value: %v\\n\", v, v)\n    fmt.Printf(\"Type: %T Value: %v\\n\", w, w)\n    fmt.Printf(\"Type: %T Value: %v\\n\", x, x)\n    fmt.Printf(\"Type: %T Value: %v\\n\", y, y)\n    fmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now the question which comes to the mind is what is the use of untyped constant.\u00a0 The use of untyped constant is that the type of the constant will be decided depending upon the type of variable they are being assigned to.\u00a0 Sounds confusing? Let&#8217;s see with an example.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Pi <\/strong>constant value in math package is declared as below.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const Pi = 3.14159265358979323846264338327950288419716939937510582097494459<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that the type is not specified it only has a hidden default type (which is <strong>float64<\/strong> here).\u00a0 Let&#8217;s see a code<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc main() {\n    var f1 float32\n    var f2 float64\n    f1 = math.Pi\n    f2 = math.Pi\n\n    fmt.Printf(\"Type: %T Value: %v\\n\", math.Pi, math.Pi)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f1, f1)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f2, f2)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: float64 Value: 3.141592653589793\nType: float32 Value: 3.1415927\nType: float64 Value: 3.141592653589793<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice above program.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Due to untyped nature of <strong>math.Pi<\/strong> constant it can be assigned to a variable of type <strong>float32<\/strong> as well as <strong>float64<\/strong>. This is otherwise not possible in GO after type is fixed.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When we print the type of <strong>math.Pi <\/strong>, it prints the default type which is <strong>float64<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Depending upon use case an untyped constant can be assigned to a low precision type (float32) or a high precision type(float64)<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents Typed and Untyped ConstantsTyped ConstantUntyped Constant Typed and Untyped Constants In go constant are treated in a different way than any other language. GO has a very strong type&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4123","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Typed and Untyped constant in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Typed and Untyped constant in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents Typed and Untyped ConstantsTyped ConstantUntyped Constant Typed and Untyped Constants In go constant are treated in a different way than any other language. GO has a very strong type...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-30T16:24:32+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-09-30T16:24:42+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/\",\"name\":\"Typed and Untyped constant in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-30T16:24:32+00:00\",\"dateModified\":\"2020-09-30T16:24:42+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Typed and Untyped constant in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Typed and Untyped constant in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/","og_locale":"en_US","og_type":"article","og_title":"Typed and Untyped constant in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents Typed and Untyped ConstantsTyped ConstantUntyped Constant Typed and Untyped Constants In go constant are treated in a different way than any other language. GO has a very strong type...","og_url":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-30T16:24:32+00:00","article_modified_time":"2020-09-30T16:24:42+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/","url":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/","name":"Typed and Untyped constant in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-30T16:24:32+00:00","dateModified":"2020-09-30T16:24:42+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/typed-untyped-constant-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Typed and Untyped constant in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-14v","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4123","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4123"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4123\/revisions"}],"predecessor-version":[{"id":4125,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4123\/revisions\/4125"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4123"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4123"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4123"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}