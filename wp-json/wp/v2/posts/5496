{"id":5496,"date":"2021-04-22T22:40:46","date_gmt":"2021-04-22T17:10:46","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5496"},"modified":"2021-04-28T15:22:40","modified_gmt":"2021-04-28T09:52:40","slug":"println-printf-print-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/","title":{"rendered":"Println vs Print vs Printf in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#About_Println_function\" title=\"About Println function\">About Println function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#About_Print_function\" title=\"About Print function\">About Print function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#About_Printf_function\" title=\"About Printf function\">About Printf function<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#Printing_a_string_variable\" title=\"Printing a string variable\">Printing a string variable<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#Printing_an_integer\" title=\"Printing an integer\">Printing an integer<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#Printing_a_struct\" title=\"Printing a struct\">Printing a struct<\/a><\/li><\/ul><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Println<\/strong>, <strong>Print,<\/strong> and <strong>Printf<\/strong> are defined in the <strong>fmt<\/strong> package and are used to format a string and write to standard output<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/fmt\/\">https:\/\/golang.org\/pkg\/fmt\/<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The basic difference between them is<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Println<\/strong> formats the string using the default format specifier adds a new line after the string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print<\/strong> formats the string using the default format specifier but does not add a new line after the string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Printf<\/strong> formats the string using a custom specifier. It also doesn&#8217;t add a new line<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see each of them in detail with examples<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"About_Println_function\"><\/span><strong>About Println function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the function prototype of <strong>Println<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Println(a ...interface{}) (n int, err error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Println<\/strong> takes a variable number of arguments where each argument is an empty interface. It returns the number of characters printed and any error if happens. Since the argument type is an empty interface we can pass any data type to it. We can pass a string, int, float, struct, or any other data type. Each of the arguments to the <strong>Println<\/strong> function is formatted according to the default format specifier of that argument type. For example, the struct will be formatted according to the below specifier<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">%v<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This format specifier only prints the Value part in the struct. Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\ntype employee struct {\n    Name string\n    Age  int\n}\nfunc main() {\n    name := \"John\"\n    age := 21\n    fmt.Println(\"Name is: \", name)\n    fmt.Println(\"Age is: \", age)\n    e := employee{\n        Name: name,\n        Age:  age,\n    }\n    fmt.Println(e)\n    fmt.Println(\"a\", 12, \"b\", 12.0)\n\n    \n    bytesPrinted, err := fmt.Println(\"Name is: \", name)\n    if err != nil {\n\tlog.Fatalln(\"Error occured\", err)\n    }\n    fmt.Println(bytesPrinted)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is: John\nAge is: 21\n{John 21}\na 12 b 12\nName is: John\n14<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some important points to note about the <strong>Println<\/strong> function<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It appends new line at the end. That is why each of the output is on a different line<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each of the arguments will be separated by space in the output. That is why<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(\"Name is: \", name)<\/code><\/pre>\n\n\n\n<p>prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is: John<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Space is introduced automatically between the two arguments.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It returns the number of characters printed or any error if happens<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">bytesPrinted, err := fmt.Println(\"Name is: \", name)\nif err != nil {\n    log.Fatalln(\"Error occured\", err)\n}\nfmt.Println(bytesPrinted)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will output below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is: John\n14<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Number of <strong>bytesPrinted<\/strong> is 14 as 14 characters are outputted<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"About_Print_function\"><\/span><strong>About Print function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Function prototype of <strong>Print<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Print(a ...interface{}) (n int, err error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The<strong> Print<\/strong> function is exactly the same as the <strong>Println<\/strong> function other than two differences<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It does not append a new line at the end.&nbsp;We need to use the new line identifier to add a new line &#8220;\\n&#8221;.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Space is only added between the arguments if neither of the operands is a string<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tname := \"John\"\n\tage := 21\n\tfmt.Print(\"Name is:\", name, \"\\n\")\n\tfmt.Print(\"Age is:\", age, \"\\n\")\n\n\te := employee{\n\t\tName: name,\n\t\tAge:  age,\n\t}\n\n\tfmt.Print(e, \"\\n\")\n\n\tfmt.Print(\"a\", 12, \"b\", 12.0, \"\\n\")\n\n\tfmt.Print(12, 12.0, \"\\n\")\n        \n        \n        bytesPrinted, err := fmt.Print(\"Name is: \", name, \"\\n\")\n\tif err != nil {\n\t\tlog.Fatalln(\"Error occured\", err)\n\t}\n\tfmt.Print(bytesPrinted)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is:John\nAge is:21\n{John 21}\na12b12\n12 12\nName is: John\n14<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some important points to note about the <strong>Print<\/strong> function<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It does not append a new line at the end. That is why need to use <strong>&#8220;\\n&#8221;<\/strong> for adding a new line.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It only adds space between two arguments if each of them is a non-string. That is why<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Print(12, 12.0, \"\\n\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">12 12<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">while<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Print(\"a\", 12, \"b\", 12.0, \"\\n\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a12b12<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It also returns the number of characters printed and any error if happens<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"About_Printf_function\"><\/span><strong>About Printf function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Function prototype of <strong>Printf<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Printf(format string, a ...interface{}) (n int, err error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Printf<\/strong> is also a variadic function meaning that it can have multiple arguments.&nbsp;There are two important points about its argument list<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Notice that the first argument is a <strong>format<\/strong> or <strong>template<\/strong>&nbsp;string.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The next is a variable number of arguments. Each of the argument in this list could be string, int, struct, or anything. Due to same reason as above that is why it is an empty interface<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>format<\/strong> or <strong>template<\/strong> string contains the actual string that needs to be formatted plus some formating verbs. These formating verbs tell how the trailing arguments will be formatted in the final string.&nbsp; So basically the format string argument contains certain symbols which are replaced by trailing arguments.&nbsp;&nbsp;<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Eg<\/p>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Printing_a_string_variable\"><\/span><strong>Printing a string variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%s<\/strong> symbol is used<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Example&nbsp;<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">name := \"John\"\nfmt.Printf(\"Name is: %s\\n\", name)<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Printing_an_integer\"><\/span><strong>Printing an integer<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%d<\/strong> symbol is used<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Example&nbsp;<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">age := 21\nfmt.Printf(\"Age is: %d\\n\", age)<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Printing_a_struct\"><\/span><strong>Printing a struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">For example, there are three format specifiers for printing a struct.&nbsp;<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%v<\/strong>&nbsp;\u2013 It will print only values. The field name will not be printed. This is the default way of printing a struct when using Println<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%+v \u2013&nbsp;<\/strong>It will print both field and value.&nbsp;<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%#v \u2013&nbsp;<\/strong>It will print the struct, also both field name and value<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">That is why<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Employee is %v\\n\", e)\nfmt.Printf(\"Employee is %+v\\n\", e)\nfmt.Printf(\"Employee is %#v\\n\", e)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">prints below respectively<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Employee is {John 21}\nEmployee is {Name:John Age:21}\nEmployee is main.employee{Name:\"John\", Age:21}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is as per the explanation above.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, note that this function returns the number of characters printed and any error if happens. Unlike <strong>Println<\/strong>&nbsp;it does add a new line. You will have to add <strong>&#8220;\\n&#8221;<\/strong> explicitly.&nbsp;<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Here is the working program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n)\n\ntype employee struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tname := \"John\"\n\tage := 21\n\n\tfmt.Printf(\"Name is: %s\\n\", name)\n\tfmt.Printf(\"Age is: %d\\n\", age)\n\n\tfmt.Printf(\"Name: %s Age: %d\\n\", name, age)\n\n\te := employee{\n\t\tName: name,\n\t\tAge:  age,\n\t}\n\n\tfmt.Printf(\"Employee is %v\\n\", e)\n\tfmt.Printf(\"Employee is %+v\\n\", e)\n\tfmt.Printf(\"Employee is %#v\\n\", e)\n\n\tbytesPrinted, err := fmt.Printf(\"Name is: %s\\n\", name)\n\tif err != nil {\n\t\tlog.Fatalln(\"Error occured\", err)\n\t}\n\tfmt.Println(bytesPrinted)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is: John\nAge is: 21\nName: John Age: 21\nEmployee is {John 21}\nEmployee is {Name:John Age:21}\nEmployee is main.employee{Name:\"John\", Age:21}\nName is: John\n14<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that in below <strong>Printf<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Name: %s Age: %d\\n\", name, age)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%s <\/strong>is replaced by name.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%d<\/strong> is replaced by age.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So basically the symbols or verbs in the format string argument are replaced by trailing arguments in order<strong><\/strong>If the number of format specifiers in the format string does not match the number of next variable arguments then the format specifier will be printed as is. For example, in the below code, we have two format specifier<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%d<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%s<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">While the next variable number of arguments is only one. Hence when we print it then it will print the second format specifier as is with MISSING as warning<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\ntype employee struct {\n    Name string\n    Age  int\n}\nfunc main() {\n    name := \"John\"\n    fmt.Printf(\"Name is: %s %d\\n\", name)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is: John %!d(MISSING)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series &#8211; <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewAbout Println functionAbout Print functionAbout Printf functionPrinting a string variablePrinting an integerPrinting a struct Overview Println, Print, and Printf are defined in the fmt package and are used to&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-5496","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Println vs Print vs Printf in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"This tutorial highlights the differences and details of the Println, Print and Printf function in golang\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Println vs Print vs Printf in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This tutorial highlights the differences and details of the Println, Print and Printf function in golang\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-04-22T17:10:46+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-04-28T09:52:40+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/\",\"name\":\"Println vs Print vs Printf in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-04-22T17:10:46+00:00\",\"dateModified\":\"2021-04-28T09:52:40+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"This tutorial highlights the differences and details of the Println, Print and Printf function in golang\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Println vs Print vs Printf in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Println vs Print vs Printf in Go (Golang) - Welcome To Golang By Example","description":"This tutorial highlights the differences and details of the Println, Print and Printf function in golang","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/","og_locale":"en_US","og_type":"article","og_title":"Println vs Print vs Printf in Go (Golang) - Welcome To Golang By Example","og_description":"This tutorial highlights the differences and details of the Println, Print and Printf function in golang","og_url":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-04-22T17:10:46+00:00","article_modified_time":"2021-04-28T09:52:40+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/","url":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/","name":"Println vs Print vs Printf in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-04-22T17:10:46+00:00","dateModified":"2021-04-28T09:52:40+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"This tutorial highlights the differences and details of the Println, Print and Printf function in golang","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/println-printf-print-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/println-printf-print-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Println vs Print vs Printf in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1qE","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5496","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5496"}],"version-history":[{"count":4,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5496\/revisions"}],"predecessor-version":[{"id":5536,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5496\/revisions\/5536"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5496"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5496"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5496"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}