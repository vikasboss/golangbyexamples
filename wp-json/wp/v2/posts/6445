{"id":6445,"date":"2021-11-25T16:37:56","date_gmt":"2021-11-25T11:07:56","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6445"},"modified":"2021-11-25T19:28:16","modified_gmt":"2021-11-25T13:58:16","slug":"tree-preorder-inorder-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/","title":{"rendered":"Construct a binary tree from preorder and inorder in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Two arrays are given which represent the preorder and inorder traversal of a binary tree. The objective is to construct a binary tree from them<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Example:<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Consider below tree<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"281\" height=\"211\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg?resize=281%2C211&#038;ssl=1\" alt=\"\" class=\"wp-image-6428\" data-recalc-dims=\"1\"\/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Preorder traversal of the tree will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[1,2,4,3,5,6]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Inorder traversal of the tree will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[4,2,1,5,3,6]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Preorder and Inorder array will be given and we have to construct the tree again from the inorder and preorder. Below will be the strategy<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We will use three indexes which is the start of the array, end of the array, and current index<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The start index in the preorder will be the root.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We will find the index in an inorder array whose values match the value at the start index in the preorder array. Let&#8217;s this index be called rootIndex<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>All values in the left side of rootIndex in the inorder array will be in the left subtree<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>All values on the right side of rootIndex in the inorder array will be in the right subtree<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We can then recurse with the same strategy for the left subtree and then the right subtree.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">For eg<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The first index in the preorder traversal is the root which is value <strong>1<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The value <strong>1<\/strong> is at the <strong>2nd<\/strong> index in the inorder traversal. Hence rootIndex is <strong>2<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The left part of rootIndex in the inorder traversal is <strong>[4,2]<\/strong>\u00a0 which is part of the left subtree<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The right side of rootIndex in the inorder traversal\u00a0 is <strong>[5,3,6]<\/strong> which is part of the right subtree<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We can recurse for the left subtree and then the right subtree<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\n\n\tlenOfTree := len(preorder)\n\n\tcurrent := 0\n\tnewRoot := buildTreeUtil(preorder, inorder, &current, 0, lenOfTree-1)\n\n\treturn newRoot\n}\n\nfunc buildTreeUtil(preorder []int, inorder []int, current *int, low, high int) *TreeNode {\n\tif low > high {\n\t\treturn nil\n\t}\n\n\tif low == high {\n\t\trootNode := &TreeNode{Val: preorder[*current]}\n\t\t(*current)++\n\t\treturn rootNode\n\t}\n\n\trootNode := &TreeNode{Val: preorder[*current]}\n\trootValue := preorder[*current]\n\t(*current)++\n\n\tvar rootIndex int\n\tfor i := low; i <= high; i++ {\n\t\tif inorder[i] == rootValue {\n\t\t\trootIndex = i\n\t\t}\n\t}\n\n\trootNode.Left = buildTreeUtil(preorder, inorder, current, low, rootIndex-1)\n\trootNode.Right = buildTreeUtil(preorder, inorder, current, rootIndex+1, high)\n\n\treturn rootNode\n}\n\nfunc main() {\n\tinorder := []int{4, 2, 1, 5, 3, 6}\n\tpreorder := []int{1, 2, 4, 3, 5, 6}\n\n\troot := buildTree(preorder, inorder)\n\tfmt.Printf(\"root: %d\\n\", root.Val)\n\tfmt.Printf(\"root.Left: %d\\n\", root.Left.Val)\n\tfmt.Printf(\"root.Left.Left: %d\\n\", root.Left.Left.Val)\n\tfmt.Printf(\"root.Right: %d\\n\", root.Right.Val)\n\tfmt.Printf(\"root.Right.Left: %d\\n\", root.Right.Left.Val)\n\tfmt.Printf(\"root.Right.Right: %d\\n\", root.Right.Right.Val)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">root: 1\nroot.Left: 2\nroot.Left.Left: 4\nroot.Right: 3\nroot.Right.Left: 5\nroot.Right.Right: 6<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Note: <\/strong>Check out our Golang Advanced Tutorial. The tutorials in this series are elaborative and we have tried to cover all concepts with examples. This tutorial is for those who are looking to gain expertise and a solid understanding of golang - <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also if you are interested in understanding how all design patterns can be implemented in Golang. If yes, then this post is for you -<a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns Golang<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview Two arrays are given which represent the preorder and inorder traversal of a binary tree. The objective is to construct a binary tree from them Example: Consider&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6445","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Construct a binary tree from preorder and inorder in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Construct a binary tree from preorder and inorder in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgram Overview Two arrays are given which represent the preorder and inorder traversal of a binary tree. The objective is to construct a binary tree from them Example: Consider...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-11-25T11:07:56+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-11-25T13:58:16+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/\",\"name\":\"Construct a binary tree from preorder and inorder in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\",\"datePublished\":\"2021-11-25T11:07:56+00:00\",\"dateModified\":\"2021-11-25T13:58:16+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Construct a binary tree from preorder and inorder in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Construct a binary tree from preorder and inorder in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/","og_locale":"en_US","og_type":"article","og_title":"Construct a binary tree from preorder and inorder in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgram Overview Two arrays are given which represent the preorder and inorder traversal of a binary tree. The objective is to construct a binary tree from them Example: Consider...","og_url":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-11-25T11:07:56+00:00","article_modified_time":"2021-11-25T13:58:16+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/","url":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/","name":"Construct a binary tree from preorder and inorder in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg","datePublished":"2021-11-25T11:07:56+00:00","dateModified":"2021-11-25T13:58:16+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/tree-preorder-inorder-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Construct a binary tree from preorder and inorder in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1FX","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6445","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6445"}],"version-history":[{"count":1,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6445\/revisions"}],"predecessor-version":[{"id":6446,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6445\/revisions\/6446"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6445"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6445"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6445"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}