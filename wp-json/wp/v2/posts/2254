{"id":2254,"date":"2020-06-14T15:17:02","date_gmt":"2020-06-14T09:47:02","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2254"},"modified":"2020-06-14T15:20:54","modified_gmt":"2020-06-14T09:50:54","slug":"declare-initialize-struct-variable-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/","title":{"rendered":"Declare or create\/initialize struct variable in Go (Golang"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#Declaring_a_struct_type\" title=\"Declaring a struct type\">Declaring a struct type<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#Creating_a_struct_variable\" title=\"Creating a struct variable\">Creating a struct variable<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">GO struct is named collection of data fields which can be of different types. Struct acts as a container that has different heterogeneous data types which together represents an entity. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">For example, different attributes are used to represent an employee in an organization. Employee can have<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Name of string type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Age of int type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>DOB of time.Time type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Salary of int type<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">.. and so on. A struct can be used to represent an employee<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n    name   string\n    age    int\n    salary int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A struct in golang can be compared to a class in Object Oriented Languages<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Declaring_a_struct_type\"><\/span><strong>Declaring a struct type<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for declaring a struct<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type struct_name struct {\n    field_name1 field_type1\n    field_name2 field_type2\n    ...\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above format, <strong>struct_name<\/strong> is the name of the struct. It has a field named <strong>field_name1<\/strong> of type <strong>field_type1<\/strong> and a field named <strong>field_name2<\/strong> of type <strong>field_type2<\/strong>. This declares a new named struct type which acts as a blueprint. The type keyword is used to introduce a new type<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">type point struct {\n    x float64\n    y float64\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above declaration declares a new struct named <strong>point<\/strong> which has two field <strong>x<\/strong> and <strong>y<\/strong>. Both fields are of <strong>float64<\/strong> type.Once a new struct type is declared we can define new concrete struct variable from it as we will see in next section<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_struct_variable\"><\/span><strong>Creating a struct variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Declaring a struct just declares a named struct type. Creating a struct variable, creates an instance of that struct with memory being initialized as well. We can create a empty struct variable without given any value to any of the field<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In this case, all the fields in the struct are initialized with a default zero value of that field type. We can also intialize value for each struct field while creating a struct variable. There are two variations<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On the same line<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{name: \"Sam\", age: 31, salary: 2000}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each field on different lines<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n   name:   \"Sam\",\n   age:    31,\n   salary: 2000,\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is also ok to initialize only some of the fields with value. The field which are not initialized with value will get the default zero value of their type<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n   name: \"Sam\",\n   age: 31,\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above case, salary will get the default value of zero since it is not initialized<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a working code illustrating above points:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{}\n    fmt.Printf(\"Emp1: %+v\\n\", emp1)\n\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp2: %+v\\n\", emp2)\n\n    emp3 := employee{\n        name:   \"Sam\",\n        age:    31,\n        salary: 2000,\n    }\n    fmt.Printf(\"Emp3: %+v\\n\", emp3)\n\n    emp4 := employee{\n        name: \"Sam\",\n        age:  31,\n    }\n    fmt.Printf(\"Emp4: %+v\\n\", emp4)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp1: {name: age:0 salary:0}\nEmp2: {name:Sam age:31 salary:2000}\nEmp2: {name:Sam age:31 salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">For above program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We first declare an <strong>employee<\/strong> struct.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp1&#8217;s fields are all intialized with default zero value of its type i.e name with &#8220;&#8221;, age and salary with 0.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp2 has been initialized with all field on the same line. Its fields are correctly printed with their value<\/li><li>emp3&#8217;s has been initialized with all fields on different lines. Its fields are correctly printed with their value<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp4&#8217;s salary field is initialized with a default zero value of 0. While other two fields are correctly printed with their value.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">It is to be noted that in the initialization of a struct, every new line with in curly braces has to end with a comma. So below initialization will raise error as<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> \"salary\" : 2000<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">doesn&#8217;t end with a comma.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n  name:   \"Sam\",\n  age:    31,\n  salary: 2000\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The below will be fine as last brace is on the same line as last field<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n  name:   \"Sam\",\n  age:    31,\n  salary: 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Without field names<\/strong><\/p>\n\n\n\n<p>struct can also be initialized without specifying the field names. But in this case, all values for each of the field has to be provided in sequence<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\"Sam\", 31, 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A compiler error will be raised if all values are not provided when field name is not used.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{\"Sam\", 31, 2000}\n    fmt.Printf(\"Emp: %+v\\n\", emp)\n\n    \/\/emp = employee{\"Sam\", 31}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp2: {name:Sam age:31 salary:2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Uncomment the line<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp = employee{\"Sam\", 31}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">in\u00a0the above program, and it will raise compiler error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">too few values in employee literal<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewDeclaring a struct typeCreating a struct variable Overview GO struct is named collection of data fields which can be of different types. Struct acts as a container that has&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2254","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Declare or create\/initialize struct variable in Go (Golang - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Declare or create\/initialize struct variable in Go (Golang - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewDeclaring a struct typeCreating a struct variable Overview GO struct is named collection of data fields which can be of different types. Struct acts as a container that has...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-14T09:47:02+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-06-14T09:50:54+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/\",\"name\":\"Declare or create\/initialize struct variable in Go (Golang - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-06-14T09:47:02+00:00\",\"dateModified\":\"2020-06-14T09:50:54+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Declare or create\/initialize struct variable in Go (Golang\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Declare or create\/initialize struct variable in Go (Golang - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/","og_locale":"en_US","og_type":"article","og_title":"Declare or create\/initialize struct variable in Go (Golang - Welcome To Golang By Example","og_description":"Table of Contents OverviewDeclaring a struct typeCreating a struct variable Overview GO struct is named collection of data fields which can be of different types. Struct acts as a container that has...","og_url":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-06-14T09:47:02+00:00","article_modified_time":"2020-06-14T09:50:54+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/","url":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/","name":"Declare or create\/initialize struct variable in Go (Golang - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-06-14T09:47:02+00:00","dateModified":"2020-06-14T09:50:54+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/declare-initialize-struct-variable-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Declare or create\/initialize struct variable in Go (Golang"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-Am","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2254","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2254"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2254\/revisions"}],"predecessor-version":[{"id":2258,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2254\/revisions\/2258"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2254"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2254"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2254"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}