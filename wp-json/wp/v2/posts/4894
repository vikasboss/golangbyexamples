{"id":4894,"date":"2021-01-08T19:00:43","date_gmt":"2021-01-08T13:30:43","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4894"},"modified":"2021-03-17T00:40:34","modified_gmt":"2021-03-16T19:10:34","slug":"http-mutipart-form-body-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/","title":{"rendered":"HTTP client\/server multipart form-data request body example in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#HTTP_Server_Example\" title=\"HTTP Server Example\">HTTP Server Example<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#HTTP_Client_Example\" title=\"HTTP Client Example\">HTTP Client Example<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In HTTP context, the <strong>multipart\/form-data<\/strong> content-type is used for submitting HTML form. In the case of <strong>multipart\/form-data<\/strong>, as the name suggests, the body consists of different parts separated by a delimiter or boundary where each part is described by its own headers. The delimiter or boundary is also sent as part of the header only.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">When you sending an HTML form through a browser in an HTTP call, the data contents can be sent in as request body in the below two formats.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>application\/x-www-form-urlencoded<\/li><li>multipart\/form-data<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">For most of the cases, <strong>application\/x-www-form-urlencoded<\/strong> can be used. But if you need to upload files then <strong>application\/x-www-form-urlencoded <\/strong>is not much efficient.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For example, let&#8217;s say that the below data needs to be sent.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>name<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>age<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Then <strong>application\/x-www-form-urlencoded <\/strong>can be used to send the above data. But let&#8217;s say that you also need to send the profile photo of the user in the request as well. So the data is now as below<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>name<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>age<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>photo<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In the above case, it will not be efficient to use <strong>application\/x-www-form-urlencoded <\/strong>content-type. <strong>multipart\/form-data<\/strong> should be used in this case. So for sending simple form data use <strong>application\/x-www-form-urlencoded <\/strong>but if the form-data also needs to send binary data then use <strong>multipart\/form-data.<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s see an example of<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>HTTP Server for parsing multipart\/form-data request<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>HTTP Client for sending multipart\/form-data request<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"HTTP_Server_Example\"><\/span><strong>HTTP Server Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">For HTTP server an incoming request is represented by the <strong>request<\/strong> struct<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/src\/net\/http\/request.go\">https:\/\/golang.org\/src\/net\/http\/request.go<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">To parse the <strong>multipart\/form-data<\/strong> request body we need to first call the below function on the <strong>request<\/strong> object<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.ParseMultipartForm()<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">What above function will do is that it will parse the incoming request body and the data will be loaded in the below fields of the <strong>request<\/strong> object<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>MultipartForm &#8211;<\/strong> The entire <strong>multipart\/form-data <\/strong>request body will be loaded into this field. For example, in the above case, it will hold the <strong>name<\/strong>, <strong>age<\/strong> field as well as <strong>photo<\/strong> field. It is represented in the below format<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Form struct {\n\tValue map[string][]string\n\tFile  map[string][]*FileHeader\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It has two parts. The Value holds all the non-files data. So it will hold the <strong>name<\/strong> and <strong>age<\/strong> key data.&nbsp; The <strong>File<\/strong> part holds all file data. So it will hold the data for <strong>photo<\/strong> key.&nbsp; Both the parts have their value part as an array because for the same key there can be multiple values.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Form<\/strong> &#8211;&nbsp; It holds combine data of query string and non-file fields of the <strong>multipart\/form-data <\/strong>request body. For example, for the above case, it will only hold the name and age field. It has below format<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[string][]string<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>PostForm &#8211;<\/strong> It only holds the non-file fields of the <strong>multipart\/form-data <\/strong>request body. So for the above case, it will only hold the <strong>name<\/strong> and <strong>age<\/strong> field<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">It also has the same format as <strong>Form<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[string][]string<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Other than the above fields, the request object also provides the below utility function<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>FormFile<\/strong> &#8211;&nbsp; This function can be used to get the first file for the given key. So this function will only return data for <strong>photo<\/strong> key and not for <strong>name<\/strong> and <strong>age<\/strong> key<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>PostFormValue <\/strong>&#8211; This function returns the first value for the given form key.&nbsp; This&nbsp;function will only return data for <strong>name <\/strong>and<strong> age<\/strong> key and not for <strong>photo<\/strong> key<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see different ways in which <strong>name<\/strong>, <strong>key<\/strong>, and <strong>photo<\/strong> values can be accessed<\/p>\n\n\n\n<p style=\"font-size:24px\"><strong>Name Key<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form[\"name\"]\nrequest.PostForm[\"name\"] \nrequest.MultipartForm.Value[\"name\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[\"John\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It returns an array because for the same key there can be different values.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">While<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.PostFormValue(\"name\") <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">John<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is not an array because as mentioned above this function returns the first value associated with the key.<\/p>\n\n\n\n<p style=\"font-size:24px\"><strong>Age Key<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form[\"age\"]\nrequest.PostForm[\"age\"] \nrequest.MultipartForm.Value[\"age\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[\"21\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">While<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.PostFormValue(\"age\") <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">21<\/code><\/pre>\n\n\n\n<p style=\"font-size:24px\"><strong>Photo Key<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.MultipartForm.File[\"photo\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return the&nbsp; <strong>FileHeader<\/strong> for the image. Bytes of the image can be accessed using that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[FileHeader_object_of_the_image]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">While<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.FormFile(\"photo\") <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">FileHeader_object_of_the_image<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is not an array because as mentioned above this function returns the first file associated with the key.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"mime\/multipart\"\n\t\"net\/http\"\n\t\"os\"\n)\nfunc main() {\n\tcreateEmployeeHanlder := http.HandlerFunc(createEmployee)\n\thttp.Handle(\"\/employee\", createEmployeeHanlder)\n\thttp.ListenAndServe(\":8080\", nil)\n}\nfunc createEmployee(w http.ResponseWriter, request *http.Request) {\n\terr := request.ParseMultipartForm(32 << 20) \/\/ maxMemory 32MB\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\t\/\/Access the name key - First Approach\n\tfmt.Println(request.Form[\"name\"])\n\t\/\/Access the name key - Second Approach\n\tfmt.Println(request.PostForm[\"name\"])\n\t\/\/Access the name key - Third Approach\n\tfmt.Println(request.MultipartForm.Value[\"name\"])\n\t\/\/Access the name key - Fourth Approach\n\tfmt.Println(request.PostFormValue(\"name\"))\n\t\/\/Access the age key - First Approach\n\tfmt.Println(request.Form[\"age\"])\n\t\/\/Access the age key - Second Approach\n\tfmt.Println(request.PostForm[\"age\"])\n\t\/\/Access the age key - Third Approach\n\tfmt.Println(request.MultipartForm.Value[\"age\"])\n\t\/\/Access the age key - Fourth Approach\n\tfmt.Println(request.PostFormValue(\"age\"))\n\t\/\/Access the photo key - First Approach\n\t_, h, err := request.FormFile(\"photo\")\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\tsaveFile(h, \"formfile\")\n\t\/\/Access the photo key - Second Approach\n\tfor _, h := range request.MultipartForm.File[\"photo\"] {\n\t\terr := saveFile(h, \"mapaccess\")\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t}\n\tw.WriteHeader(200)\n\treturn\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in the above program how are we printing the <strong>name<\/strong> key using all the approaches<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\/\/Access the name key - First Approach\nfmt.Println(request.Form[\"name\"])\n\/\/Access the name key - Second Approach\nfmt.Println(request.PostForm[\"name\"])\n\/\/Access the name key - Third Approach\nfmt.Println(request.MultipartForm.Value[\"name\"])\n\/\/Access the name key - Fourth Approach\nfmt.Println(request.PostFormValue(\"name\"))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">And similar for the <strong>age<\/strong> key<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Then we are saving the file present in the request body first using <strong>FormFile <\/strong>method and then using <strong>request.MultipartForm.File <\/strong>map<strong>. <\/strong>Since we are saving the same file using the two methods, we send a prefix argument to the <strong>saveFile<\/strong> function so that it saves files with different names. This is done so that the file saved by <strong>FormFile<\/strong> is not overwritten by the file saved by <strong>request.MultipartForm.File. <\/strong>This is just for a demonstration that both methods can be used to extract file data from the request. <strong>FormFile<\/strong> method uses the prefix <strong>formfile<\/strong> while <strong>request.MultipartForm.File <\/strong>uses <strong>mapaccess<\/strong> prefix for saving the file<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let's make some curl calls. Create a file named <strong>test.png<\/strong> in the same folder from which you will run the curl command<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Sending <strong>name<\/strong>, <strong>age<\/strong> and <strong>photo<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl --location --request PUT 'http:\/\/localhost:8080\/employee' \\\n--header 'Content-Type: multipart\/form-data' \\\n--form 'name=John' \\\n--form 'age=23' \\\n--form 'photo=@test.png'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">You can notice from the output that it is printing exactly what we have discussed earlier.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[John] \n[John] \n[John] \nJohn \n[23] \n[23] \n[23] \n23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will also save two files with the below names<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">formfile-test.png\nmapaccess-test.png<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now let's see the second curl example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Sending <strong>name<\/strong>, <strong>age,<\/strong> and <strong>photo <\/strong>but in this example, the same key <strong>'photo' <\/strong>is used for sending two files.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl --location --request PUT 'http:\/\/localhost:8080\/employee' \\\n--header 'Content-Type: multipart\/form-data' \\\n--form 'name=John' \\\n--form 'age=23' \\\n--form 'photo=@test1.png' \\\n--form 'photo=@test2.png'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[John] \n[John] \n[John] \nJohn \n[23] \n[23] \n[23] \n23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This time three files will be saved with the below names. Since FormFile only accesses the first file present with a given key therefore only <strong>formfile-test1.png <\/strong>is saved by the <strong>FormFile<\/strong> method.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">formfile-test1.png\nmapaccess-test2.png\nmapaccess-test2.png<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let's see one more curl example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Sending two values for <strong>name<\/strong> key<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl --location --request PUT 'http:\/\/localhost:8080\/employee' \\\n--header 'Content-Type: multipart\/form-data' \\\n--form 'name=John' \\\n--form 'name=John2' \\\n--form 'age=23' \\\n--form 'photo=@test.png'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[John John2] \n[John John2] \n[John John2] \nJohn \n[23] \n[23] \n[23]\n23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">rqeuest.<strong>PostFormValue <\/strong>returns<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">John<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">while all other options return both the values<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[John John2]<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"HTTP_Client_Example\"><\/span><strong>HTTP Client Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is the code for an example of an HTTP client for the same. It is sending the <strong>multipart\/form-data<\/strong> request body in an HTTP request to the server created in the above example.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">First, we have to create a multipart Writer <a href=\"https:\/\/golang.org\/pkg\/mime\/multipart\/#Writer\">https:\/\/golang.org\/pkg\/mime\/multipart\/#Writer<\/a><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">writer := multipart.NewWriter(body)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The multipart writer provides two methods<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>CreateFormField<\/strong>&nbsp; - Used to create a text field to be sent in the multipart request body. We will create the <strong>name<\/strong> and <strong>age<\/strong> field using this method<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>CreateFormFile<\/strong> - Used to create a file field to be sent in the multipart request body. We will create the <strong>photo<\/strong> field using this method<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Now let's see the program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"bytes\"\n    \"io\"\n    \"log\"\n    \"mime\/multipart\"\n    \"net\/http\"\n    \"os\"\n    \"strings\"\n    \"time\"\n)\nfunc main() {\n    call(\"http:\/\/localhost:8080\/employee\", \"POST\")\n}\nfunc call(urlPath, method string) error {\n    client := &http.Client{\n        Timeout: time.Second * 10,\n    }\n    \/\/ New multipart writer.\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n    fw, err := writer.CreateFormField(\"name\")\n    if err != nil {\n    }\n    _, err = io.Copy(fw, strings.NewReader(\"John\"))\n    if err != nil {\n        return err\n    }\n    fw, err = writer.CreateFormField(\"age\")\n    if err != nil {\n    }\n    _, err = io.Copy(fw, strings.NewReader(\"23\"))\n    if err != nil {\n        return err\n    }\n    fw, err = writer.CreateFormFile(\"photo\", \"test.png\")\n    if err != nil {\n    }\n    file, err := os.Open(\"test.png\")\n    if err != nil {\n        panic(err)\n    }\n    _, err = io.Copy(fw, file)\n    if err != nil {\n        return err\n    }\n    \/\/ Close multipart writer.\n    writer.Close()\n    req, err := http.NewRequest(\"POST\", \"http:\/\/localhost:8080\/employee\", bytes.NewReader(body.Bytes()))\n    if err != nil {\n        return err\n    }\n    req.Header.Set(\"Content-Type\", writer.FormDataContentType())\n    rsp, _ := client.Do(req)\n    if rsp.StatusCode != http.StatusOK {\n        log.Printf(\"Request failed with response code: %d\", rsp.StatusCode)\n    }\n    return nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Run this program and see the output at your server end as the above client makes a call to your server created in the first example. The server program will give the below output similar to the curl calls.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[John] \n[John] \n[John] \nJohn \n[23] \n[23] \n[23] \n23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also, the server will save two files with the below names similar to the curl calls<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">formfile-test.png\nmapaccess-test.png<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewHTTP Server ExampleHTTP Client Example Overview In HTTP context, the multipart\/form-data content-type is used for submitting HTML form. In the case of multipart\/form-data, as the name suggests, the body&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4894","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>HTTP client\/server multipart form-data request body example in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"HTTP client\/server multipart form-data request body example in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewHTTP Server ExampleHTTP Client Example Overview In HTTP context, the multipart\/form-data content-type is used for submitting HTML form. In the case of multipart\/form-data, as the name suggests, the body...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-01-08T13:30:43+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-03-16T19:10:34+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/\",\"name\":\"HTTP client\/server multipart form-data request body example in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-01-08T13:30:43+00:00\",\"dateModified\":\"2021-03-16T19:10:34+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"HTTP client\/server multipart form-data request body example in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"HTTP client\/server multipart form-data request body example in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/","og_locale":"en_US","og_type":"article","og_title":"HTTP client\/server multipart form-data request body example in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewHTTP Server ExampleHTTP Client Example Overview In HTTP context, the multipart\/form-data content-type is used for submitting HTML form. In the case of multipart\/form-data, as the name suggests, the body...","og_url":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-01-08T13:30:43+00:00","article_modified_time":"2021-03-16T19:10:34+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/","url":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/","name":"HTTP client\/server multipart form-data request body example in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-01-08T13:30:43+00:00","dateModified":"2021-03-16T19:10:34+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/http-mutipart-form-body-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"HTTP client\/server multipart form-data request body example in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1gW","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4894","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4894"}],"version-history":[{"count":5,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4894\/revisions"}],"predecessor-version":[{"id":5343,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4894\/revisions\/5343"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4894"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4894"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4894"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}