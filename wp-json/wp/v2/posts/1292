{"id":1292,"date":"2020-02-01T08:08:05","date_gmt":"2020-02-01T08:08:05","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=1292"},"modified":"2021-01-08T21:57:42","modified_gmt":"2021-01-08T16:27:42","slug":"all-about-time-and-date-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/","title":{"rendered":"Understanding time and date in Go (Golang) &#8211; Complete Guide"},"content":{"rendered":"\n<p class=\"has-medium-font-size\"><strong>Note:<\/strong> If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a>. Now let&#8217;s see the current tutorial. Below is the table of contents.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Structure\" title=\"Structure\">Structure<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Create_a_new_time\" title=\"Create a new time\">Create a new time<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Using_timeNow\" title=\"Using time.Now()\">Using time.Now()<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Using_timeDate\" title=\"Using time.Date()\">Using time.Date()<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Understanding_Duration\" title=\"Understanding Duration\">Understanding Duration<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Add_or_Subtract_to_a_time\" title=\"Add or Subtract to a time\">Add or Subtract to a time<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Add_to_time\" title=\"Add to time \">Add to time <\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Subtract_to_time\" title=\"Subtract to time \">Subtract to time <\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Time_ParsingFormatting\" title=\"Time Parsing\/Formatting\">Time Parsing\/Formatting<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Time_Parse_Example\" title=\"Time Parse Example\">Time Parse Example<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Time_Formatting_Example\" title=\"Time Formatting Example\">Time Formatting Example<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Time_Diff\" title=\"Time Diff\">Time Diff<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Time_Conversion\" title=\"Time Conversion \">Time Conversion <\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#Convert_time_between_different_timezones\" title=\"Convert time between different timezones\">Convert time between different timezones<\/a><\/li><\/ul><\/li><\/ul><\/nav><\/div>\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Time<\/strong> or <strong>Date<\/strong> is represented in Go using <strong>time.Time<\/strong> struct. time can be also be represented as a<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Unix Time (Also known as Epoch Time)<\/strong> &#8211; It is the number of seconds elapsed since 00:00:00 UTC&nbsp;on 1 January 1970. This time is also known as the Unix epoch.<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Structure\"><\/span><strong>Structure<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>time.Time<\/strong> object is used to represent a specific point in time. The <strong>time.Time<\/strong> struct is as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Time struct {\n    \/\/ wall and ext encode the wall time seconds, wall time nanoseconds,\n    \/\/ and optional monotonic clock reading in nanoseconds.\n    wall uint64\n    ext  int64\n    \/\/Location to represent timeZone\n    \/\/ The nil location means UTC\n    loc *Location\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As you can notice that every <strong>time.Time<\/strong> object has an associated <strong>location<\/strong> value which is used to determine the minute, hour, month, day and year corresponding to that time.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Create_a_new_time\"><\/span><strong>Create a new time<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_timeNow\"><\/span><strong>Using time.Now()<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This function can be used to get the current local timestamp. The signature of the function is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Now() Time<\/code><\/pre>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_timeDate\"><\/span><strong>Using time.Date()<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This function returns the time which is <strong>yyyy-mm-dd hh:mm:ss + nsec<\/strong> nanoseconds with the appropriate time zone corresponding to the given location. The signature of the function is:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Understanding_Duration\"><\/span><strong>Understanding Duration<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>duration<\/strong> is the time that has elapsed between two instants of time. It is represented as <strong>int64nanosecond<\/strong> count. So duration is nothing in Go but just a number representing time in nanoseconds. So if duration value is&nbsp; equal to <strong>1000000000 <\/strong>then it represents <strong>1 sec<\/strong> or <strong>1000 milliseconds<\/strong> or <strong>10000000000 nanoseconds<\/strong><br><\/p>\n\n\n\n<p class=\"has-medium-font-size\">As an example duration between two time values 1 hour apart will be below value which is equal number of nanoseconds in 1 hour. <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1 *60*60*1000*1000*1000<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is represented as below in the <strong>time<\/strong> package. <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Duration int64<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below are some common duration which are defined in <strong>time<\/strong> package<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const (\n    Nanosecond  Duration = 1\n    Microsecond          = 1000 * Nanosecond\n    Millisecond          = 1000 * Microsecond\n    Second               = 1000 * Millisecond\n    Minute               = 60 * Second\n    Hour                 = 60 * Minute\n)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some of the function defined on<strong> time.Time<\/strong> object that returns the <strong>Duration<\/strong> are<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>func (t Time) Sub(u Time) Duration<\/strong> &#8211; It returns the duration t-u <\/li><li><strong>func Since(t Time) Duration &#8211; <\/strong>It returns the duration which has elapsed since t<\/li><li><strong>func Until(t Time) Duration<\/strong> &#8211; It returns the duration until t<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Add_or_Subtract_to_a_time\"><\/span><strong>Add or Subtract to a time<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Now that you have understood what duration , let&#8217;s see how we can add or subtract to a time instance<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>time<\/strong> package in golang defines two ways of adding or subtracting to a time.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Add <\/strong>function &#8211; It is used to add\/subtract a duration to time t. Since duration can be represented in hours, minutes, seconds, milliseconds, microseconds and nanoseconds, therefore Add function can be used to add\/subtract hours, minutes, seconds, milliseconds, microseconds and nanoseconds from a time . Its signature is<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (t Time) Add(d Duration) Time<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>AddDate <\/strong>function &#8211; It is used to add\/subtract years, months and days to time t. Its signature is <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (t Time) AddDate(years int, months int, days int) Time<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Note: Positive values are used to add to time and negative values are used to subtract. Let&#8217;s see a working example of Add and Subtract to time.<\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Add_to_time\"><\/span><strong>Add to time <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below code can be used to add to time<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    t := time.Now()\n\n    \/\/Add 1 hours\n    newT := t.Add(time.Hour * 1)\n    fmt.Printf(\"Adding 1 hour\\n: %s\\n\", newT)\n\n    \/\/Add 15 min\n    newT = t.Add(time.Minute * 15)\n    fmt.Printf(\"Adding 15 minute\\n: %s\\n\", newT)\n\n    \/\/Add 10 sec\n    newT = t.Add(time.Second * 10)\n    fmt.Printf(\"Adding 10 sec\\n: %s\\n\", newT)\n\n    \/\/Add 100 millisecond\n    newT = t.Add(time.Millisecond * 10)\n    fmt.Printf(\"Adding 100 millisecond\\n: %s\\n\", newT)\n\n    \/\/Add 1000 microsecond\n    newT = t.Add(time.Millisecond * 10)\n    fmt.Printf(\"Adding 1000 microsecond\\n: %s\\n\", newT)\n\n    \/\/Add 10000 nanosecond\n    newT = t.Add(time.Nanosecond * 10000)\n    fmt.Printf(\"Adding 1000 nanosecond\\n: %s\\n\", newT)\n\n    \/\/Add 1 year 2 month 4 day\n    newT = t.AddDate(1, 2, 4)\n    fmt.Printf(\"Adding 1 year 2 month 4 day\\n: %s\\n\", newT)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Adding 1 hour:\n 2020-02-01 02:16:35.893847 +0530 IST m=+3600.000239893\n\nAdding 15 minute:\n 2020-02-01 01:31:35.893847 +0530 IST m=+900.000239893\n\nAdding 10 sec:\n 2020-02-01 01:16:45.893847 +0530 IST m=+10.000239893\n\nAdding 100 millisecond:\n 2020-02-01 01:16:35.903847 +0530 IST m=+0.010239893\n\nAdding 1000 microsecond:\n 2020-02-01 01:16:35.903847 +0530 IST m=+0.010239893\n\nAdding 1000 nanosecond:\n 2020-02-01 01:16:35.893857 +0530 IST m=+0.000249893\n\nAdding 1 year 2 month 4 day:\n 2021-04-05 01:16:35.893847 +0530 IST<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Subtract_to_time\"><\/span><strong>Subtract to time <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below code can be used to subtract to time<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    t := time.Now()\n\n    \/\/Add 1 hours\n    newT := t.Add(-time.Hour * 1)\n    fmt.Printf(\"Subtracting 1 hour:\\n %s\\n\", newT)\n\n    \/\/Add 15 min\n    newT = t.Add(-time.Minute * 15)\n    fmt.Printf(\"Subtracting 15 minute:\\n %s\\n\", newT)\n\n    \/\/Add 10 sec\n    newT = t.Add(-time.Second * 10)\n    fmt.Printf(\"Subtracting 10 sec:\\n %s\\n\", newT)\n\n    \/\/Add 100 millisecond\n    newT = t.Add(-time.Millisecond * 10)\n    fmt.Printf(\"Subtracting 100 millisecond:\\n %s\\n\", newT)\n\n    \/\/Add 1000 microsecond\n    newT = t.Add(-time.Millisecond * 10)\n    fmt.Printf(\"Subtracting 1000 microsecond:\\n %s\\n\", newT)\n\n    \/\/Add 10000 nanosecond\n    newT = t.Add(-time.Nanosecond * 10000)\n    fmt.Printf(\"Subtracting 1000 nanosecond:\\n %s\\n\", newT)\n\n    \/\/Add 1 year 2 month 4 day\n    newT = t.AddDate(-1, -2, -4)\n    fmt.Printf(\"Subtracting 1 year 2 month 4 day:\\n %s\\n\", newT)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Subtracting 1 hour:\n 2020-02-01 00:18:29.772673 +0530 IST m=-3599.999784391\n\nSubtracting 15 minute:\n 2020-02-01 01:03:29.772673 +0530 IST m=-899.999784391\n\nSubtracting 10 sec:\n 2020-02-01 01:18:19.772673 +0530 IST m=-9.999784391\n\nSubtracting 100 millisecond:\n 2020-02-01 01:18:29.762673 +0530 IST m=-0.009784391\n\nSubtracting 1000 microsecond:\n 2020-02-01 01:18:29.762673 +0530 IST m=-0.009784391\n\nSubtracting 1000 nanosecond:\n 2020-02-01 01:18:29.772663 +0530 IST m=+0.000205609\n\nSubtracting 1 year 2 month 4 day:\n 2018-11-27 01:18:29.772673 +0530 IST<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Time_ParsingFormatting\"><\/span><strong>Time Parsing\/Formatting<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"> If you have worked with time\/date formatting\/parsing in other languages you might have noticed that the other languages use special placeholders for time\/date formatting. For eg ruby language uses<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>%d for day<\/li><li>%Y for year<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">etc<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Golang, instead of using codes such as above, uses date and time format placeholders that look like date and time only. Go uses standard time, which is:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Mon Jan 2 15:04:05 MST 2006  (MST is GMT-0700)\nor \n01\/02 03:04:05PM '06 -0700<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><br>So if you notice go uses <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>01 for day of the month , <\/li><li>02 for the month <\/li><li>03 for hours , <\/li><li>04 for minutes <\/li><li>05 for second <\/li><li>and so on <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below placeholder table describes the exact mapping. Go takes a more pragmatic approach where you don&#8217;t need to remember or lookup for the traditional formatting codes as in other languages<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Placeholder<\/strong><\/td><\/tr><tr><td>Day<\/td><td><strong>2<\/strong> or <strong>02<\/strong> or <strong>_2<\/strong><\/td><\/tr><tr><td>Day of Week<\/td><td><strong>Monday<\/strong> or <strong>Mon<\/strong><\/td><\/tr><tr><td>Month<\/td><td><strong>01<\/strong> or <strong>1<\/strong> or <strong>Jan<\/strong> or <strong>January<\/strong><\/td><\/tr><tr><td>Year<\/td><td><strong>2006<\/strong> or <strong>06<\/strong><\/td><\/tr><tr><td>Hour<\/td><td><strong>03<\/strong> or <strong>3 <\/strong>or <strong>15<\/strong><\/td><\/tr><tr><td>Minutes<\/td><td><strong>04<\/strong> or <strong>4<\/strong><\/td><\/tr><tr><td>Seconds<\/td><td><strong>05<\/strong> or <strong>5<\/strong><\/td><\/tr><tr><td>Milli Seconds&nbsp; (ms)<\/td><td><strong>.000&nbsp; &nbsp; &nbsp; &nbsp; <\/strong>\/\/Trailing zero will be includedor<strong> .999 <\/strong>&nbsp; \/\/Trailing zero will be omitted<\/td><\/tr><tr><td>Micro Seconds (\u03bcs)<\/td><td><strong>.000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <\/strong>\/\/Trailing zero will be includedor <strong>.999999<\/strong>&nbsp; &nbsp; &nbsp; &nbsp; \/\/Trailing zero will be omitted<\/td><\/tr><tr><td>Nano Seconds (ns)<\/td><td><strong>.000000000&nbsp; &nbsp; &nbsp; &nbsp; <\/strong>\/\/Trailing zero will be includedor <strong>.999999999 <\/strong> \/\/Trailing zero will be omitted<\/td><\/tr><tr><td>am\/pm<\/td><td><strong>PM<\/strong> or <strong>pm<\/strong><\/td><\/tr><tr><td>Timezone<\/td><td><strong>MST<\/strong><\/td><\/tr><tr><td>Timezone offset<\/td><td><strong> Z0700 <\/strong>or<strong> Z070000<\/strong> or <strong>Z07<\/strong> or <strong>Z07:00<\/strong> or <strong>Z07:00:00<\/strong>&nbsp; or <strong>-0700<\/strong> or&nbsp; <strong>-070000<\/strong> or <strong>-07<\/strong> or <strong>-07:00<\/strong> or <strong>-07:00:00<\/strong><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Time_Parse_Example\"><\/span><strong>Time Parse Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Now coming back to <strong>time.Parse<\/strong>. The signature of the function is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">func Parse(layout, value string) (Time, error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>time.Parse<\/strong> function takes in two arguments<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>First argument is the layout consisting of time format placeholder<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Second argument is the actual formatted string representing a time.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The way you have to go about this is to make sure that the layout string (first argument ) matches the string representation (second argument) of the time you want to parse into time.Time. For parsing<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For parsing <strong>2020-01-29<\/strong>, layout string should be <strong>06-01-02 <\/strong>or<strong> 2006-01-02<\/strong> or something which maps correctly based on above placeholder table.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Similarly for parsing <strong>&#8220;2020-Jan-29 Wednesday 12:19:25&#8221;<\/strong> the layout string can be <strong>&#8220;2006-Jan-02 Monday 03:04:05&#8221;<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below are the working Code Examples of <strong>time.Parse(). <\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    \/\/Parse YYYY-MM-DD\n    timeT, _ := time.Parse(\"2006-01-02\", \"2020-01-29\")\n    fmt.Println(timeT)\n\n    \/\/Parse YY-MM-DD\n    timeT, _ = time.Parse(\"06-01-02\", \"20-01-29\")\n    fmt.Println(timeT)\n\n    \/\/Parse YYYY-#{MonthName}-DD\n    timeT, _ = time.Parse(\"2006-Jan-02\", \"2020-Jan-29\")\n    fmt.Println(timeT)\n\n    \/\/Parse YYYY-#{MonthName}-DD WeekDay HH:MM:SS\n    timeT, _ = time.Parse(\"2006-Jan-02 Monday 03:04:05\", \"2020-Jan-29 Wednesday 12:19:25\")\n    fmt.Println(timeT)\n\n    \/\/Parse YYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset\n    timeT, _ = time.Parse(\"2006-Jan-02 Monday 03:04:05 PM MST -07:00\", \"2020-Jan-29 Wednesday 12:19:25 AM IST +05:30\")\n    fmt.Println(timeT)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">2020-01-29 00:00:00 +0000 UTC\n2020-01-29 00:00:00 +0000 UTC\n2020-01-29 00:00:00 +0000 UTC\n2020-01-29 12:19:25 +0000 UTC\n2020-01-29 00:19:25 +0530 IST<\/code><\/pre>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Time_Formatting_Example\"><\/span><strong>Time Formatting Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>time.Format <\/strong>function can be used to format time to a string representation. The signature of the function is <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (t Time) Format(layout string)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see some time format code examples<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    now := time.Now()\n    \n    \/\/Format YYYY-MM-DD\n    fmt.Printf(\"YYYY-MM-DD: %s\\n\", now.Format(\"2006-01-02\"))\n\n    \/\/Format YY-MM-DD\n    fmt.Printf(\"YY-MM-DD: %s\\n\", now.Format(\"06-01-02\"))\n\n    \/\/Format YYYY-#{MonthName}-DD\n    fmt.Printf(\"YYYY-#{MonthName}-DD: %s\\n\", now.Format(\"2006-Jan-02\"))\n\n    \/\/Format HH:MM:SS\n    fmt.Printf(\"HH:MM:SS: %s\\n\", now.Format(\"03:04:05\"))\n\n    \/\/Format HH:MM:SS Millisecond\n    fmt.Printf(\"HH:MM:SS Millisecond: %s\\n\", now.Format(\"03:04:05 .999\"))\n\n    \/\/Format YYYY-#{MonthName}-DD WeekDay HH:MM:SS\n    fmt.Printf(\"YYYY-#{MonthName}-DD WeekDay HH:MM:SS: %s\\n\", now.Format(\"2006-Jan-02 Monday 03:04:05\"))\n\n    \/\/Format YYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset\n    fmt.Printf(\"YYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset: %s\\n\", now.Format(\"2006-Jan-02 Monday 03:04:05 PM MST -07:00\"))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">YYYY-MM-DD: 2020-01-25\nYY-MM-DD: 20-01-25\nYYYY-#{MonthName}-DD: 2020-Jan-25\nHH:MM:SS: 11:14:16\nHH:MM:SS Millisecond: 11:14:16 .213\nYYYY-#{MonthName}-DD WeekDay HH:MM:SS: 2020-Jan-25 Saturday 11:14:16\nYYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset: 2020-Jan-25 Saturday 11:14:16 PM IST +05:30<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Time_Diff\"><\/span><strong>Time Diff<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"> <strong>time<\/strong> package has a method <strong>Sub<\/strong> which can be used to get the difference between two different time values. The signature of the function is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (t Time) Sub(u Time) Duration<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">currentTime := time.Now()\noldTime := time.Date(2020, 1, 2, 0, 0, 0, 0, time.UTC)\ndiff := currentTime.Sub(oldTime)<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Time_Conversion\"><\/span><strong>Time Conversion <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below code shows conversion of <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>time.Time to Unix Timestamp<\/li><li>Unix Timestamp to time.Time<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    tNow := time.Now()\n\n    \/\/time.Time to Unix Timestamp\n    tUnix := tNow.Unix()\n    fmt.Printf(\"timeUnix %d\\n\", tUnix)\n\n    \/\/Unix Timestamp to time.Time\n    timeT := time.Unix(tUnix, 0)\n    fmt.Printf(\"time.Time: %s\\n\", timeT)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">timeUnix 1257894000\ntime.Time: 2009-11-10 23:00:00 +0000 UTC<\/code><\/pre>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Convert_time_between_different_timezones\"><\/span><strong>Convert time between different timezones<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>In<\/strong> function can be used to change the <strong>location<\/strong> associated with a particular <strong>time.Time<\/strong> object. Whenever the <strong>In<\/strong> function is called on any <strong>time.Time<\/strong> object (say t)&nbsp; then, <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A copy of <strong>t<\/strong> is created representing the same time instant.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>t&#8217;s location is set to the location passed to In function for display purposes<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>t<\/strong> is returned back<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see the below working code which can be used to change the location value associated with a particular time.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    now := time.Now()\n\n    loc, _ := time.LoadLocation(\"UTC\")\n    fmt.Printf(\"UTC Time: %s\\n\", now.In(loc))\n   \n    loc, _ = time.LoadLocation(\"Europe\/Berlin\")\n    fmt.Printf(\"Berlin Time: %s\\n\", now.In(loc))\n\n    loc, _ = time.LoadLocation(\"America\/New_York\")\n    fmt.Printf(\"New York Time: %s\\n\", now.In(loc))\n\n    loc, _ = time.LoadLocation(\"Asia\/Dubai\")\n    fmt.Printf(\"Dubai Time: %s\\n\", now.In(loc))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">UTC Time: 2020-01-31 18:09:41.705858 +0000 UTC\nBerlin Time: 2020-01-31 19:09:41.705858 +0100 CET\nNew York Time: 2020-01-31 13:09:41.705858 -0500 EST\nDubai Time: 2020-01-31 22:09:41.705858 +0400 +04<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;Golang Comprehensive Tutorial Series. Now let&#8217;s see the current tutorial&#8230;.<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[181,182,183,179,185],"class_list":["post-1292","post","type-post","status-publish","format-standard","hentry","category-tech","tag-complete-guide","tag-format","tag-parse","tag-timezone","tag-using"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understanding time and date in Go (Golang) - Complete Guide - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understanding time and date in Go (Golang) - Complete Guide - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;Golang Comprehensive Tutorial Series. Now let&#8217;s see the current tutorial....\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-02-01T08:08:05+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-01-08T16:27:42+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/\",\"name\":\"Understanding time and date in Go (Golang) - Complete Guide - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-02-01T08:08:05+00:00\",\"dateModified\":\"2021-01-08T16:27:42+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understanding time and date in Go (Golang) &#8211; Complete Guide\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understanding time and date in Go (Golang) - Complete Guide - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/","og_locale":"en_US","og_type":"article","og_title":"Understanding time and date in Go (Golang) - Complete Guide - Welcome To Golang By Example","og_description":"Note: If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;Golang Comprehensive Tutorial Series. Now let&#8217;s see the current tutorial....","og_url":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-02-01T08:08:05+00:00","article_modified_time":"2021-01-08T16:27:42+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/","url":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/","name":"Understanding time and date in Go (Golang) - Complete Guide - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-02-01T08:08:05+00:00","dateModified":"2021-01-08T16:27:42+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/all-about-time-and-date-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understanding time and date in Go (Golang) &#8211; Complete Guide"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-kQ","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1292","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=1292"}],"version-history":[{"count":14,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1292\/revisions"}],"predecessor-version":[{"id":4915,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1292\/revisions\/4915"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=1292"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=1292"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=1292"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}