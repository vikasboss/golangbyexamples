{"id":2298,"date":"2020-06-20T11:52:22","date_gmt":"2020-06-20T06:22:22","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2298"},"modified":"2020-06-20T11:55:11","modified_gmt":"2020-06-20T06:25:11","slug":"pointer-receiver-method-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/","title":{"rendered":"Pointer Receiver for a method in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">To better understand pointer receiver we first have to understand the value receiver for a method.<\/p>\n\n\n\n<p class=\"has-large-font-size\"><strong>Methods on Value Receiver<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of a value receiver<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc (e employee) details() {\n    fmt.Printf(\"Name: %s\\n\", e.name)\n    fmt.Printf(\"Age: %d\\n\", e.age)\n}\n\nfunc (e employee) getSalary() int {\n    return e.salary\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    emp.details()\n    fmt.Printf(\"Salary %d\\n\", emp.getSalary())\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name: Sam\nAge: 31\nSalary 2000<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that the receiver is available inside the method and fields of the receiver can be accessed inside the method. Can field of the receiver also be changed inside the method?<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc (e employee) setNewName(newName string) {\n    e.name = newName\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    emp.setNewName(\"John\")\n    fmt.Printf(\"Name: %s\\n\", emp.name)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name: Sam<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above code a method <strong>setNewName <\/strong>is defined on the <strong>employee<\/strong> struct. In this method we update the name of the employee like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e.name = newName<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">After setting the new name when we print the employee name again in the main function, we see that the old name &#8220;Sam&#8221; is printed instead of &#8220;John&#8221;. This happens because method is defined on a value receiver<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (e employee) setNewName(newName string) <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Since the method is defined on a value receiver when the method is called a copy of the receiver is made and that copy of the receiver is available inside the method. Since it is a copy, any changes made to the value receiver is not visible to the caller. That is why it prints the old name &#8220;Sam&#8221; instead of &#8220;John&#8221;. Now the question which comes to the mind whether there is any way to fix this. And the answer is yes, and this is where pointer receivers come into the picture.<\/p>\n\n\n\n<p class=\"has-large-font-size\"><strong>Method on a Pointer Receiver<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the above example we saw a method on a value receiver. Any change made to a value receiver is not visible to the caller. Methods can also be defined on a pointer receiver. Any change made to the pointer receiver will be visible to the caller. Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc (e *employee) setNewName(newName string) {\n    e.name = newName\n}\n\nfunc main() {\n    emp := &employee{name: \"Sam\", age: 31, salary: 2000}\n    emp.setNewName(\"John\")\n    fmt.Printf(\"Name: %s\\n\", emp.name)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name: John<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above program, we defined the method <strong>setNewName <\/strong>on a pointer receiver<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (e *employee) setNewName(newName string)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we created an employee pointer and called the <strong>setNewName <\/strong>method<strong>\u00a0<\/strong>on it. We see that the changes made to the employee pointer inside the <strong>setNewName <\/strong>are visible to the caller and it prints the new name.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Is it necessary to create the employee pointer to call a method with a pointer receiver? No, it is not. The method can be called on the employee instance and the language will take care of it to correctly pass the receiver as a pointer to the method. This flexibility is provided by the language.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc (e *employee) setNewName(newName string) {\n    e.name = newName\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    emp.setNewName(\"John\")\n\n    fmt.Printf(\"Name: %s\\n\", emp.name)\n\n    (&emp).setNewName(\"Mike\")\n    fmt.Printf(\"Name: %s\\n\", emp.name)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name: John\nName: Mike<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We see in above program that even if a method is defined on a pointer receiver but we are calling the method with a non-pointer employee instance<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp.setNewName(\"John\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But the language passes the receiver as a pointer and therefore the changes are visible to the caller.Even this way of calling is valid<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">(&emp).setNewName(\"Mike\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now, how about the other way around. If a method is defined on a value receiver, can the method be called with a pointer of the receiver? <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Yes, even this is valid and the language takes care of passing the argument correctly as value receiver irrespective of whether the method was called on a pointer or normal struct. Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc (e employee) setNewName(newName string) {\n    e.name = newName\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    emp.setNewName(\"John\")\n\n    fmt.Printf(\"Name: %s\\n\", emp.name)\n    (&emp).setNewName(\"Mike\")\n\n    fmt.Printf(\"Name: %s\\n\", emp.name)\n    emp2 := &employee{name: \"Sam\", age: 31, salary: 2000}\n    emp2.setNewName(\"John\")\n    fmt.Printf(\"Name: %s\\n\", emp2.name)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name: Sam\nName: Sam\nName: Sam<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Do note here since in all three cases, the <strong>setNewName<\/strong> method had a value receiver hence changes are not visible to the caller as the value is passed as a copy. It prints the old name in all three cases<br>To summarize what we learned above<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If a method has a value receiver it supports calling of that method with both value and pointer receiver<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If a method has a pointer receiver then also it supports calling of that method with both value and pointer receiver<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">This is unlike function where if<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If a function has a pointer argument then it will only accept a pointer as an argument<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If a function has a value argument then it will only accept a value as an argument<\/li><\/ul>\n\n\n\n<p class=\"has-large-font-size\"><strong>When to use pointer receiver<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the changes to the receiver made inside the method have to be visible to the caller.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the struct is big, then it is better to use a pointer receiver otherwise a copy of the struct will be made every time a method is called which will be expensive<\/li><\/ul>\n","protected":false},"excerpt":{"rendered":"<p>To better understand pointer receiver we first have to understand the value receiver for a method. Methods on Value Receiver Let&#8217;s see an example of a value receiver Output Notice that the&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2298","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Pointer Receiver for a method in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Pointer Receiver for a method in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"To better understand pointer receiver we first have to understand the value receiver for a method. Methods on Value Receiver Let&#8217;s see an example of a value receiver Output Notice that the...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-20T06:22:22+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-06-20T06:25:11+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/\",\"name\":\"Pointer Receiver for a method in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-06-20T06:22:22+00:00\",\"dateModified\":\"2020-06-20T06:25:11+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Pointer Receiver for a method in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Pointer Receiver for a method in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/","og_locale":"en_US","og_type":"article","og_title":"Pointer Receiver for a method in Go (Golang) - Welcome To Golang By Example","og_description":"To better understand pointer receiver we first have to understand the value receiver for a method. Methods on Value Receiver Let&#8217;s see an example of a value receiver Output Notice that the...","og_url":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-06-20T06:22:22+00:00","article_modified_time":"2020-06-20T06:25:11+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/","url":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/","name":"Pointer Receiver for a method in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-06-20T06:22:22+00:00","dateModified":"2020-06-20T06:25:11+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/pointer-receiver-method-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Pointer Receiver for a method in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-B4","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2298","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2298"}],"version-history":[{"count":5,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2298\/revisions"}],"predecessor-version":[{"id":2305,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2298\/revisions\/2305"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2298"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2298"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2298"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}