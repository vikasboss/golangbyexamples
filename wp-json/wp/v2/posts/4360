{"id":4360,"date":"2020-11-19T21:37:50","date_gmt":"2020-11-19T16:07:50","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4360"},"modified":"2021-07-10T13:18:49","modified_gmt":"2021-07-10T07:48:49","slug":"packages-modules-go-second","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/","title":{"rendered":"Packages and Modules in Go (Golang) &#8211; Part 2"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the&nbsp; chapter 5 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\">Variables<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/packages-modules-go-first\">Packages and Modules \u2013 Part 1<\/a><br><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Types_of_Modules\" title=\"Types of Modules\">Types of Modules<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Package_vs_Module\" title=\"Package vs Module\">Package vs Module<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Add_a_dependency_to_your_project\" title=\"Add a dependency to your project\">Add a dependency to your project<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Directly_adding_it_to_the_gomod_file\" title=\"Directly adding it to the go.mod file\">Directly adding it to the go.mod file<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Do_a_go_get\" title=\"Do a go get\">Do a go get<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Add_the_dependency_to_your_source_code_and_do_a_go_mod_tidy\" title=\"Add the dependency to your source code and do a go mod tidy\">Add the dependency to your source code and do a go mod tidy<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Adding_a_vendor_directory\" title=\"Adding a vendor directory\">Adding a vendor directory<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Module_Import_Path\" title=\"Module Import Path\">Module Import Path<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Importing_package_within_same_module\" title=\"Importing package within same module\">Importing package within same module<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Importing_package_from_different_module_locally\" title=\"Importing package from different module locally\">Importing package from different module locally<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Selecting_the_version_of_library\" title=\"Selecting the version of library\">Selecting the version of library<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Differ_in_minor_or_patch_version\" title=\"Differ in minor or patch version\">Differ in minor or patch version<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Differ_in_major_version\" title=\"Differ in major version\">Differ in major version<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#go_mod_command\" title=\"go mod command\">go mod command<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-16\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Direct_vs_Indirect_Dependencies_in_gomod_file\" title=\"Direct vs Indirect Dependencies in go.mod file\">Direct vs Indirect Dependencies in go.mod file<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-17\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In the last tutorial we learn about package in detail and overview of modules.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In this tutorial we will focus on modules<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Types_of_Modules\"><\/span><strong>Types of Modules<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">We learn that module is a directory containing nested go packages. So essentially module can be treated as a package only that contains nested packages. We have seen in the package tutorial can a package can be either an executable package or utility package (non-executable). Similar to package, modules can be of two types.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Executable module<\/strong> &#8211; We already know that <strong>main<\/strong> is the executable package in GoLang. Hence a module containing the main package is the executable module .&nbsp; The <strong>main<\/strong> package will contain a <strong>main<\/strong> function that denotes the start of a program. On installing the module having <strong>main<\/strong> package it will be create an executable in the $GOBIN directory.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Non-Executable module or Utility Module<\/strong>&#8211; Any package other than <strong>main<\/strong> package is a non-executable package. It is not self executable. It just contains the utility function and other utility things which can be utilized by an executable package. Hence if the module doesn&#8217;t contain the <strong>main<\/strong> package then it will be a non-executable or utility module.&nbsp; This module is meant to be used as a utility and will be imported by other modules.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">To create a executable for a module&nbsp; (Only for module with main package)<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Do a go build and it will create the executable in the current directory<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Do a go install and it will create the executable in the $GOBIN directory<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Package_vs_Module\"><\/span><strong>Package vs Module<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">As per module definition, it is a directory containing a collection of nested and related go packages <strong>go.mod<\/strong> at its root.&nbsp; The <strong>go.mod<\/strong> file defines the<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Module import path.<\/li><li>Dependency requirements of the module for a successful build. It defines both project&#8217;s dependencies requirement and also locks them to their correct version<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Modules provides<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Dependency Management<\/li><li>With modules go project doesn&#8217;t necessarily have to lie the <strong>$GOPATH\/sr<\/strong>c folder.&nbsp;<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Also in addition to <strong>go.mod<\/strong> file go also keeps a <strong>go.sum<\/strong> file which contains the cryptographic hash of bits of all project&#8217;s dependent modules. This to make validate that your project&#8217;s dependent modules are not changed.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The behaviour of packages inside a module is same as earlier. So whatever applied for a package also applies now. There is no change in that. However a collection of packages can be called as module when there is a requirement to version them separately. Also when it is common piece of code and you want to share that code across multiple projects.&nbsp;<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Add_a_dependency_to_your_project\"><\/span><strong>Add a dependency to your project<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s explore some ways of adding dependency to your project<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Directly adding it to the <strong>go.mod<\/strong> file<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Do a <strong>go get<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Add the dependency to your source code and do a <strong>go mod tidy<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Before looking at each of the ways, again let&#8217;s create a module first<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod init sample.com\/learn<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Directly_adding_it_to_the_gomod_file\"><\/span><strong>Directly adding it to the go.mod file<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">We can&nbsp; add direct dependency to the go.mod file too. Let&#8217;s do that<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Add below dependency to the <strong>go.mod<\/strong> file<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">require github.com\/pborman\/uuid v1.2.1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">With this dependency go.mod file will look like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module sample.com\/learn\n\ngo 1.14\n\nrequire github.com\/pborman\/uuid v1.2.1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now we need to download the newly added dependency as well. Fo that we can use the below command<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod download<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This command will download the <strong>github.com\/pborman\/uuid<\/strong> module as well all its dependencies. Also, it will update the <strong>go.sum<\/strong> file with the checksum and version of all direct and indirect dependencies. go build as well as go install also will download the dependencies and also build the binary. go run will also download and run the binary as well. go mod download command is used when you want to pre-download the dependencies without build or running it.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Do_a_go_get\"><\/span><strong>Do a go get<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Simply doing a go get will also the add the dependency in the go.mod file. Remove the uuid dependency we added above from go.mod file and clean up go.sum file. Now run below command<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">export GO111MODULE=on\ngo get github.com\/pborman\/uuid<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now check the contents of go.mod file. Do a cat<strong> go.mod<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module sample.com\/learn\n\ngo 1.14\n\nrequire github.com\/pborman\/uuid v1.2.1 \/\/indirect<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The dependency will be marked as <strong>\/\/indirect<\/strong> as it is not being used in any of the source files. Once you do a go build after using this in the source files, the \/\/indirect will be removed automatically by go. Also it will update the <strong>go.sum<\/strong> file with the checksum and version of all direct and indirect dependencies.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Add_the_dependency_to_your_source_code_and_do_a_go_mod_tidy\"><\/span><strong>Add the dependency to your source code and do a go mod tidy<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Basically go mod tidy command makes sure that your go.mod files reflects the dependencies that you have actually used in your project. When we run go mod tidy command then it will do two things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Add any dependency which is imported in the source files<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Remove any dependency which is mentioned in the <strong>go.mod<\/strong> file but not imported in any of the source files.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example. Create a module with an import path as &#8220;<strong>sample.com\/learn<\/strong>&#8220;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod init sample.com\/learn<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s create a file named <strong>uuid.go <\/strong>in the same directory with below contents<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>uuid.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com\/pborman\/uuid\"\n)\n\nfunc main() {\n\tuuidWithHyphen := uuid.NewRandom()\n\tuuid := strings.Replace(uuidWithHyphen.String(), \"-\", \"\", -1)\n\tfmt.Println(uuid)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that we have imported the dependency in the uuid.go as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\"github.com\/pborman\/uuid\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s run the below command<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod tidy<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This command will download all the dependencies that are required in your source files and update <strong>go.mod<\/strong> file with that dependency. After running this command let&#8217;s now let&#8217;s again examine the contents of <strong>go.mod<\/strong> file. Do a cat<strong> go.mod<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module sample.com\/learn\n\ngo 1.14\n\nrequire github.com\/pborman\/uuid v1.2.1<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Adding_a_vendor_directory\"><\/span><strong>Adding a vendor directory<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">If you want to vendor your dependencies,&nbsp; then below command can be used to achieve the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod vendor<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will create a vendor directory inside your project directory. You can also check in the vendor directory to your VCS (Version Control System). This becomes useful in sense that none of the dependency needs to be downloaded at run time as it is already present in the vendor folder checked into VCS<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Module_Import_Path\"><\/span><strong>Module Import Path<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">We have already seen that module import path is the prefix path that is used to import all packages within that module<\/p>\n\n\n\n<p class=\"has-medium-font-size\">There can be three cases that decide what import path name can be used with modules.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The module is a utility module and you plan to publish your module<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The module is a utility module and you don&#8217;t plan to publish your module<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The module is a executable module<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>The module is a utility module and you plan to publish your module<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">If you plan to publish your module then the module name should match the URL of the repo which host that module. Go tries to download dependencies from the VCS using the same import path of the module.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>The module is a utility module and you don&#8217;t plan to publish your module<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is the case when you only mean to use the utility module locally only. In this case the import path can be anything.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>The module is a executable module<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In this case also module import path can be anything. The module import path can be a non-url even if you plan to commit your module into VCS as it will not be used by any other module<\/p>\n\n\n\n<p class=\"has-medium-font-size\">However it is a good practice to use meaningful import path while creating module<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Importing_package_within_same_module\"><\/span><strong>Importing package within same module<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Any package within the same module can be imported using the import path of module + directory containing that package. To illustrate lets create a module<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Make a <strong>learn<\/strong> directory<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create a module with import path as <strong>&#8220;sample.com\/learn&#8221;<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod init sample.com\/learn<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Now create main.go (Having main package and main function)<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>And math\/math.go &#8211; math package<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"sample.com\/learn\/math\"\n)\n\nfunc main() {\n\tfmt.Println(math.Add(1, 2))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>math\/math.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package math\n\nfunc Add(a, b int) int {\n    return a + b\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">See how we have imported the math package in the main.go file<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\"sample.comlearn\/math\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here the import path is import path of module which is <strong>sample.com\/learn<\/strong> +&nbsp; directory containing the package which is <strong>math. <\/strong>Hence &#8220;<strong>sample.com\/learn\/math&#8221; <\/strong>. Packages in nested directory can also be imported in the same way. The way it works is that since the prefix is the module import path, hence go will know that you are trying to import from the same module. So it will directly refer it instead of downloading it.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Importing_package_from_different_module_locally\"><\/span><strong>Importing package from different module locally<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">There are cases when we want to import a module which is present locally. Let&#8217;s understand how we can import such a module. But first, we have to create a module that can be used by others and then import it into the other module.&nbsp;For that let&#8217;s create two modules<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>sample.com\/math<\/strong> module<\/li><li><strong>school<\/strong> module<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>school<\/strong> module will be calling code of the <strong>sample.com\/math<\/strong> module<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s first create the <strong>sample.com\/math<\/strong> module which will be used by <strong>school<\/strong> module<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Make a <strong>math<\/strong> directory<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create a module with import path as <strong>sample.com\/math<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">go mod init sample.com\/math<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create a file <strong>math.go<\/strong> with below contents&nbsp; in the <strong>math<\/strong> directory<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package math\n\nfunc Add(a, b int) int {\n\treturn a + b\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now<strong> <\/strong>let&#8217;s create the school module<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Now<strong> <\/strong>create a <strong>school<\/strong> directory in the same path as <strong>math<\/strong> directory side by side<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create a module name <strong>school<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">go mod init school<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Now let&#8217;s modify the <strong>go.mod<\/strong> file to import the math module in the school module. To import a local module that is not pushed to VCS, we are going to use replace directory. The replace directory will replace the module path with the path you specify.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module school\n\ngo 1.14\n\nreplace sample.com\/math => ..\/math<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create file school.go which is going to use the Add function in <strong><a href=\"http:\/\/sample.com\">sample.com<\/a>\/math <\/strong>module<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"sample.com\/math\"\n)\n\nfunc main() {\n\tfmt.Println(math.Add(2, 4))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now do a go run<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go run school.go<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is able to call the Add function of the <strong><a href=\"http:\/\/sample.com\">sample.com<\/a>\/math&nbsp; <\/strong>module and correctly gives the output as 6.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also it will update the go.mod with version information of the <strong><a href=\"http:\/\/sample.com\">sample.com<\/a>\/math <\/strong>module<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module school\n\ngo 1.14\n\nreplace sample.com\/math => ..\/math\n\nrequire sample.com\/math v0.0.0-00010101000000-000000000000<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Selecting_the_version_of_library\"><\/span><strong>Selecting the version of library<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">To understand how does GO&#8217;s approach while selecting the version of the library of which two versions are specified in the <strong>go.mod<\/strong> file, we have to first understand Semantic Versioning<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Semantic Versioning is comprised of three parts separated by dots. Below is the format for versioning.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v{major_version}.{minor_version}.{patch_version}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">where<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>v<\/strong> &#8211; it is just an indicator that it is a version<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>major_version &#8211; It represents the incompatible API changes in the library. So when there are changes in the library that is not backward compatible, in that case, major_version is incremented<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>minor_version &#8211; It represents the change in functionality of the library in a backward-compatible manner. So when there are some functionality changes in the library but those changes are backward compatible then, in that case, the minor version is incremented<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>patch_version &#8211; It represents the bug fixes in the library in a backward-compatible manner. So when there are bug fixes to the existing functionality of the library, then in that case patch_version is incremented.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Now there can be two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Two versions of the same library is used which only differ in the minor and patch version. Their major version is the same.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Two versions of the same library is used which differ in the major.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see what approach does go follows in the above two cases<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Differ_in_minor_or_patch_version\"><\/span><strong>Differ in minor or patch version<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Go follows the minimum version policy approach while selecting the version of the library of which two versions are specified in the <strong>go.mod<\/strong> file which differ only in their minor or patch version.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For example in case you are using the two versions of same library which are<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1.2.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1.3.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then go will choose 1.3.0 as it is the latest version.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Differ_in_major_version\"><\/span><strong>Differ in major version<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Go treats the major version as a different module itself. Now, what does that means? This essentially means that the import path will have a major version as its suffix. Let&#8217;s take the example of any go library with VCS as <strong>github.com\/sample<\/strong>. Let&#8217;s latest semantic version is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v8.2.3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then the go.mod file will like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">module github.com\/sample\/v8\n\ngo 1.13\n\n..<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It has major version in its import path. So any library which is using this sample library have to import it like<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import \"github.com\/sample\/v8\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If in future <strong>v9<\/strong> version is released than it has to be imported in the application like<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import \"github.com\/sample\/v9\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also the library will change its go.mod file to reflect the v9 major version<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module github.com\/sample\/v9<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">What it essentially allows is to use different major version of the same library to be used within same go application.&nbsp; We can also give meaningful names when different major version of the same library is imported in the same application. For eg<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import sample_v8 \"github.com\/sample\/v8\"\nimport sample_v9 \"github.com\/sample\/v9\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is also known as <strong>Semantic Import Versioning<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also note that<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For the first version it is ok to not specify the version in the go.mod file.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Also be careful when importing different major version of the same library. Look out for the new functionality that might be available with new versions.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Also for the same reason when you update a specific module using<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get -u<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then it will only upgrade to the latest minor version or patch version whichever applicable. For example let&#8217;s say the current version used by an application is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v1.1.3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also let&#8217;s say we have below versions available<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v1.2.0\nv2.1.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then when we run<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then it will update to<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v1.2.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The reason is because go get will only update the minor or patch version but never the major version as go treats major version of a module as a different module entirely.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">To upgrade the major version, specify that&nbsp; upgraded dependency explicitly&nbsp; in the <strong>go.mod<\/strong> file or do a go get of that version.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also couple of points to note about upgrading module<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade a dependency to its latest patch version only, use below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get -u=patch <dependency_name><\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade a dependency to a specific version, use below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get dependency@version<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade a dependency to a specific commit, use below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get <dependency_name>@commit_number<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade all dependency to their latest minor and patch version, use below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">go get .\/...<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"go_mod_command\"><\/span><strong>go mod command<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below are some of the options for the go mod command.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>download &#8211; <\/strong>It will download the the required dependencies to the&nbsp; $GOPATH\/pkg\/mod\/cache folder.&nbsp; Also it will update the <strong>go.sum<\/strong> file with the checksum and version of all direct and indirect dependencies<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>edit<\/strong> &#8211; This is for editing the go.mod file. It provides a set of editing flags. Run below command to see set of all editing flags available<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go help mod edit<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">go help mod editFor eg below are some editing flags available<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li><strong>-fmt <\/strong>flag will format the go.mod file. It will not make any other change<\/li><li><strong>-module<\/strong> flag can be used to set the module&#8217;s import path<\/li><\/ol>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>graph<\/strong> &#8211; This can be used to print the module requirement dependency graph<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>init<\/strong> &#8211; We already have seen the usage of this command above. It is used to init a new module<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>tidy<\/strong> &#8211; This command will download all the dependencies that are required in your source files<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>vendor<\/strong> &#8211; If you want to vendor your dependencies,&nbsp; then below command can be used to achieve the same. It will create a vendor directory inside your project directory. You can also check in the vendor directory to your VCS (Version Control System)<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>verify &#8211; <\/strong>This command checks for the modification of current downloaded dependencies. If any of the downloaded dependency has been verified that it will exit with a non-zero code<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>why &#8211;&nbsp; <\/strong>this command analyzes the graph of packages from the main module. It prints the shortest path from the main module to the given package. For instance the school module which we created in section &#8220;Importing package from different module locally&#8221; if we print why command as below<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go mod why sample.com\/math<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then below will be the output<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"># sample.com\/math\nschool\nsample.com\/math<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The output illustrates that the <a href=\"http:\/\/sample.com\">sample.com<\/a>\/math package is at one distance in the graph from main module which is school here.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Direct_vs_Indirect_Dependencies_in_gomod_file\"><\/span><strong>Direct vs Indirect Dependencies in go.mod file<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A direct dependency is the dependency which the module directly imports . An indirect dependency is the dependency which are imported by module&#8217;s direct dependencies. Also, any dependency that is mentioned in the <strong>go.mod<\/strong> file but not imported in any of the source files of the module is also treated as an indirect dependency.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>go.mod<\/strong> file only records the direct dependency.However it may record an indirect dependency in below cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Any indirect dependency which is not listed in the go.mod file of your direct dependency or if direct dependency doesn&#8217;t have a go.mod file , then that direct dependency will be added to the go.mod file with \/\/direct as the suffix<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Any dependency which is not imported in any of the source file of the module (Example of this we have already seen earlier in the tutorial)<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>go.sum<\/strong> will record the checksum of direct and indirect dependencies.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example of Indirect Dependencies in go.mod file<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand it with an example. For that let&#8217;s first create a module<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">git mod init sample.com\/learn<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s add colly lib version v1.2.0 as a dependency in the go.mod file. colly version v1.2.0 doesn&#8217;t have a go.mod file.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module sample.com\/learn\n\ngo 1.14\n\nrequire github.com\/gocolly\/colly v1.2.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now create a file learn.go<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">package main\n\nimport (\n\t\"github.com\/gocolly\/colly\"\n)\n\nfunc main() {\n\t_ = colly.NewCollector()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now do a go build. Since colly version v1.2.0 doesn&#8217;t have a go.mod file , all dependencies required by colly will be added to the go.mod file with \/\/indirect as suffix. Do a go build. Now check the go.mod file. You will see below contents of the file<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module learn\n\ngo 1.14\n\nrequire (\n\tgithub.com\/PuerkitoBio\/goquery v1.6.0 \/\/ indirect\n\tgithub.com\/antchfx\/htmlquery v1.2.3 \/\/ indirect\n\tgithub.com\/antchfx\/xmlquery v1.3.3 \/\/ indirect\n\tgithub.com\/gobwas\/glob v0.2.3 \/\/ indirect\n\tgithub.com\/gocolly\/colly v1.2.0\n\tgithub.com\/kennygrant\/sanitize v1.2.4 \/\/ indirect\n\tgithub.com\/saintfish\/chardet v0.0.0-20120816061221-3af4cd4741ca \/\/ indirect\n\tgithub.com\/temoto\/robotstxt v1.1.1 \/\/ indirect\n\tgolang.org\/x\/net v0.0.0-20201027133719-8eef5233e2a1 \/\/ indirect\n\tgoogle.golang.org\/appengine v1.6.7 \/\/ indirect\n)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">All other dependencies are suffixed by <strong>\/\/indirect<\/strong>. Also check that all direct and indirect dependencies will be recorded in the go.sum file.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about packages and modules in golang. Hope you have liked this article. Please share feedback\/mistakes\/improvements in comments<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<\/strong><a href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\">Variables<\/a><strong><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <\/strong><a href=\"https:\/\/golangbyexamples.com\/packages-modules-go-first\">Packages and Modules \u2013 Part 1<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the&nbsp; chapter 5 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;VariablesPrevious Tutorial&nbsp;\u2013 Packages and Modules \u2013&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4360","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Packages and Modules in Go (Golang) - Part 2 - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Packages and Modules in Go (Golang) - Part 2 - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the&nbsp; chapter 5 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;VariablesPrevious Tutorial&nbsp;\u2013 Packages and Modules \u2013...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-11-19T16:07:50+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-07-10T07:48:49+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"14 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\",\"url\":\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\",\"name\":\"Packages and Modules in Go (Golang) - Part 2 - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-11-19T16:07:50+00:00\",\"dateModified\":\"2021-07-10T07:48:49+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Packages and Modules in Go (Golang) &#8211; Part 2\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Packages and Modules in Go (Golang) - Part 2 - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/","og_locale":"en_US","og_type":"article","og_title":"Packages and Modules in Go (Golang) - Part 2 - Welcome To Golang By Example","og_description":"This is the&nbsp; chapter 5 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;VariablesPrevious Tutorial&nbsp;\u2013 Packages and Modules \u2013...","og_url":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-11-19T16:07:50+00:00","article_modified_time":"2021-07-10T07:48:49+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"14 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/","url":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/","name":"Packages and Modules in Go (Golang) - Part 2 - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-11-19T16:07:50+00:00","dateModified":"2021-07-10T07:48:49+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/packages-modules-go-second\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/packages-modules-go-second\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Packages and Modules in Go (Golang) &#8211; Part 2"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-18k","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4360","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4360"}],"version-history":[{"count":9,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4360\/revisions"}],"predecessor-version":[{"id":5886,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4360\/revisions\/5886"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4360"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4360"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4360"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}