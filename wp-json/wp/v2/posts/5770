{"id":5770,"date":"2021-05-31T18:03:42","date_gmt":"2021-05-31T12:33:42","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5770"},"modified":"2021-06-01T01:14:32","modified_gmt":"2021-05-31T19:44:32","slug":"regex-replace-string-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/","title":{"rendered":"Golang Regex: Replace all string which matches a Regular Expression"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#Replacement_string_as_a_literal_string\" title=\"Replacement string as a literal string\">Replacement string as a literal string<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#A_string_having_capturing_group_unnamed_sub_matches\" title=\"A string having capturing group unnamed sub matches\">A string having capturing group unnamed sub matches<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#A_string_having_Capturing_groups_with_named_sub_matches\" title=\"A string having Capturing groups with named sub matches\">A string having Capturing groups with named sub matches<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Golang <strong>regexp<\/strong> package provides a method which provides a method named <strong>ReplaceAllString<\/strong>&nbsp;which given a string can be used to replace&nbsp;all substring within that string that matches a regular expression.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/regexp\/#Regexp.ReplaceAllString\">https:\/\/golang.org\/pkg\/regexp\/#Regexp.ReplaceAllString<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the signature of the method<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (re *Regexp) ReplaceAllString(src, repl string) string<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It accepts two arguments<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>First is the input string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The second is the replacement string.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">ReplaceAll returns a copy of the <strong>src<\/strong> string, replacing matches of the Regexp with the replacement string <strong>repl<\/strong><br>The replacement string can be<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A literal string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A string having capturing group unnamed sub matches.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A string having Capturing groups named sub matches<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Sounds confusing? It will all be clear when we see examples of all. Let&#8217;s see them<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Replacement_string_as_a_literal_string\"><\/span><strong>Replacement string as a literal string<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The replacement string is a literal string in this case. Below is an example of the same.&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(`\\w+:[0-9]\\d{1,3}`)\n\n\tinput := \"The persons are John:21, Simon:23, and Mike:19\"\n\n\tresult := sampleRegexp.ReplaceAllString(input, \"redacted\")\n\tfmt.Println(string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The persons are redacted, redacted, and redacted<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we have below regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">`\\w+:[0-9]\\d{1,3}`<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches the name and age pair of the form<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">name:age<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we have below input string&nbsp;which has three <strong>name:age<\/strong> pairs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The persons are John:21, Simon:23, Mike:19<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We redacted all the <strong>name:age<\/strong> pair by replacing it with the redacted keyword.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">result := sampleRegexp.ReplaceAllString(input, \"redacted\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that the replacement string is a literal string that is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">redacted<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"A_string_having_capturing_group_unnamed_sub_matches\"><\/span><strong>A string having capturing group unnamed sub matches<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This is the case when we have capturing group in the regex. To know the details about capturing group, please refer to this article<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the replacement string<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>$1<\/strong> or <strong>${1}<\/strong> represents the first sub match<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>$2<\/strong> or <strong>${2}<\/strong> represents the second sub match<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>&#8230;and so on<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see the below example then it will be more clear<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n\nfunc main() {\n\n    sampleRegexp := regexp.MustCompile(`(\\w+):([0-9]\\d{1,3})`)\n    input := \"The names are John:21, Simon:23, and Mike:19\"\n\n    result := sampleRegexp.ReplaceAllString(input, \"$2:$1\")\n    fmt.Println(string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are 21:John, 23:Simon, and 19:Mike<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we have below regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(\\w+):([0-9]\\d{1,3})<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches the <strong>name<\/strong> and <strong>age<\/strong> pair same as above but it has two capturing groups (enclosed with parentheses) where <strong>$1<\/strong> captures name and <strong>$2<\/strong> captures age<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>$0<\/strong> or <strong>${0}<\/strong> &#8211; entire match<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(\\w+):([0-9]\\d{1,3})<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>$1<\/strong> or <strong>${1} <\/strong>&#8211; first submatch<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(\\w+)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>$2<\/strong> -or <strong>${2}<\/strong> &#8211; second submatch<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">([0-9]\\d{1,3})<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we have below input string&nbsp;which has three <strong>name:age<\/strong> pairs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are John:21, Simon:23, and Mike:19<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then in the replacement string, we swapped to have <strong>age<\/strong> first and then <strong>name<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">result := sampleRegexp.ReplaceAllString(input, \"$2:$1\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">That is why in the output we have <strong>age<\/strong> first and then <strong>name<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are 21:John, 23:Simon, and 19:Mike<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">You can also replace only one of the sub-match. For example, if you want to redact age only then that can be done as well. See below program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(`(\\w+):([0-9]\\d{1,3})`)\n\n\tinput := \"The names are John:21, Simon:23, and Mike:19\"\n\n\tresult := sampleRegexp.ReplaceAllString(input, \"$1\")\n\tfmt.Println(string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are John, Simon, and Mike<\/code><\/pre>\n\n\n\n<p>In the above code, the replacement string is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">$1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So it replaces the entire <strong>name:age<\/strong> pair with the only name.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">You can also use <strong>$0<\/strong>. It will represent the entire match<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n\nfunc main() {\n    sampleRegexp := regexp.MustCompile(`(\\w+):([0-9]\\d{1,3})`)\n    input := \"The names are John:21, Simon:23, and Mike:19\"\n\n    result := sampleRegexp.ReplaceAllString(input, \"-$0-\")\n    fmt.Println(string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are -John:21-, -Simon:23-, and -Mike:19-<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we added <strong>&#8216;-&#8216;<\/strong> before and after <strong>$0<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">-$0-<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">That is why the output is as above<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In case the replacement string contains literal dollar then we can use the method <strong>ReplaceAllLiteralString <\/strong>method. <\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/regexp\/#Regexp.ReplaceAllLiteralString\">https:\/\/golang.org\/pkg\/regexp\/#Regexp.ReplaceAllLiteralString<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In this the replacement string is substituted directly without any kind of analysis on it i.e it is used literally. See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(`(\\w+):([0-9]\\d{1,3})`)\n\n\tinput := \"The names are John:21, Simon:23, and Mike:19\"\n\n\tresult := sampleRegexp.ReplaceAllLiteralString(input, \"$1\")\n\tfmt.Println(string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are $1, $1, and $1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As the output suggests above, it prints the literal dollar sign.<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"A_string_having_Capturing_groups_with_named_sub_matches\"><\/span><strong>A string having Capturing groups with named sub matches<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This is the case when we have named capturing group in the regex. To know the details about capturing group, please refer to this article<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program first in which we will see named capturing group. We will dissect this program to understand more clearly after that.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(`(?P<Name>\\w+):(?P<Age>[0-9]\\d{1,3})`)\n\n\tinput := \"The names are John:21, Simon:23, Mike:19\"\n\n\tresult := sampleRegexp.ReplaceAllString(input, \"$Age:$Name\")\n\tfmt.Println(string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are 21:John, 23:Simon, 19:Mike<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we have below regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">`(?P<Name>\\w+):(?P<Age>[0-9]\\d{1,3})`<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches the name and age pair same as above but it has two name capturing groups<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The first capturing group name is <strong>&#8220;Name&#8221;<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(?P<Name>\\w+)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The second capturing group name is <strong>&#8220;Age&#8221;<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(?P<Age>[0-9]\\d{1,3})<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we have below input string&nbsp;which has three <strong>name:age<\/strong> pairs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are John:21, Simon:23 and Mike:19<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then in the replacement string, we swapped to have <strong>age<\/strong> first and then <strong>name<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">result := sampleRegexp.ReplaceAllString(input, \"$Age:$Name\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">That is why in the output we have <strong>age<\/strong> first and then <strong>name<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">The names are 21:John, 23:Simon, 19:Mike<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is all about replacing a string that matches a regular expression in golang. Hope you have liked this article. Please share feedback in the comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewReplacement string as a literal stringA string having capturing group unnamed sub matchesA string having Capturing groups with named sub matches Overview Golang regexp package provides a method which&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[],"class_list":["post-5770","post","type-post","status-publish","format-standard","hentry","category-tech"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang Regex: Replace all string which matches a Regular Expression - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang Regex: Replace all string which matches a Regular Expression - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewReplacement string as a literal stringA string having capturing group unnamed sub matchesA string having Capturing groups with named sub matches Overview Golang regexp package provides a method which...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-05-31T12:33:42+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-31T19:44:32+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/\",\"name\":\"Golang Regex: Replace all string which matches a Regular Expression - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-05-31T12:33:42+00:00\",\"dateModified\":\"2021-05-31T19:44:32+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang Regex: Replace all string which matches a Regular Expression\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang Regex: Replace all string which matches a Regular Expression - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/","og_locale":"en_US","og_type":"article","og_title":"Golang Regex: Replace all string which matches a Regular Expression - Welcome To Golang By Example","og_description":"Table of Contents OverviewReplacement string as a literal stringA string having capturing group unnamed sub matchesA string having Capturing groups with named sub matches Overview Golang regexp package provides a method which...","og_url":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-05-31T12:33:42+00:00","article_modified_time":"2021-05-31T19:44:32+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/","url":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/","name":"Golang Regex: Replace all string which matches a Regular Expression - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-05-31T12:33:42+00:00","dateModified":"2021-05-31T19:44:32+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/regex-replace-string-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/regex-replace-string-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang Regex: Replace all string which matches a Regular Expression"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1v4","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5770","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5770"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5770\/revisions"}],"predecessor-version":[{"id":5776,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5770\/revisions\/5776"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5770"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5770"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5770"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}