{"id":594,"date":"2019-11-16T17:20:56","date_gmt":"2019-11-16T17:20:56","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=594"},"modified":"2020-02-01T20:24:17","modified_gmt":"2020-02-01T20:24:17","slug":"command-design-pattern-in-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/","title":{"rendered":"Command Design Pattern in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference  &#8211; <a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/https:\/\/golangbyexamples.com\/all-design-patterns-golan\">https:\/\/golangbyexamples.com\/all-design-patterns-golang\/<\/a><\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#Introduction\" title=\"Introduction:\">Introduction:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#UML_Diagram\" title=\"UML Diagram:\">UML Diagram:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#Mapping\" title=\"Mapping&nbsp;\">Mapping&nbsp;<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#Practical_Example\" title=\"Practical Example:\">Practical Example:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#Full_Working_Code\" title=\"Full Working Code:\">Full Working Code:<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Command Design Pattern is a behavioral design pattern. It suggests encapsulating the request as a standalone object. The created object has all the information about the request and thus can execute it independently.<br><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The basic components that are used in the command design pattern are:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Receiver<\/strong> &#8211; It is the class which contains the business logic. The command object only delays its requests to the receiver.<\/li><li><strong>Command<\/strong> &#8211; embeds receiver and binds a particular action of the receiver.<\/li><li><strong>Invoker<\/strong> &#8211; It embeds the command and envokes the command by calling the command&#8217;s execute method.<\/li><li><strong>Client<\/strong> &#8211; It creates the command with the appropriate receiver bypassing the receiver to the command&#8217;s constructor. After that, it also associates the resulting command with an invoker.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand a situation after which it will be clear why the command pattern is useful.&nbsp; Imagine the case of a TV. A TV can be turned <strong>ON<\/strong> by either<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>Remote ON Button<\/li><li>On Button on the tv.<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Both these trigger points do the same thing i.e. turn the TV on. In order to ON the TV, we can implement the ON command object with the receiver as the TV. When execute() method is called on this ON command object, it in turn call TV.on() function. So in this case:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Receiver <\/strong>is the <strong>TV<\/strong><\/li><li><strong>Command <\/strong>is the <strong>ON command object <\/strong>which embeds <strong>TV<\/strong><\/li><li><strong>Invoker<\/strong> is the <strong>Remote ON Button<\/strong> or the <strong>ON Button on the TV<\/strong>. Both embed the <strong>ON command object<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Notice here that we have wrapped the request of turning the <strong>TV<\/strong> on into an <strong>ON command object <\/strong>which can be invoked by multiple invokers. This ON command object embeds the receiver (TV here) and can be executed independently.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">As another example, imagine the case of an <strong>Adobe Photoshop<\/strong> Application. In Photoshop a Save operation can be triggered from 3 places<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>From the menu.<\/li><li>From the button on the upper bar.<\/li><li>Using shortcut Ctrl+S.<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">All three trigger points do the same thing, i.e save the current image in the application. This saves can be wrapped into a Save Command Object with a current image open in the application as the receiver. <\/p>\n\n\n\n<p class=\"has-medium-font-size\"><br>What&#8217;s the benefit of creating a separate command object in the above examples.<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>It decouples the UI logic from underlying business logic<\/li><li>No need to create different handlers for each of the invokers.<\/li><li>The command object contains all the information it needs to execute. Hence it can also be used for delayed execution.<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at the UML diagram now.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"UML_Diagram\"><\/span><strong>UML Diagram:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Notice how Invoker embeds the command. The request is sent to the Invoker and it passes the request to the encapsulated command object.<\/li><li>All the Concrete Command Object embed the receiver<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-gallery columns-1 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"362\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg?resize=640%2C362&#038;ssl=1\" alt=\"\" data-id=\"632\" data-full-url=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg?fit=770%2C436&amp;ssl=1\" data-link=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/command-design-pattern\/\" class=\"wp-image-632\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg?w=770&amp;ssl=1 770w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg?resize=300%2C170&amp;ssl=1 300w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg?resize=768%2C435&amp;ssl=1 768w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><\/ul><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Mapping\"><\/span><strong>Mapping&nbsp;<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><br>The below table represents the mapping from the UML diagram actors to actual implementation actors in <strong>&#8220;Practical Example&#8221;<\/strong> below<br><\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>Invoker<\/td><td>button.go<\/td><\/tr><tr><td>Command Interface<\/td><td>command.go<\/td><\/tr><tr><td>Concrete Command 1<\/td><td>onCommand.go<\/td><\/tr><tr><td>Concrete Command 2<\/td><td>offCommand.go<\/td><\/tr><tr><td>Receiver Interface<\/td><td>device.go<\/td><\/tr><tr><td>Concrete Receiver<\/td><td>tv.go<\/td><\/tr><tr><td>Client<\/td><td>main.go<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Practical_Example\"><\/span><strong>Practical Example:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>button.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype button struct {\n    command command\n}\n\nfunc (b *button) press() {\n    b.command.execute()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>command.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype command interface {\n    execute()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>onCommand.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype onCommand struct {\n    device device\n}\n\nfunc (c *onCommand) execute() {\n    c.device.on()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>offCommand.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype offCommand struct {\n    device device\n}\n\nfunc (c *offCommand) execute() {\n    c.device.off()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>device.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype device interface {\n    on()\n    off()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>tv.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype tv struct {\n    isRunning bool\n}\n\nfunc (t *tv) on() {\n    t.isRunning = true\n    fmt.Println(\"Turning tv on\")\n}\n\nfunc (t *tv) off() {\n    t.isRunning = false\n    fmt.Println(\"Turning tv off\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    tv := &tv{}\n    onCommand := &onCommand{\n        device: tv,\n    }\n    offCommand := &offCommand{\n        device: tv,\n    }\n    onButton := &button{\n        command: onCommand,\n    }\n    onButton.press()\n    offButton := &button{\n        command: offCommand,\n    }\n    offButton.press()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Turning tv on\nTurning tv off<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype button struct {\n    command command\n}\n\nfunc (b *button) press() {\n    b.command.execute()\n}\n\ntype command interface {\n    execute()\n}\n\ntype offCommand struct {\n    device device\n}\n\nfunc (c *offCommand) execute() {\n    c.device.off()\n}\n\ntype onCommand struct {\n    device device\n}\n\nfunc (c *onCommand) execute() {\n    c.device.on()\n}\n\ntype device interface {\n    on()\n    off()\n}\n\ntype tv struct {\n    isRunning bool\n}\n\nfunc (t *tv) on() {\n    t.isRunning = true\n    fmt.Println(\"Turning tv on\")\n}\n\nfunc (t *tv) off() {\n    t.isRunning = false\n    fmt.Println(\"Turning tv off\")\n}\n\nfunc main() {\n    tv := &tv{}\n    onCommand := &onCommand{\n        device: tv,\n    }\n    offCommand := &offCommand{\n        device: tv,\n    }\n    onButton := &button{\n        command: onCommand,\n    }\n    onButton.press()\n    offButton := &button{\n        command: offCommand,\n    }\n    offButton.press()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Turning tv on\nTurning tv off<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; https:\/\/golangbyexamples.com\/all-design-patterns-golang\/ Table of Contents Introduction:UML Diagram:Mapping&nbsp;Practical Example:Full Working Code: Introduction: Command Design&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[70,25,3,4],"class_list":["post-594","post","type-post","status-publish","format-standard","hentry","category-tech","tag-command-design-pattern-in-go","tag-design-pattern","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Command Design Pattern in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Command Design Pattern in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; https:\/\/golangbyexamples.com\/all-design-patterns-golang\/ Table of Contents Introduction:UML Diagram:Mapping&nbsp;Practical Example:Full Working Code: Introduction: Command Design...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-11-16T17:20:56+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-02-01T20:24:17+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/\",\"name\":\"Command Design Pattern in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg\",\"datePublished\":\"2019-11-16T17:20:56+00:00\",\"dateModified\":\"2020-02-01T20:24:17+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Command Design Pattern in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Command Design Pattern in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/","og_locale":"en_US","og_type":"article","og_title":"Command Design Pattern in Go (Golang) - Welcome To Golang By Example","og_description":"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; https:\/\/golangbyexamples.com\/all-design-patterns-golang\/ Table of Contents Introduction:UML Diagram:Mapping&nbsp;Practical Example:Full Working Code: Introduction: Command Design...","og_url":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-11-16T17:20:56+00:00","article_modified_time":"2020-02-01T20:24:17+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/","url":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/","name":"Command Design Pattern in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg","datePublished":"2019-11-16T17:20:56+00:00","dateModified":"2020-02-01T20:24:17+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Command-Design-Pattern.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/command-design-pattern-in-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Command Design Pattern in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-9A","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/594","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=594"}],"version-history":[{"count":8,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/594\/revisions"}],"predecessor-version":[{"id":1349,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/594\/revisions\/1349"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=594"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=594"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=594"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}