{"id":3903,"date":"2020-08-15T14:00:02","date_gmt":"2020-08-15T08:30:02","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3903"},"modified":"2020-08-15T14:00:14","modified_gmt":"2020-08-15T08:30:14","slug":"all-operations-channel-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/","title":{"rendered":"All operations\/function on a channel in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#Send_Operation\" title=\"Send Operation\">Send Operation<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#Receive_Operation\" title=\"Receive Operation\">Receive Operation<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#Close_operation_on_a_channel\" title=\"Close operation on a channel\">Close operation on a channel<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#Length_of_a_channel_using_len_function\" title=\"Length of a channel using len() function\">Length of a channel using len() function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#Capacity_of_a_channel_using_cap_function\" title=\"Capacity of a channel using cap()\u00a0function\">Capacity of a channel using cap()\u00a0function<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below operations\/functions are applicable for channel in golang<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Send the data to the channel<\/li><li>Receive the data from the\u00a0 channel<\/li><li>Close a channel<\/li><li>Length of a channel using len() function<\/li><li>Capacity of a channel using cap()\u00a0 function<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at each operation\/functions on a channel one by one<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Send_Operation\"><\/span><strong>Send Operation<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The send operation used to send data to the channel. Below is the format for sending to a channel<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">ch <- data<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">where<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>ch is the channel variable<\/li><li>data is what is being sent to the channel<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Note that type of data and type of channel should match.<br>Send operation\u00a0can block for a buffered or unbuffered channel in the following way<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Buffered Channel- <\/strong>Send on a buffer channel only blocks if the buffer is full<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Unbuffered Channel<\/strong>- Send on a channel is block unless there is another goroutine to receive.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">\u00a0Let's look at the program for send operation after we have understood the receive operation as well<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Receive_Operation\"><\/span><strong>Receive Operation<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The receive operation used to read data from the channel Below is the format for receiving from a channel<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">data := <- ch <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">where<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>ch is the channel variable<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>data is a variable on which the read data from the channel will be stored.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let's see an example of where we will send data from one goroutine and receive that data in another goroutine.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n\n    fmt.Println(\"Sending value to channnel\")\n    go send(ch)\n\n    fmt.Println(\"Receiving from channnel\")\n    go receive(ch)\n\n    time.Sleep(time.Second * 1)\n}\n\nfunc send(ch chan int) {\n    ch <- 1\n}\n\nfunc receive(ch chan int) {\n    val := <-ch\n    fmt.Printf(\"Value Received=%d in receive function\\n\", val)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sending value to channel\nReceiving from channel\nValue Received=1 in receive function<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a channel that can only transport data of type int. Function <strong>send()<\/strong> and <strong>receive() <\/strong>are started as a goroutine. We are sending data to the channel in send() goroutine and receiving data in the receive() goroutine.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Receive operation\u00a0can block for a buffered or unbuffered channel in the following way<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Buffered Channel - <\/strong>Receiving is only blocked is channel is empty<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Unbuffered Channel - <\/strong>Receiving is blocked until there is another goroutine on the other side to send.<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Close_operation_on_a_channel\"><\/span><strong>Close operation on a channel<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Close is an inbuilt function that can be used to close a channel. Closing of a channel means that no more data can we send to the channel.\u00a0 Channel is generally closed when all the data has been sent and there's no more data to be send.\u00a0Let's see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n    go sum(ch, 3)\n    ch <- 2\n    ch <- 2\n    ch <- 2\n    close(ch)\n    time.Sleep(time.Second * 1)\n}\n\nfunc sum(ch chan int, len int) {\n    sum := 0\n    for i := 0; i < len; i++ {\n        sum += <-ch\n    }\n    fmt.Printf(\"Sum: %d\\n\", sum)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sum: 6<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a channel.\u00a0 Then we called the <strong>sum<\/strong> function in a goroutine. In the main function, we send 3 values to the channel and after that, we closed the channel indicating that no more values can be sent to the channel. The <strong>sum<\/strong> function iterates over the channel using the for loop and calculates the sum value.<br><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Sending on a close channel will\u00a0cause a panic.\u00a0 See the program below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    ch := make(chan int)\n    close(ch)\n    ch <- 2\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">panic: send on closed channel<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also closing a already closed channel will cause a panic<\/p>\n\n\n\n<p class=\"has-medium-font-size\">While receiving from a\u00a0 channel we can also use an additional variable\u00a0 to determine if the channel\u00a0 has been closed.\u00a0 Below is the syntax for the\u00a0same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">val,ok <- ch<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The value of ok will be<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>True if the channel is not closed<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>False every channel is closed<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 2\n    val, ok := <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n\n    close(ch)\n    val, ok = <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Val: 2 OK: true\nVal: 0 OK: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program created a channel of capacity one.\u00a0 Then we send one value to the channel.\u00a0 The <strong>ok<\/strong> variable in the first receive is true since the channel is not closed. The ok variable in the second\u00a0 receive is\u00a0 false because the channel is closed<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Length_of_a_channel_using_len_function\"><\/span><strong>Length of a channel using len() function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Builtin <strong>len()<\/strong> function can be used to get the length of a channel. The length of a channel is the number of elements that are already there in the channel. So length actually represents the number of elements queued in the buffer of the channel. Length of a channel is always less than or equal to the capacity of the channel.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Length of unbuffered channel is always zero<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\tch := make(chan int, 3)\n\tch <- 5\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n\n\tch <- 6\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n\tch <- 7\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Len: 1\nLen: 2\nLen: 3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above code, the first created a channel of capacity 3.\u00a0 After that, we keep sending some value to the channel. As you can notice from your output that after each send operation to the length of channel increases by one as the length denotes the number of item in the buffer of channel.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Capacity_of_a_channel_using_cap_function\"><\/span><strong>Capacity of a channel using cap()\u00a0function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The capacity of a\u00a0buffered channel is the number of elements that channel can hold. Capacity refers to the size of the buffer of the channel.\u00a0The capacity of the channel can be specified during the creation of the channel while using the make function. The second argument is the capacity<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The capacity of an unbuffered channel is always zero<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan int, 3)\n    fmt.Printf(\"Capacity: %d\\n\", cap(ch))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Capacity: 3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we specified the capacity as 3 in the make function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">make(chan int, 3)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let's\u00a0see summary table\u00a0which shows the result of each operation on the different types of channel<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td><strong>Command<\/strong><\/td><td><strong>Unbuffered Channel<\/strong><strong>(Not Closed and not nil)<\/strong><\/td><td><strong>Buffered Channel<\/strong><strong>(Not Closed and not nil)<\/strong><\/td><td><strong>Closed Channel<\/strong><\/td><td><strong>Nil Channel<\/strong><\/td><\/tr><tr><td>Send<\/td><td>Block if there is is no corresponding receiver otherwise success<\/td><td>Block if the channel is full otherwise success<\/td><td>Panic<\/td><td>Block forever<\/td><\/tr><tr><td>Receive<\/td><td>Block if there is no corresponding sender otherwise success<\/td><td>Block if the channel is empty otherwise success<\/td><td>Receives the default value of data type from the channel if channel is empty else&nbsp;&nbsp;receives the actual value<\/td><td>Block forever<\/td><\/tr><tr><td>Close<\/td><td>Success<\/td><td>Success<\/td><td>Panic<\/td><td>Panic<\/td><\/tr><tr><td>Length<\/td><td>0<\/td><td>Number of elements queued in the buffer of the channel<\/td><td>-0 if unbuffered channel-Number of elements queued in the buffer if buffered channel<\/td><td>0<\/td><\/tr><tr><td>Capacity<\/td><td>0<\/td><td>Size of the buffer of the channel<\/td><td>-0 if unbuffered channel-Size of the buffer if buffered channel<\/td><td>0<\/td><\/tr><\/tbody><\/table><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewSend OperationReceive OperationClose operation on a channelLength of a channel using len() functionCapacity of a channel using cap()\u00a0function Overview Below operations\/functions are applicable for channel in golang Send the&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-3903","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>All operations\/function on a channel in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"All operations\/function on a channel in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewSend OperationReceive OperationClose operation on a channelLength of a channel using len() functionCapacity of a channel using cap()\u00a0function Overview Below operations\/functions are applicable for channel in golang Send the...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-08-15T08:30:02+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-08-15T08:30:14+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/\",\"name\":\"All operations\/function on a channel in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-08-15T08:30:02+00:00\",\"dateModified\":\"2020-08-15T08:30:14+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"All operations\/function on a channel in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"All operations\/function on a channel in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/","og_locale":"en_US","og_type":"article","og_title":"All operations\/function on a channel in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewSend OperationReceive OperationClose operation on a channelLength of a channel using len() functionCapacity of a channel using cap()\u00a0function Overview Below operations\/functions are applicable for channel in golang Send the...","og_url":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-08-15T08:30:02+00:00","article_modified_time":"2020-08-15T08:30:14+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/","url":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/","name":"All operations\/function on a channel in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-08-15T08:30:02+00:00","dateModified":"2020-08-15T08:30:14+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/all-operations-channel-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/all-operations-channel-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"All operations\/function on a channel in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-10X","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3903","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3903"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3903\/revisions"}],"predecessor-version":[{"id":3906,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3903\/revisions\/3906"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3903"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3903"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3903"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}