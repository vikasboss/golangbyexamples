{"id":2601,"date":"2020-07-18T20:54:42","date_gmt":"2020-07-18T15:24:42","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2601"},"modified":"2020-07-18T20:54:58","modified_gmt":"2020-07-18T15:24:58","slug":"declaring-implementing-interface-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/","title":{"rendered":"Declaring and Implementing an interface in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#Declaring_an_Interface\" title=\"Declaring an Interface\">Declaring an Interface<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#Implementing_an_interface\" title=\"Implementing an interface\">Implementing an interface<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Interface is a type in Go which is a collection of method signatures. These collection of method signatures are meant to represent a behaviour. The interface declares only the method set and any type which implements all methods of the interface is of that interface type.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Declaring_an_Interface\"><\/span><strong>Declaring an Interface<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s define an interface named <strong>animal. <\/strong>The <strong>animal<\/strong> interface has two methods <strong>breathe <\/strong>and <strong>walk<\/strong>. It defines only the method signatures and nothing else.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type animal interface {\n    breathe()\n    walk()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A method signature would include<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Name of the method<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Number of arguments and type of each argument<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Number of return values and type of each return value<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">With above declaration we created a new interface type i.e <strong>animal . <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is ok to define a variable of <strong>animal<\/strong> type. Let&#8217;s create a variable of <strong>animal<\/strong> interface type.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\nfunc main() {\n\tvar a animal\n\n\tfmt.Println(a)\n\tfmt.Printf(\"Underlying Type: %T\\n\", a)\n\tfmt.Printf(\"Underlying Value: %v\\n\", a)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\"><nil>\nUnderlying Type: <nil>\nUnderlying Value: <nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As seen in above program it is ok to create a variable of interface type. It prints nil as default zero value of an interface is nil.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Implementing_an_interface\"><\/span><strong>Implementing an interface<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Any type which implements the breathe and walk method then it is said to implement the <strong>animal<\/strong> interface. . So if we define a <strong>lion<\/strong> struct and implements the breathe and walk method then it will implement the\u00a0 animal interface.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype lion struct {\n    age int\n}\n\nfunc (l lion) breathe() {\n    fmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n    fmt.Println(\"Lion walk\")\n}\n\nfunc main() {\n    var a animal\n    a = lion{age: 10}\n    a.breathe()\n    a.walk()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Lion breathes\nLion walk<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We declare a variable of animal interface type<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var a animal<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we assign an instance of lion struct to it.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a = lion{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Assigning an instance of <strong>lion<\/strong> struct to a variable of <strong>animal<\/strong> interface type works because <strong>lion<\/strong> struct implements both <strong>breathe<\/strong> and <strong>walk<\/strong> method of <strong>animal<\/strong>. The type is not checked during this assignment, instead it is enough to check that the type assigned does implement <strong>breathe<\/strong> and <strong>walk<\/strong> method.\u00a0 The concept is similar to duck typing,\u00a0 a <strong>lion<\/strong> can <strong>breathe<\/strong> and <strong>walk<\/strong> like an <strong>animal<\/strong> and hence it is an <strong>animal<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">There is no explicit declaration that a type implements an interface. In fact, in Go there doesn&#8217;t exist any <strong>&#8220;implements&#8221; <\/strong>keyword similar to Java.\u00a0 A type implements an interface if it implements all the methods of the interface.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewDeclaring an InterfaceImplementing an interface Overview Interface is a type in Go which is a collection of method signatures. These collection of method signatures are meant to represent a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2601","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Declaring and Implementing an interface in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Declaring and Implementing an interface in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewDeclaring an InterfaceImplementing an interface Overview Interface is a type in Go which is a collection of method signatures. These collection of method signatures are meant to represent a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-07-18T15:24:42+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-07-18T15:24:58+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/\",\"name\":\"Declaring and Implementing an interface in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-07-18T15:24:42+00:00\",\"dateModified\":\"2020-07-18T15:24:58+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Declaring and Implementing an interface in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Declaring and Implementing an interface in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/","og_locale":"en_US","og_type":"article","og_title":"Declaring and Implementing an interface in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewDeclaring an InterfaceImplementing an interface Overview Interface is a type in Go which is a collection of method signatures. These collection of method signatures are meant to represent a...","og_url":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-07-18T15:24:42+00:00","article_modified_time":"2020-07-18T15:24:58+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/","url":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/","name":"Declaring and Implementing an interface in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-07-18T15:24:42+00:00","dateModified":"2020-07-18T15:24:58+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/declaring-implementing-interface-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Declaring and Implementing an interface in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-FX","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2601","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2601"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2601\/revisions"}],"predecessor-version":[{"id":2603,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2601\/revisions\/2603"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2601"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2601"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2601"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}