{"id":5837,"date":"2021-06-17T10:03:35","date_gmt":"2021-06-17T04:33:35","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5837"},"modified":"2021-06-17T10:03:40","modified_gmt":"2021-06-17T04:33:40","slug":"optional-operator-regex-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/","title":{"rendered":"Golang Regex: Optional Operator or question mark (?) in regular expression"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#Program\" title=\"Program\">Program<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#Question_Mark_Operator_is_non-lazy\" title=\"Question Mark Operator is non-lazy\">Question Mark Operator is non-lazy<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#About_the_double_question_mark_operator\" title=\"About the double question mark operator\">About the double question mark operator<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#Question_Mark_after_quantifiers\" title=\"Question Mark after quantifiers\">Question Mark after quantifiers<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Question Mark is the optional operator in regex. This means that it optionally matches the preceding character before the question mark<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Eg.\u00a0<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abcd?<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This will match both <strong>&#8220;abc&#8221;<\/strong> and <strong>&#8220;abcd&#8221;<\/strong>.<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example for the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"abcd?\")\n\n\tmatch := sampleRegexp.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abcd\"))\n\tfmt.Printf(\"For abcd: %t\\n\", match)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abc: true\nFor abcd: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Several characters can also be made optional by closing them with parentheses and then putting the question mark behind them. Eg<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc(de)?<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"abc(de)?\")\n\n\tmatch := sampleRegexp.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abcde\"))\n\tfmt.Printf(\"For abcde: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abcd\"))\n\tfmt.Printf(\"For abcd: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abc: true\nFor abcde: true\nFor abcd: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches <strong>&#8220;abc&#8221;<\/strong>\u00a0 and <strong>&#8220;abcde&#8221;<\/strong>.\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It also matched <strong>&#8220;abcd&#8221;<\/strong>. You must be wondering why it matched <strong>&#8220;abcd&#8221;<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">If the given string or text contains the regex as a substring then also it gives a match. That is why it gave a match as <strong>&#8220;abcd&#8221;<\/strong> contains <strong>&#8220;abc&#8221;<\/strong> as a substring which is a match for regex. If we want to do full string matches then we need to use the anchor characters at the start and end of the regex.\u00a0 <strong>Caret<\/strong> anchor character will be used at the start and <strong>Dollar<\/strong> anchor character will be used at the end.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example for the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"^abc(de)?$\")\n\n\tmatch := sampleRegexp.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abcde\"))\n\tfmt.Printf(\"For abcde: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abcd\"))\n\tfmt.Printf(\"For abcd: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abc: true\nFor abcde: true\nFor abcd: false<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Question_Mark_Operator_is_non-lazy\"><\/span><strong>Question Mark Operator is non-lazy<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Question Mark Operator is non-lazy or greedy. This means that it will match the optional pattern first.\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the regular expression world, non-lazy(or sometimes also called greedy)\u00a0 means trying to match as much as possible. While lazy(or sometimes also called non-greedy) means matching only as much as needed.\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For example for the given regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">https? <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If you try to match the below input string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Better is https<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then there are two options<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Match <strong>http<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Match <strong>https<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Then it will always match <strong>https<\/strong> and never <strong>http<\/strong>. The reason is that it is non-lazy.\u00a0 Even when it matches <strong>http<\/strong> it doesn&#8217;t stop and tries to match the optional character as well. If the optional character matches then it returns <strong>https<\/strong> otherwise it returns <strong>http<\/strong>.\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"https?\")\n\n\tmatch := sampleRegexp.Find([]byte(\"Better is https\"))\n\tfmt.Printf(\"Match: %s\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Match: https<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have used the <strong>Find<\/strong> function which returns the actual substring that matched with a regex. As you can notice in the output it matched <strong>&#8220;https&#8221;<\/strong> and not <strong>&#8220;http&#8221; <\/strong>because the question mark operator is non-lazy<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"About_the_double_question_mark_operator\"><\/span><strong>About the double question mark operator<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">It is lazy.\u00a0 As soon it finds the first match, it does not try to match further. So for the above text, it will always give result as\u00a0<strong>&#8220;http&#8221; <\/strong>and never <strong>&#8220;https&#8221;<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"https??\")\n\n\tmatch := sampleRegexp.Find([]byte(\"Better is https\"))\n\tfmt.Printf(\"Match: %s\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Match: http<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Question_Mark_after_quantifiers\"><\/span><strong>Question Mark after quantifiers<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The question mark &#8216;?&#8217; after quantifiers is lazy or non-greedy. The quantifiers could be<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Plus &#8216;+&#8217;<\/strong> &#8211; One or more<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Asterisk &#8216;*&#8217;<\/strong>\u00a0 &#8211; Zero or more<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"http(s+?)\")\n\n\tmatch := sampleRegexp.Find([]byte(\"Better is httpsss\"))\n\tfmt.Printf(\"Match: %s\\n\", match)\n\n\tsampleRegexp = regexp.MustCompile(\"http(s*?)\")\n\n\tmatch = sampleRegexp.Find([]byte(\"Better is httpsss\"))\n\tfmt.Printf(\"Match: %s\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Match: https\nMatch: http<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Question mark after a <strong>plus<\/strong> operator<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Qusetion mark after <strong>asterisk<\/strong> operator<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In both the case the input string is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Better is httpsss<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the first case, we used a question mark after the plus operator in the regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\"http(s+?)\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It gives below match as <strong>&#8220;https&#8221;<\/strong> instead of <strong>&#8220;httpsss&#8221;<\/strong> as question mark when used after the <strong>Plus<\/strong> operator is non-greedy<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the second case, we used a question mark after the asterisk sign in the regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\"http(s*?)\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It gives match as <strong>&#8220;http&#8221;<\/strong> instead of <strong>&#8220;httpsss&#8221;<\/strong> as the question mark when used after the <strong>Asterisk<\/strong> operator is non-greedy<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see another example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"(a+?)(a*)\")\n\n\tmatch := sampleRegexp.FindStringSubmatch(\"aaaaaaa\")\n\tfmt.Printf(\"Match: %s Length: %d\\n\", match, len(match))\n\n\tsampleRegexp = regexp.MustCompile(\"(a*?)(a*)\")\n\n\tmatch = sampleRegexp.FindStringSubmatch(\"aaaaaaa\")\n\tfmt.Printf(\"Match: %s Length: %d\\n\", match, len(match))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Match: [aaaaaaa a aaaaaa] Length: 3\nMatch: [aaaaaaa  aaaaaaa] Length: 3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, again we have two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A question mark after a plus operator<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A question mark after asterisk operator<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In the first case, we have regex with two capture groups<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(a+?)(a*)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The first capture group gives a single match of <strong>&#8216;a&#8217;<\/strong> while the second capture group gives the rest. This show question mark operator used after the <strong>Plus<\/strong> operator is non-greedy or lazy<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the second case, we have regex again with two capture groups<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(a*?)(a*)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The first capture group gives a zero match of <strong>&#8216;a&#8217;<\/strong> while the second capture group gives the rest. This show question mark operator used after <strong>Asterisk<\/strong> operator is non-greedy or lazy<\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is all about the question mark operator in Go. Hope you have liked this article. Please share feedback in the comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgramQuestion Mark Operator is non-lazyAbout the double question mark operatorQuestion Mark after quantifiers Overview Question Mark is the optional operator in regex. This means that it optionally matches the&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4,327,326],"class_list":["post-5837","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang","tag-optional","tag-question"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang Regex: Optional Operator or question mark (?) in regular expression - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang Regex: Optional Operator or question mark (?) in regular expression - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgramQuestion Mark Operator is non-lazyAbout the double question mark operatorQuestion Mark after quantifiers Overview Question Mark is the optional operator in regex. This means that it optionally matches the...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-06-17T04:33:35+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-06-17T04:33:40+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/\",\"name\":\"Golang Regex: Optional Operator or question mark (?) in regular expression - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-06-17T04:33:35+00:00\",\"dateModified\":\"2021-06-17T04:33:40+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang Regex: Optional Operator or question mark (?) in regular expression\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang Regex: Optional Operator or question mark (?) in regular expression - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/","og_locale":"en_US","og_type":"article","og_title":"Golang Regex: Optional Operator or question mark (?) in regular expression - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgramQuestion Mark Operator is non-lazyAbout the double question mark operatorQuestion Mark after quantifiers Overview Question Mark is the optional operator in regex. This means that it optionally matches the...","og_url":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-06-17T04:33:35+00:00","article_modified_time":"2021-06-17T04:33:40+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/","url":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/","name":"Golang Regex: Optional Operator or question mark (?) in regular expression - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-06-17T04:33:35+00:00","dateModified":"2021-06-17T04:33:40+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/optional-operator-regex-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang Regex: Optional Operator or question mark (?) in regular expression"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1w9","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5837","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5837"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5837\/revisions"}],"predecessor-version":[{"id":5839,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5837\/revisions\/5839"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5837"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5837"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5837"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}