{"id":3862,"date":"2020-08-14T13:20:04","date_gmt":"2020-08-14T07:50:04","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3862"},"modified":"2020-08-14T13:20:16","modified_gmt":"2020-08-14T07:50:16","slug":"select-statement-with-timeout-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/","title":{"rendered":"Select statement with timeout in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#Code\" title=\"Code\">Code<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#Timeout_with_infinite_for_loop_outside_select_statement\" title=\"Timeout with infinite for loop outside select statement\">Timeout with infinite for loop outside select statement<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Timeout in select can be achieved by using <strong>After()<\/strong> function\u00a0of time package. Below\u00a0 is the signature of <strong>After()<\/strong> function.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func After(d Duration) <-chan Time<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>After<\/strong> function waits for d duration\u00a0 to finish and then it returns the current time on a channel - <\/p>\n\n\n\n<p><a href=\"https:\/\/golang.org\/pkg\/time\/#Time.After\">https:\/\/golang.org\/pkg\/time\/#Time.After<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let's see a program<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Code\"><\/span><strong>Code<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch1 := make(chan string)\n\tgo goOne(ch1)\n\n\tselect {\n\tcase msg := <-ch1:\n\t\tfmt.Println(msg)\n\tcase <-time.After(time.Second * 1):\n\t\tfmt.Println(\"Timeout\")\n\t}\n}\n\nfunc goOne(ch chan string) {\n\ttime.Sleep(time.Second * 2)\n\tch <- \"From goOne goroutine\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Timeout<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above select statement we are waiting for for the receive operation to complete on <strong>ch1<\/strong>. In other case statement we have <strong>time.After<\/strong>\u00a0with the duration of 1 second. So essentially this select statement will wait for at least 1 second for receive operation to complete on <strong>ch1<\/strong> and after that the <strong>time.After <\/strong>case statement will be executed.\u00a0 We have put a timeout of more than 1 seconds in the <strong>goOne<\/strong> function and hence we\u00a0 see the <strong>time.After <\/strong>statement getting executed and<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Timeout<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">getting printed as output.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So time.After() is a channel operation that gets unblocked after some time.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Timeout_with_infinite_for_loop_outside_select_statement\"><\/span><strong>Timeout with infinite for loop outside select statement<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">We can have infinite for loop outside a select statement. This will cause the select statement to execute indefinite number of times.So when using for statement with infinite loop outside the select statement, we need to have a way yo break out of the for loop. One of the use case of having infinite for look outside select statement could be that you are waiting for multiple operations to receive on a particular channel for a certain time. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tnews := make(chan string)\n\tgo newsFeed(news)\n\n\tprintAllNews(news)\n}\n\nfunc printAllNews(news chan string) {\n\tfor {\n\t\tselect {\n\t\tcase n := <-news:\n\t\t\tfmt.Println(n)\n\t\tcase <-time.After(time.Second * 1):\n\t\t\tfmt.Println(\"Timeout: News feed finished\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc newsFeed(ch chan string) {\n\tfor i := 0; i < 2; i++ {\n\t\ttime.Sleep(time.Millisecond * 400)\n\t\tch <- fmt.Sprintf(\"News: %d\", i+1)\n\t}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">News: 1\nNews: 2\nTimeout: News feed finished<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have created a channel named <strong>news<\/strong> \u00a0which will hold data of string type. Then we pass this channel to the <strong>newsfeed<\/strong> function which is pushing the news feed to this channel . In the select statement, we are receiving the news feed from the <strong>news<\/strong> channel. This select statement is inside an infinite for loop \u00a0so the select statement will be executed multiple times until we\u00a0 exit out of for loop\u00a0.\u00a0We also have <strong>time.After <\/strong>with a duration for 1 second as one of the case statements. So this set up will receive all the news from the <strong>news<\/strong> channel for\u00a0 1\u00a0 second and then exit.\u00a0<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewCodeTimeout with infinite for loop outside select statement Overview Timeout in select can be achieved by using After() function\u00a0of time package. Below\u00a0 is the signature of After() function. The&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-3862","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Select statement with timeout in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Select statement with timeout in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewCodeTimeout with infinite for loop outside select statement Overview Timeout in select can be achieved by using After() function\u00a0of time package. Below\u00a0 is the signature of After() function. The...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-08-14T07:50:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-08-14T07:50:16+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/\",\"name\":\"Select statement with timeout in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-08-14T07:50:04+00:00\",\"dateModified\":\"2020-08-14T07:50:16+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Select statement with timeout in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Select statement with timeout in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/","og_locale":"en_US","og_type":"article","og_title":"Select statement with timeout in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewCodeTimeout with infinite for loop outside select statement Overview Timeout in select can be achieved by using After() function\u00a0of time package. Below\u00a0 is the signature of After() function. The...","og_url":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-08-14T07:50:04+00:00","article_modified_time":"2020-08-14T07:50:16+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/","url":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/","name":"Select statement with timeout in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-08-14T07:50:04+00:00","dateModified":"2020-08-14T07:50:16+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/select-statement-with-timeout-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Select statement with timeout in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-10i","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3862","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3862"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3862\/revisions"}],"predecessor-version":[{"id":3867,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3862\/revisions\/3867"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3862"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3862"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3862"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}