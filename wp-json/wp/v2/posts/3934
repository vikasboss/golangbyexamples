{"id":3934,"date":"2020-09-04T01:52:04","date_gmt":"2020-09-03T20:22:04","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3934"},"modified":"2020-11-26T01:12:28","modified_gmt":"2020-11-25T19:42:28","slug":"error-in-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/error-in-golang\/","title":{"rendered":"Error in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 26 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\">Error -Part 2<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/select-statement-golang\/\">Select Statement<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Using_type_which_implements_error_interface\" title=\"Using type which implements error interface\">Using type which implements error interface<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Advantages_of_using_error_as_a_type\" title=\"Advantages of using error as a type\">Advantages of using error as a type<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Different_ways_of_creating_an_error\" title=\"Different ways of creating an error\">Different ways of creating an error<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Using_errorsNewsome_error_message\" title=\"Using errors.New(&#8220;some_error_message&#8221;)\">Using errors.New(&#8220;some_error_message&#8221;)<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Using_fmtErrorferror_is_s_some_error_message\" title=\"Using fmt.Errorf(&#8220;error is %s&#8221;, &#8220;some_error_message&#8221;). \">Using fmt.Errorf(&#8220;error is %s&#8221;, &#8220;some_error_message&#8221;). <\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Creating_Custom_error\" title=\"Creating Custom error\">Creating Custom error<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Ignoring_errors\" title=\"Ignoring errors\">Ignoring errors<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In this tutorial, we will study how to do error handling in golang. As compared to other conventional languages go doesn&#8217;t have exceptions and try-catch for handling the error.<br>The error handling in golang can be done in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using type which implements <strong>error<\/strong> interface &#8211;&nbsp; &nbsp;it is a conventional way to represent an error and&nbsp; also idiomatic<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using panic and recover<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-medium-font-size\">We will only be discussing the first part in this article.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_type_which_implements_error_interface\"><\/span><strong>Using type which implements error interface<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Go&#8217;s way of dealing with an error is to explicitly return the error as a separate value.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"> The crux to understanding error in golang is to understand the <strong>error<\/strong> interface. This is how the <strong>error<\/strong> interface looks as defined in the <strong>builtin<\/strong> package<\/p>\n\n\n\n<p><a href=\"https:\/\/golang.org\/pkg\/builtin\/#error\">https:\/\/golang.org\/pkg\/builtin\/#error<\/a><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type error interface {\n    Error() string\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>error<\/strong> interface is the conventional way to represent an error condition in golang. If this is nil then it means no error. So in go error is treated as a value. This value implements the <strong>error<\/strong> interface and which can be passed around to a function, returned from a function, and which can be stored in variables.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So any type which defines the <strong>Error<\/strong> method is set to be implementing the <strong>error<\/strong> interface.&nbsp; As we mentioned earlier that go doesn&#8217;t have exceptions and try-catch so an idiomatic way of handling error condition is to return the error as the last return value. The value can then be checked for nil. If it is nil then the&nbsp; called function did not return the&nbsp; error otherwise the called function returned the error. So let&#8217;s see a program which demonstrates what we just talked.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"non-existing.txt\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(file.Name() + \"opened succesfully\")\n\t}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">open non-existing.txt: no such file or directory<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we are calling the <strong>os.Open<\/strong> function to open a non-existing file. Since the file does not exist it gives the above error message in the output. But from where is this error message coming from. Let&#8217;s understand that.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the signature of <strong>os.Open<\/strong> function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Open(name string) (*File, error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It takes one argument as an input which is the file path to be opened. It has two return values.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The pointer to the file struct if the file is present<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If there is an error, then it returns the type <strong>*PathError <\/strong>which implements the <strong>error<\/strong> interface.&nbsp;<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp;Check out the <strong>PathError<\/strong> struct type here-&nbsp;<a href=\"https:\/\/golang.org\/src\/os\/error.go\">https:\/\/golang.org\/src\/os\/error.go<\/a><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type PathError struct {\n   Op   string\n   Path string\n   Err  error\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The pointer to <strong>PathError<\/strong>&nbsp;struct defines the <strong>Error()<\/strong> method<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (e *PathError) Error() string { return e.Op + \" \" + e.Path + \": \" + e.Err.Error() }<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Since it defines the <strong>Error<\/strong> method hence <strong>*PathError<\/strong> implements the <strong>error<\/strong> interface.&nbsp; &nbsp;That is why <strong>error<\/strong> can be returned as the second return value from the <strong>os.Open<\/strong> function.&nbsp; Now notice how in the <strong>main<\/strong> function we check for the presence of error by only comparing it with nil.&nbsp; &nbsp;<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The reason we compare it with nil because the default zero value of interface is nil and since <strong>error<\/strong> is also an interface its default zero value is also nil. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp;Also <strong>fmt.Println<\/strong> function internally checks if a type passed as an argument to it implements the <strong>error<\/strong> interface. If yes then it calls the <strong>Error<\/strong> method on that type. That is what this line<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(err)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">gives output<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">open non-existing.txt: no such file or directory<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Using any type as error<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Even though we have an error interface in go and we expect every error in go to follow this interface as seen above, still it is not a mandatory requirement. Any type can be treated as an error in go, but generally, it is not recommended that as well as it is not an idiomatic way to code in go. We are mentioning here for the sake of completion and as well as the discussion.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Advantages_of_using_error_as_a_type\"><\/span><strong>Advantages of using error as a type<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It allows more control over handling the error. The error can be checked at each step<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Prevents the ugly code of try-catch and exception handling<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Different_ways_of_creating_an_error\"><\/span><strong>Different ways of creating an error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see now different methods of creating an <strong>error<\/strong><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_errorsNewsome_error_message\"><\/span><strong>Using errors.New(&#8220;some_error_message&#8221;)<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nfunc main() {\n    sampleErr := errors.New(\"error occured\")\n    fmt.Println(sampleErr)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">error occured<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_fmtErrorferror_is_s_some_error_message\"><\/span><strong>Using fmt.Errorf(&#8220;error is %s&#8221;, &#8220;some_error_message&#8221;). <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This way creates error with formatting of error messages<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    sampleErr := fmt.Errorf(\"Err is: %s\", \"database connection issue\")\n    fmt.Println(sampleErr)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Err is: database connection issue<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_Custom_error\"><\/span><strong>Creating Custom error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The below example illustrates the use of custom error. In below example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>inputError is a struct that has the Error() method hence it is of type error interface<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>You can also add additional information to the custom error by extending its fields or by adding new methods. inputError has an additional field named <strong>missingFields <\/strong>and a function <strong>getMissingFields<\/strong> function.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We can use type assertion to convert from <strong>error<\/strong> to <strong>inputError<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype inputError struct {\n    message      string\n    missingField string\n}\n\nfunc (i *inputError) Error() string {\n    return i.message\n}\n\nfunc (i *inputError) getMissingField() string {\n    return i.missingField\n}\n\nfunc main() {\n    err := validate(\"\", \"\")\n    if err != nil {\n        if err, ok := err.(*inputError); ok {\n            fmt.Println(err)\n            fmt.Printf(\"Missing Field is %s\\n\", err.getMissingField())\n        }\n    }\n}\n\nfunc validate(name, gender string) error {\n    if name == \"\" {\n        return &inputError{message: \"Name is mandatory\", missingField: \"name\"}\n    }\n    if gender == \"\" {\n        return &inputError{message: \"Gender is mandatory\", missingField: \"gender\"}\n    }\n    return nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Name is mandatory\nMissing Field is name<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Ignoring_errors\"><\/span><strong>Ignoring errors<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Underscore (&#8216;_&#8217;) operator can be used to ignore the error returned from a function call.&nbsp; Before we see a program it&#8217;s important to note that error should never be ignored. It is not a recommended way. Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"os\"\n)\nfunc main() {\n    file, _ := os.Open(\"non-existing.txt\")\n    fmt.Println(file)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{nil}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we used the underscore operator to ignore the error while opening a non-existing file. That is why the file instance returned by the function is nil. Therefore it is better to check for an error before using any other argument returned by the function as that can be nil and would result in unwanted issues and also sometimes it might also result in a panic.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about the error in golang. We will discuss advanced topics related to the error in next chapter.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Hope you have liked this article. Please share feedback\/improvements\/mistakes in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\">Error -Part 2<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/select-statement-golang\/\">Select Statement<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 26 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0Error -Part 2Previous Tutorial\u00a0\u2013 Select Statement&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-3934","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Error in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/error-in-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Error in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 26 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0Error -Part 2Previous Tutorial\u00a0\u2013 Select Statement...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/error-in-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-03T20:22:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-25T19:42:28+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/error-in-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/error-in-golang\/\",\"name\":\"Error in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-03T20:22:04+00:00\",\"dateModified\":\"2020-11-25T19:42:28+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/error-in-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/error-in-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/error-in-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Error in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Error in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/error-in-golang\/","og_locale":"en_US","og_type":"article","og_title":"Error in Go (Golang) - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 26 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0Error -Part 2Previous Tutorial\u00a0\u2013 Select Statement...","og_url":"https:\/\/golangbyexamples.com\/error-in-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-03T20:22:04+00:00","article_modified_time":"2020-11-25T19:42:28+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/error-in-golang\/","url":"https:\/\/golangbyexamples.com\/error-in-golang\/","name":"Error in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-03T20:22:04+00:00","dateModified":"2020-11-25T19:42:28+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/error-in-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/error-in-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/error-in-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Error in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-11s","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3934","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3934"}],"version-history":[{"count":5,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3934\/revisions"}],"predecessor-version":[{"id":4564,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3934\/revisions\/4564"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3934"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3934"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3934"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}