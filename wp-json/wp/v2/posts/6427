{"id":6427,"date":"2021-11-17T00:07:20","date_gmt":"2021-11-16T18:37:20","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6427"},"modified":"2021-11-17T00:12:12","modified_gmt":"2021-11-16T18:42:12","slug":"level-order-traversal-binary-tree-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/","title":{"rendered":"Level Order Traversal of a binary tree in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The objective is to print the binary tree level by level. For example, if let&#8217;s say we have below binary tree<\/p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg?resize=281%2C211&#038;ssl=1\" alt=\"\" class=\"wp-image-6428\" width=\"281\" height=\"211\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Here we have<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Node 1 on level 1<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Node 2 and node 3 on level 2<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Node 4, node 5, and node 6 on level 3<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So the output should be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[[1] [2 3] [4 5 6]]<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc levelOrder(root *TreeNode) [][]int {\n\tlevelMapNode := make(map[int][]int)\n\tvisit(root, 0, &levelMapNode)\n\n\toutput := make([][]int, 0)\n\n\ti := 0\n\tfor true {\n\t\t_, ok := levelMapNode[i]\n\n\t\tif ok {\n\t\t\toutput = append(output, levelMapNode[i])\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t\ti = i + 1\n\n\t}\n\treturn output\n\n}\n\nfunc visit(root *TreeNode, level int, levelMapNode *map[int][]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\t_, ok := (*levelMapNode)[level]\n\tif ok {\n\t\t(*levelMapNode)[level] = append((*levelMapNode)[level], root.Val)\n\t} else {\n\t\t(*levelMapNode)[level] = []int{root.Val}\n\t}\n\n\tif root.Left != nil {\n\t\tvisit(root.Left, level+1, levelMapNode)\n\t}\n\n\tif root.Right != nil {\n\t\tvisit(root.Right, level+1, levelMapNode)\n\t}\n\treturn\n}\n\nfunc main() {\n\troot := TreeNode{Val: 1}\n\troot.Left = &TreeNode{Val: 2}\n\troot.Right = &TreeNode{Val: 3}\n\troot.Right.Left = &TreeNode{Val: 4}\n\troot.Right.Right = &TreeNode{Val: 5}\n\n\toutput := levelOrder(&root)\n\tfmt.Println(output)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[[1] [2 3] [4 5 6]]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Note: <\/strong>Check out our Golang Advanced Tutorial. The tutorials in this series are elaborative and we have tried to cover all concepts with examples. This tutorial is for those who are looking to gain expertise and a solid understanding of golang &#8211; <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also if you are interested in understanding how all design patterns can be implemented in Golang. If yes, then this post is for you &#8211;<a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns Golang<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview The objective is to print the binary tree level by level. For example, if let&#8217;s say we have below binary tree Here we have Node 1 on&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6427","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Level Order Traversal of a binary tree in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Level Order Traversal of a binary tree in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgram Overview The objective is to print the binary tree level by level. For example, if let&#8217;s say we have below binary tree Here we have Node 1 on...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-11-16T18:37:20+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-11-16T18:42:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/\",\"name\":\"Level Order Traversal of a binary tree in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\",\"datePublished\":\"2021-11-16T18:37:20+00:00\",\"dateModified\":\"2021-11-16T18:42:12+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Level Order Traversal of a binary tree in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Level Order Traversal of a binary tree in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/","og_locale":"en_US","og_type":"article","og_title":"Level Order Traversal of a binary tree in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgram Overview The objective is to print the binary tree level by level. For example, if let&#8217;s say we have below binary tree Here we have Node 1 on...","og_url":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-11-16T18:37:20+00:00","article_modified_time":"2021-11-16T18:42:12+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/","url":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/","name":"Level Order Traversal of a binary tree in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg","datePublished":"2021-11-16T18:37:20+00:00","dateModified":"2021-11-16T18:42:12+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/11\/binary-tree-min.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/level-order-traversal-binary-tree-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Level Order Traversal of a binary tree in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1FF","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6427","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6427"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6427\/revisions"}],"predecessor-version":[{"id":6431,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6427\/revisions\/6431"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6427"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6427"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6427"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}