{"id":6280,"date":"2021-08-28T00:34:17","date_gmt":"2021-08-27T19:04:17","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6280"},"modified":"2021-08-28T00:34:59","modified_gmt":"2021-08-27T19:04:59","slug":"wildcard-matching-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/","title":{"rendered":"Wildcard matching or regex matching program in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#Recursive_Solution\" title=\"Recursive Solution\">Recursive Solution<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#Dynamic_Program_Solution\" title=\"Dynamic Program Solution\">Dynamic Program Solution<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">We are given an input regex and an input string. Regex can have two special characters<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Star Sign &#8216;*&#8217; &#8211; <\/strong>the star matches zero or more characters.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Question Mark &#8216;?&#8217; &#8211; <\/strong>It matches any character.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The objective is to find whether the given input string matches the regex or not.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Eg<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Input String: aa\nRegex Sring: aa\nOutput: true\n\nInput String: ab\nRegex Sring: a?\nOutput: true\n\nInput String: aaaa\nRegex Sring: *\nOutput: true\n\n\nInput String: aa\nRegex Sring: a\nOutput: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below is the recursive solution for the same<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Recursive_Solution\"><\/span><strong>Recursive Solution<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In the recursive solution<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If we encounter a star * then we have two cases. We ignore the * character in the pattern and move on to the next character in the pattern. The other case is that we move one character in the input string assuming * matches at least one character. Basically check for a match with <strong>(inputIndex, patternIndex+1)<\/strong> and <strong>(inputIndex+1, patternIndex)<\/strong>. If either of them returns true then the input string matches the regex.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If we encounter a question mark ? then we simple proceed with <strong>(inputIndex+1, patternIndex+1)<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If we encounter a simple character then we simply proceed in the input string as well as the patter\u00a0 ie. we do proceed with <strong>(inputIndex+1, patternIndex+1)<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Here is the program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\toutput := isMatch(\"aa\", \"aa\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aaaa\", \"*\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"ab\", \"a?\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"adceb\", \"*a*b\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aa\", \"a\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"mississippi\", \"m??*ss*?i*pi\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"acdcb\", \"a*c?b\")\n\tfmt.Println(output)\n}\n\nfunc isMatch(s string, p string) bool {\n\truneInputArray := []rune(s)\n\trunePatternArray := []rune(p)\n\tif len(runeInputArray) > 0 && len(runePatternArray) > 0 {\n\t\tif runePatternArray[len(runePatternArray)-1] != '*' && runePatternArray[len(runePatternArray)-1] != '?' && runeInputArray[len(runeInputArray)-1] != runePatternArray[len(runePatternArray)-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn isMatchUtil([]rune(s), []rune(p), 0, 0, len([]rune(s)), len([]rune(p)))\n}\n\nfunc isMatchUtil(input, pattern []rune, inputIndex, patternIndex int, inputLength, patternLength int) bool {\n\n\tif inputIndex == inputLength && patternIndex == patternLength {\n\t\treturn true\n\t} else if patternIndex == patternLength {\n\t\treturn false\n\t} else if inputIndex == inputLength {\n\t\tif pattern[patternIndex] == '*' && restPatternStar(pattern, patternIndex+1, patternLength) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tif pattern[patternIndex] == '*' {\n\t\treturn isMatchUtil(input, pattern, inputIndex, patternIndex+1, inputLength, patternLength) ||\n\t\t\tisMatchUtil(input, pattern, inputIndex+1, patternIndex, inputLength, patternLength)\n\n\t}\n\n\tif pattern[patternIndex] == '?' {\n\t\treturn isMatchUtil(input, pattern, inputIndex+1, patternIndex+1, inputLength, patternLength)\n\t}\n\n\tif inputIndex < inputLength {\n\t\tif input[inputIndex] == pattern[patternIndex] {\n\t\t\treturn isMatchUtil(input, pattern, inputIndex+1, patternIndex+1, inputLength, patternLength)\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn false\n\n}\n\nfunc restPatternStar(pattern []rune, patternIndex int, patternLength int) bool {\n\tfor patternIndex < patternLength {\n\t\tif pattern[patternIndex] != '*' {\n\t\t\treturn false\n\t\t}\n\t\tpatternIndex++\n\t}\n\n\treturn true\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Dynamic_Program_Solution\"><\/span><strong>Dynamic Program Solution<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The above program is not an optimized solution as the subproblems are solved again and again. This problem can also be solved with DP.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Create a two-dimensional matrix named <strong>isMatchingMatrix <\/strong>where<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>isMatchingMatrix[i][j] <\/strong>will be true if the first <strong>i<\/strong> character in the input string matches the first <strong>j<\/strong> character in the pattern<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">If both input and pattern is empty\nisMatchingMatrix[0][0] = true\n\nIf pattern is empty \nisMatchingMatrix[i][0] = fasle\n\nIf the input string is empty \nisMatchingMatrix[0][j] = isMatchingMatrix[0][j - 1] if pattern[j \u2013 1] is '*'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below is the program for the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\toutput := isMatch(\"aa\", \"aa\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aaaa\", \"*\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"ab\", \"a?\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"adceb\", \"*a*b\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aa\", \"a\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"mississippi\", \"m??*ss*?i*pi\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"acdcb\", \"a*c?b\")\n\tfmt.Println(output)\n}\n\nfunc isMatch(s string, p string) bool {\n\n\truneInput := []rune(s)\n\trunePattern := []rune(p)\n\n\tlenInput := len(runeInput)\n\tlenPattern := len(runePattern)\n\n\tisMatchingMatrix := make([][]bool, lenInput+1)\n\n\tfor i := range isMatchingMatrix {\n\t\tisMatchingMatrix[i] = make([]bool, lenPattern+1)\n\t}\n\n\tisMatchingMatrix[0][0] = true\n\tfor i := 1; i < lenInput; i++ {\n\t\tisMatchingMatrix[i][0] = false\n\t}\n\n\tif lenPattern > 0 {\n\t\tif runePattern[0] == '*' {\n\t\t\tisMatchingMatrix[0][1] = true\n\t\t}\n\t}\n\n\tfor j := 2; j <= lenPattern; j++ {\n\t\tif runePattern[j-1] == '*' {\n\t\t\tisMatchingMatrix[0][j] = isMatchingMatrix[0][j-1]\n\t\t}\n\n\t}\n\n\tfor i := 1; i <= lenInput; i++ {\n\t\tfor j := 1; j <= lenPattern; j++ {\n\n\t\t\tif runePattern[j-1] == '*' {\n\t\t\t\tisMatchingMatrix[i][j] = isMatchingMatrix[i-1][j] || isMatchingMatrix[i][j-1]\n\t\t\t}\n\n\t\t\tif runePattern[j-1] == '?' || runeInput[i-1] == runePattern[j-1] {\n\t\t\t\tisMatchingMatrix[i][j] = isMatchingMatrix[i-1][j-1]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isMatchingMatrix[lenInput][lenPattern]\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Note: <\/strong>Check out our Golang Advanced Tutorial. The tutorials in this series are elaborative and we have tried to cover all concepts with examples. This tutorial is for those who are looking to gain expertise and a solid understanding of golang - <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also if you are interested in understanding how all design patterns can be implemented in Golang. If yes, then this post is for you -<a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns Golang<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewRecursive SolutionDynamic Program Solution Overview We are given an input regex and an input string. Regex can have two special characters Star Sign &#8216;*&#8217; &#8211; the star matches zero&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6280","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Wildcard matching or regex matching program in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Wildcard matching or regex matching program in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewRecursive SolutionDynamic Program Solution Overview We are given an input regex and an input string. Regex can have two special characters Star Sign &#8216;*&#8217; &#8211; the star matches zero...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-08-27T19:04:17+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-08-27T19:04:59+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/\",\"name\":\"Wildcard matching or regex matching program in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-08-27T19:04:17+00:00\",\"dateModified\":\"2021-08-27T19:04:59+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Wildcard matching or regex matching program in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Wildcard matching or regex matching program in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/","og_locale":"en_US","og_type":"article","og_title":"Wildcard matching or regex matching program in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewRecursive SolutionDynamic Program Solution Overview We are given an input regex and an input string. Regex can have two special characters Star Sign &#8216;*&#8217; &#8211; the star matches zero...","og_url":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-08-27T19:04:17+00:00","article_modified_time":"2021-08-27T19:04:59+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/","url":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/","name":"Wildcard matching or regex matching program in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-08-27T19:04:17+00:00","dateModified":"2021-08-27T19:04:59+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/wildcard-matching-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/wildcard-matching-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Wildcard matching or regex matching program in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1Di","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6280","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6280"}],"version-history":[{"count":1,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6280\/revisions"}],"predecessor-version":[{"id":6281,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6280\/revisions\/6281"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6280"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6280"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6280"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}