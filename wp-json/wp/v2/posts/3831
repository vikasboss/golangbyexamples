{"id":3831,"date":"2020-08-14T12:28:41","date_gmt":"2020-08-14T06:58:41","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3831"},"modified":"2020-08-14T12:34:02","modified_gmt":"2020-08-14T07:04:02","slug":"select-send-operation-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/select-send-operation-go\/","title":{"rendered":"Select with send operation in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/select-send-operation-go\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/select-send-operation-go\/#One_send_one_receive_operation\" title=\"One send one receive operation\">One send one receive operation<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/select-send-operation-go\/#All_send_operations\" title=\"All send operations\u00a0\">All send operations\u00a0<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/select-send-operation-go\/#All_receive_operations\" title=\"All receive operations\">All receive operations<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Select allows both send and receive operations from a channel in its case statement. Let&#8217;s see examples of<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>One send one receive operation<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>All send operations\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>All receive operations<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"One_send_one_receive_operation\"><\/span><strong>One send one receive operation<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n    go goOne(ch1)\n    go goTwo(ch2)\n    select {\n\n    case msg1 := <-ch1:\n        fmt.Println(msg1)\n    case ch2 <- \"To goTwo goroutine\":\n    }\n}\n\nfunc goOne(ch chan string) {\n    ch <- \"From goOne goroutine\"\n}\n\nfunc goTwo(ch chan string) {\n    msg := <-ch\n    fmt.Println(msg)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">To goTwo goroutine<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we created two channels which are passed to two different goroutines. In the select statement, the first case statement is receiving from\u00a0<strong>ch1<\/strong>\u00a0channel. The second case statement is sending data to the\u00a0<strong>ch2<\/strong>\u00a0channel and that data is being received in the\u00a0<strong>goTwo<\/strong>\u00a0goroutine. Since it is not deterministic whether the receive operation on\u00a0<strong>ch1<\/strong>\u00a0will complete earlier or send operation on\u00a0<strong>ch2<\/strong>\u00a0will completely\u00a0 earlier the program may either output this\u00a0<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">To goTwo goroutine<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">or this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">From goOne goroutine<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"All_send_operations\"><\/span><strong>All send operations\u00a0<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n    go goOne(ch1)\n    go goTwo(ch2)\n    select {\n    case ch1 <- \"To goOne goroutine\":\n    case ch2 <- \"To goTwo goroutine\":\n    }\n    time.Sleep(time.Second * 1)\n}\n\nfunc goOne(ch chan string) {\n    msg := <-ch\n    fmt.Println(msg)\n}    \n\nfunc goTwo(ch chan string) {\n    msg := <-ch\n    fmt.Println(msg)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">To goTwo goroutine<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, both case statements is sending data to the\u00a0<strong>ch1<\/strong>\u00a0and\u00a0<strong>ch2<\/strong>\u00a0channel respectively. The data from the ch1 channel is being received in goOne goroutine and the data from the ch2 channel is being received in goTwo goroutine. None of the send operation in each of the case statement is blocked.\u00a0 So the program can either output this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">To goOne goroutine<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">or this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">To goTwo goroutine<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"All_receive_operations\"><\/span><strong>All receive operations<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n\n    go goOne(ch1)\n    go goTwo(ch2)\n\n    select {\n    case msg1 := <-ch1:\n        fmt.Println(msg1)\n    case msg2 := <-ch2:\n        fmt.Println(msg2)\n    }\n}\nfunc goOne(ch chan string) {\n    ch <- \"From goOne goroutine\"\n}\nfunc goTwo(ch chan string) {\n    ch <- \"From goTwo goroutine\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">From goOne goroutine<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we created two channels which are passed to two different goroutines. Then each of the&nbsp; goroutine&nbsp; is sending one value to the channel. In the select&nbsp; we have two case statement. Each of the two case statement is waiting for a receive operation to complete on one of the channels. Once any receive operation is complete on any of the channel it is executed and <strong>select<\/strong> exits. So as seen from output, in the above program it&nbsp; prints the received value from one of the channel and exits.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So in the above program since it is not deterministic which of the send operation will complete earlier that is why you will see different output if you run the program different times.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewOne send one receive operationAll send operations\u00a0All receive operations Overview Select allows both send and receive operations from a channel in its case statement. Let&#8217;s see examples of One&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3],"class_list":["post-3831","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Select with send operation in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/select-send-operation-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Select with send operation in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewOne send one receive operationAll send operations\u00a0All receive operations Overview Select allows both send and receive operations from a channel in its case statement. Let&#8217;s see examples of One...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/select-send-operation-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-08-14T06:58:41+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-08-14T07:04:02+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/select-send-operation-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/select-send-operation-go\/\",\"name\":\"Select with send operation in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-08-14T06:58:41+00:00\",\"dateModified\":\"2020-08-14T07:04:02+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/select-send-operation-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/select-send-operation-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/select-send-operation-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Select with send operation in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Select with send operation in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/select-send-operation-go\/","og_locale":"en_US","og_type":"article","og_title":"Select with send operation in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewOne send one receive operationAll send operations\u00a0All receive operations Overview Select allows both send and receive operations from a channel in its case statement. Let&#8217;s see examples of One...","og_url":"https:\/\/golangbyexamples.com\/select-send-operation-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-08-14T06:58:41+00:00","article_modified_time":"2020-08-14T07:04:02+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/select-send-operation-go\/","url":"https:\/\/golangbyexamples.com\/select-send-operation-go\/","name":"Select with send operation in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-08-14T06:58:41+00:00","dateModified":"2020-08-14T07:04:02+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/select-send-operation-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/select-send-operation-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/select-send-operation-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Select with send operation in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-ZN","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3831","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3831"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3831\/revisions"}],"predecessor-version":[{"id":3833,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3831\/revisions\/3833"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3831"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3831"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3831"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}