{"id":2198,"date":"2020-05-21T21:21:18","date_gmt":"2020-05-21T15:51:18","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2198"},"modified":"2020-11-26T00:59:48","modified_gmt":"2020-11-25T19:29:48","slug":"maps-in-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/maps-in-golang\/","title":{"rendered":"Maps in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 19 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/method-in-golang\/\">Method<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/\">Slice<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Allowed_Key_types_in_a_Map\" title=\"Allowed Key types in a Map\">Allowed Key types in a Map<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Allowed_Value_types_in_a_Map\" title=\"Allowed Value types in a Map\">Allowed Value types in a Map<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Creating_a_Map\" title=\"Creating a Map\">Creating a Map<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Using_the_map_format\" title=\"Using the map[&lt;key_type&gt;]&lt;value_type&gt; format\">Using the map[&lt;key_type&gt;]&lt;value_type&gt; format<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Using_Make\" title=\"Using Make \">Using Make <\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Map_Operations\" title=\"Map Operations\">Map Operations<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Add_a_key_value_pair\" title=\"Add a key value pair\">Add a key value pair<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Update_a_key-value_pair\" title=\"Update a key-value pair\">Update a key-value pair<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Get_the_value_corresponding_to_a_key\" title=\"Get the value corresponding to a key\">Get the value corresponding to a key<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Delete_a_key_value_pair\" title=\"Delete a key value pair\">Delete a key value pair<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Check_if_a_key_exists\" title=\"Check if a key exists\">Check if a key exists<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Functions_on_Maps\" title=\"Functions on Maps\">Functions on Maps<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Zero_Value\" title=\"Zero Value\">Zero Value<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Maps_are_referenced_data_types\" title=\"Maps are referenced data types\">Maps are referenced data types<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-16\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Iterate_over_a_map\" title=\"Iterate over a map\">Iterate over a map<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-17\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Maps_are_not_safe_for_concurrent_use\" title=\"Maps are not safe for concurrent use\">Maps are not safe for concurrent use<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-18\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Maps are golang builtin datatype similar to the hash table which maps a key to a value. Map is an unordered collection where each key is unique while values can be the same for two or more different keys. The advantages of using a map are that it provides fast retrieval, search, insert, and delete operations. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Maps are referenced data types. When you assign one map to another both refer to the same underlying map. Below is the format for a map<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[key_type]value_type<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Both <strong>key_type<\/strong> and <strong>value_type<\/strong> can be of different type or same type. For below example the key type is <strong>string<\/strong> and value type is <strong>int<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[string]int<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Allowed_Key_types_in_a_Map\"><\/span><strong>Allowed Key types in a Map<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The map key can be any type that is comparable. Some of the comparable types as defined by go specification are<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>boolean<\/li><li>numeric<\/li><li>string,<\/li><li>pointer<\/li><li>channel<\/li><li>interface types<\/li><li>structs &#8211; if all it&#8217;s field type is comparable<\/li><li>array &#8211; if the type of value of array element is comparable<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Some of the types which are not comparable as per go specification and which cannot be used as a key in a map are.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Slice<\/li><li>Map<\/li><li>Function<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Reference &#8211; <a href=\"https:\/\/golang.org\/ref\/spec#Comparison_operators\">https:\/\/golang.org\/ref\/spec#Comparison_operators<\/a><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Allowed_Value_types_in_a_Map\"><\/span><strong>Allowed Value types in a Map<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Value can be of any type in a map.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_Map\"><\/span><strong>Creating a Map<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the map[&lt;key_type&gt;]&lt;value_type&gt;{} format also called map literal<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using make<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at each of above method one by one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_map_format\"><\/span><strong>Using the map[&lt;key_type&gt;]&lt;value_type&gt; format<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">One of the most common way of creating a map is using the map literal:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[key_type]value_type{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">An example of above where key type is string and value type is integer<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employeeSalary := map[string]int{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A map can also be created with some key values initialized<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employeeSalary := map[string]int{\n\"John\": 1000\n\"Sam\": 2000\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A new key-value pair can also be added to the map<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employeeSalary[\"Tom\"] = 2000<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := map[string]int{}\n    fmt.Println(employeeSalary)\n    \n    \/\/Intialize using map lieteral\n    employeeSalary = map[string]int{\n        \"John\": 1000,\n        \"Sam\":  1200,\n    }\n\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[]\nmap[John:1000 Sam:1200 Tom:2000]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a map literal intialized with some values. Then we added another key-value pair in it. Then we printed it using fmt.Println which prints all the key-value pairs in format <strong>map[key:value key:value]<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">A map can also be declared with var keyword, but it creates a nil map as default zero value of map is nil. Adding any key value pair to that map will cause a panic. Let&#8217;s see an example for this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    var employeeSalary map[string]int\n    employeeSalary[\"Tom\"] = 2000\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">panic: assignment to entry in nil map<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Above program run into panic as the map is nil.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"> One use case of having a map declared with <strong>var <\/strong>keyword is when an already existing map needs to be assigned to it or when we want to assign the result of a function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_Make\"><\/span><strong>Using Make <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This<strong>&nbsp;<\/strong>is another way of creating the map. The builtin function <strong>make<\/strong> can be used to create a map. It returns an initialized map. Hence key-value pairs can be added to it.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[Tom:2000]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above program we created a map using make function. Then we added a key value pair in it. Then we printed it using <strong>fmt.Println<\/strong> which prints all the key value pairs.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Map_Operations\"><\/span><strong>Map Operations<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The below operations are applicable for map<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Add a key-value pair<\/li><li>Update a key<\/li><li>Get the value corresponding to a key<\/li><li>Delete a key-value pair<\/li><li>Check if a key exists<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Add_a_key_value_pair\"><\/span><strong>Add a key value pair<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for adding a key value pair to a map<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">mapName[key] = value<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Pr<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[Tom:2000]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also note that adding to a nil map will cause a panic.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Update_a_key-value_pair\"><\/span><strong>Update a key-value pair<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">When trying to add a key to the map which already exists, the new value will override the old value. This is analogous to updating a key in the map. Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    fmt.Println(\"Before update\")\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n\n    fmt.Println(\"After update\")\n    employeeSalary[\"Tom\"] = 3000\n    fmt.Println(employeeSalary)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Before update\nmap[Tom:2000]\nAfter update\nmap[Tom:3000]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program after writing the same key <strong>&#8220;Tom&#8221; <\/strong>with a new value of <strong>3000 <\/strong>it overwrites the existing value of <strong>2000. <\/strong>When we print the map again the value printed is 3000<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Get_the_value_corresponding_to_a_key\"><\/span><strong>Get the value corresponding to a key<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for retrieving a value corresponding to a key<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">val := mapName[key]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    \n    \/\/Retrieve a value \n    salary := employeeSalary[\"Tom\"]\n    fmt.Printf(\"Salary: %d\", salary)\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Delete_a_key_value_pair\"><\/span><strong>Delete a key value pair<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for delete a value corresponding to a key<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">delete(map_name, key)<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    fmt.Println(\"Adding key\")\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n\n    fmt.Println(\"\\nDeleting key\")\n    delete(employeeSalary, \"Tom\")\n    fmt.Println(employeeSalary)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Adding key\nmap[Tom:2000]\n\nDeleting key\nmap[]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above program we delete the key and when we print the map again, the key is not there.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Check_if_a_key_exists\"><\/span><strong>Check if a key exists<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format to check if a key exist in the map<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">val, ok := mapName[key]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">There are two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the key exists <strong>val <\/strong>variable be the value of the key in the map and <strong>ok <\/strong>variable will be true<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the key doesn&#8217;t exist <strong>val<\/strong> variable will be default zero value of value type and <strong>ok <\/strong>variable will be false<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(\"Key exists case\")\n    val, ok := employeeSalary[\"Tom\"]\n    fmt.Printf(\"Val: %d, ok: %t\\n\", val, ok)\n    fmt.Println(\"Key doesn't exists case\")\n\n    val, ok = employeeSalary[\"Sam\"]\n    fmt.Printf(\"Val: %d, ok: %t\\n\", val, ok)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Key exists case\nVal: 2000, ok: true\nKey doesn't exists case\nVal: 0, ok: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program when key exists then val variable is set to the actual value which is 2000 here and ok variable is true. When the <strong>key<\/strong> doesn&#8217;t exist, the <strong>val<\/strong> variable is set to 0 which is the default zero value of int and <strong>ok<\/strong> variable is false. This <strong>ok<\/strong> variable is the best way to check if the key exists in a map or not<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In case we only want to check if a key is present and val is not needed, then blank identifier i.e &#8220;_&#8221; can be used in place of val.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">_, ok = employeeSalary[\"Sam\"]<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Functions_on_Maps\"><\/span><strong>Functions on Maps<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the builtin function which can be used on a map<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>len() function<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>len() function<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>len()<\/strong> function can be used to get the length of the map which is number of key value pair present in the map. Below is the format for using this function on map.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">len(mapName)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    employeeSalary[\"Sam\"] = 1200\n\n    lenOfMap := len(employeeSalary)\n    fmt.Println(lenOfMap)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">2<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Zero_Value\"><\/span><strong>Zero Value<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">zero value of a map is nil. This is also proved when we declare a map using the <strong>var<\/strong> keyword. See below program.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var employeeSalary map[string]int\n    if employeeSalary == nil {\n        fmt.Println(\"employeeSalary map is nil\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employeeSalary map is nil<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Maps_are_referenced_data_types\"><\/span><strong>Maps are referenced data types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Map are reference data types. So on assigning one map to a new variable, then both variable refers to the same map. Any change in one of the map would reflect in other and vice versa.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    employeeSalary := make(map[string]int)\n\n    \/\/Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    employeeSalary[\"Sam\"] = 1200\n\n    eS := employeeSalary\n\n    \/\/Change employeeSalary\n    employeeSalary[\"John\"] = 3000\n    fmt.Println(\"Changing employeeSalary Map\")\n    fmt.Printf(\"employeeSalary: %v\\n\", employeeSalary)\n    fmt.Printf(\"eS: %v\\n\", eS)\n\n    \/\/Change eS\n    employeeSalary[\"John\"] = 4000\n    fmt.Println(\"\\nChanging eS Map\")\n    fmt.Printf(\"employeeSalary: %v\\n\", employeeSalary)\n    fmt.Printf(\"eS: %v\\n\", eS)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In<strong>&nbsp;the <\/strong>above program, eS is a new map variable to which we assign the existing <strong>employeeSalary<\/strong> map.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>First, we add a new key in <strong>employeeSalary<\/strong> map. The change reflects both in <strong>employeeSalary<\/strong> and <strong>eS<\/strong> map<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Second, we updated an existing key in <strong>eS <\/strong>map. The change again reflects both in <strong>employeeSalary<\/strong> and <strong>eS<\/strong> map.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">This shows that maps are referenced data type<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Iterate_over_a_map\"><\/span><strong>Iterate over a map<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Range operator can be used to iterate over a map in Go<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s define a map first<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample := map[string]string{\n        \"a\": \"x\",\n        \"b\": \"y\",\n}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Iterating over all keys and values<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for k, v := range sample {\n   fmt.Printf(\"key :%s value: %s\\n\", k, v)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">key :a value: x\nkey :b value: y<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Iterating over only keys<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for k := range sample {\n   fmt.Printf(\"key :%s\\n\", k)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">key :a\nkey :b<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Iterating over only values<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for _, v := range sample {\n   fmt.Printf(\"value :%s\\n\", v)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">value :x\nvalue :y<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Get list of all keys<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">keys := getAllKeys(sample)\nfmt.Println(keys)\n\nfunc getAllKeys(sample map[string]string) []string {\n    var keys []string\n    for k := range sample {\n        keys = append(keys, k)\n    }\n    return keys\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[a b]<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Maps_are_not_safe_for_concurrent_use\"><\/span><strong>Maps are not safe for concurrent use<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">go maps are not safe for concurrent use.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Buggy code:<\/strong>&nbsp;Below is a buggy code. It might result in crash if concurrent read and write of map happens.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nvar (\n   allData = make(map[string]string)\n)\n\nfunc get(key string) string {\n    return allData[key]\n}\n\nfunc set(key string, value string) {\n    allData[key] = value\n}\n\nfunc main() {\n    go set(\"a\", \"Some Data 1\")\n    go set(\"b\", \"Some Data 2\")\n    go get(\"a\")\n    go get(\"b\")\n    go get(\"a\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Possible Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fatal error: concurrent map read and map write<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Correct Code:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">We can use a lock to allow concurrent access of the map<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar (\n    allData = make(map[string]string)\n    rwm     sync.RWMutex\n)\n\nfunc get(key string) string {\n    rwm.RLock()\n    defer rwm.RUnlock()\n    return allData[key]\n\n}\n\nfunc set(key string, value string) {\n    rwm.Lock()\n    defer rwm.Unlock()\n    allData[key] = value\n\n}\n\nfunc main() {\n    set(\"a\", \"Some Data\")\n    result := get(\"a\")\n    fmt.Println(result)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Some data<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about maps in golang. We learned how to create a map, operations on the map, some of the functions defined on a map such as Glen(), how we can iterate over the map, and last but not the least that maps are unsafe for concurrent use. Hope you have liked this article. Please share the feedback\/improvements\/mistakes in the comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/method-in-golang\/\">Method<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/\">Slice<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 19 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0MethodPrevious Tutorial\u00a0\u2013 Slice Now let\u2019s check&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4,49],"class_list":["post-2198","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang","tag-maps"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Maps in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/maps-in-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Maps in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 19 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0MethodPrevious Tutorial\u00a0\u2013 Slice Now let\u2019s check...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/maps-in-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-05-21T15:51:18+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-25T19:29:48+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/maps-in-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/maps-in-golang\/\",\"name\":\"Maps in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-05-21T15:51:18+00:00\",\"dateModified\":\"2020-11-25T19:29:48+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/maps-in-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/maps-in-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/maps-in-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Maps in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Maps in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/maps-in-golang\/","og_locale":"en_US","og_type":"article","og_title":"Maps in Go (Golang) - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 19 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0MethodPrevious Tutorial\u00a0\u2013 Slice Now let\u2019s check...","og_url":"https:\/\/golangbyexamples.com\/maps-in-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-05-21T15:51:18+00:00","article_modified_time":"2020-11-25T19:29:48+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/maps-in-golang\/","url":"https:\/\/golangbyexamples.com\/maps-in-golang\/","name":"Maps in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-05-21T15:51:18+00:00","dateModified":"2020-11-25T19:29:48+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/maps-in-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/maps-in-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/maps-in-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Maps in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-zs","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2198","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2198"}],"version-history":[{"count":8,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2198\/revisions"}],"predecessor-version":[{"id":4556,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2198\/revisions\/4556"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2198"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2198"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2198"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}