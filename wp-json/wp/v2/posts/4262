{"id":4262,"date":"2020-11-01T20:08:03","date_gmt":"2020-11-01T14:38:03","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4262"},"modified":"2020-11-01T20:08:10","modified_gmt":"2020-11-01T14:38:10","slug":"versiono-module-selection-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/","title":{"rendered":"Selection of the version of library or dependency in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">To understand how does GO&#8217;s approach while selecting the version of the library of which two versions are specified in the <strong>go.mod<\/strong> file, we have to first understand Semantic Versioning<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Semantic Versioning is comprised of three parts separated by dots. Below is the format for versioning.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v{major_version}.{minor_version}.{patch_version}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">where<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>v<\/strong> &#8211; it is just an indicator that it is a version<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>major_version<\/strong> &#8211; It represents the incompatible API changes in the library. So when there are changes in the library that is not backward compatible, in that case, major_version is incremented<\/li><li><strong>minor_version<\/strong> &#8211; It represents the change in functionality of the library in a backward-compatible manner. So when there are some functionality changes in the library but those changes are backward compatible then, in that case, the minor version is incremented<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>patch_version<\/strong> &#8211; It represents the bug fixes in the library in a backward-compatible manner. So when there are bug fixes to the existing functionality of the library, then, in that case, patch_version is incremented.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Now there can be two cases while selecting the version of the library<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Two versions of the same library are used which only differ in the minor and patch version. Their major version is the same.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Two versions of the same library are used which differ in the major.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see what approach does go follows in the above two cases<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/#Differ_in_minor_or_patch_version\" title=\"Differ in minor or patch version\">Differ in minor or patch version<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/#Differ_in_major_version\" title=\"Differ in major version\">Differ in major version<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Differ_in_minor_or_patch_version\"><\/span><strong>Differ in minor or patch version<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Go follows the minimum version policy approach while selecting the version of the library of which two versions are specified in the <strong>go.mod<\/strong> file which differ only in their minor or patch version.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For example in case you are using the two versions of same library which are<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1.2.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1.3.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then go will choose 1.3.0 as it is the latest version.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Differ_in_major_version\"><\/span><strong>Differ in major version<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Go treats the major version as a different module itself. Now, what does that means? This essentially means that the import path will have a major version as its suffix. Let&#8217;s take the example of any go library. Let&#8217;s latest semantic version is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v8.2.3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then the go.mod file will like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module github.com\/sample\/v8\ngo 1.11\n\n..<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It has major version in its import path. So any library which is using the go-redis have to import it like<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import \"github.com\/sample\/v8\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If in future <strong>v9<\/strong> version is released than it has to be imported in the application like<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import \"github.com\/sample\/v9\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also the library will change its go.mod file to reflect the v9 major version<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">module github.com\/sample\/v9<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">What it essentially allows is to use different major version of the same library to be used within same go application.\u00a0 We can also give meaningful names when different major version of the same library is imported in the same application. For eg<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import sample_v8 \"github.com\/sample\/v8\"\nimport sample_v9 \"github.com\/sample\/v9\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is also known as <strong>Semantic Import Versioning<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also note that<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For the first version, it is ok to not specify the version in the go.mod file.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Also, be careful when importing a different major version of the same library. Look out for the new functionality that might be available with new versions.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Also for the same reason when you update a specific module using<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get -u<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then it will only upgrade to the latest minor version or patch version whichever applicable. For example let&#8217;s say the current version used by an application is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v1.1.3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also let&#8217;s say we have below versions available<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v1.2.0\nv2.1.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then when we run<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then it will update to<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">v1.2.0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The reason is because go get will only update the minor or patch version but never the major version as go treats the major version of a module as a different module entirely.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">To upgrade the major version, specify that\u00a0 upgraded dependency explicitly\u00a0 in the <strong>go.mod<\/strong> file or do a go get of that version.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, a couple of points to note about upgrading module<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade a dependency to its latest patch version only, use the below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get -u=patch <dependency_name><\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade a dependency to a specific version, use the below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get dependency@version<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade a dependency to a specific commit, use the below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get <dependency_name>@commit_number<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To upgrade all dependency to their latest minor and patch version, use the below command<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go get .\/...<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>To understand how does GO&#8217;s approach while selecting the version of the library of which two versions are specified in the go.mod file, we have to first understand Semantic Versioning Semantic Versioning&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4262","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Selection of the version of library or dependency in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Selection of the version of library or dependency in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"To understand how does GO&#8217;s approach while selecting the version of the library of which two versions are specified in the go.mod file, we have to first understand Semantic Versioning Semantic Versioning...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-11-01T14:38:03+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-01T14:38:10+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/\",\"name\":\"Selection of the version of library or dependency in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-11-01T14:38:03+00:00\",\"dateModified\":\"2020-11-01T14:38:10+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Selection of the version of library or dependency in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Selection of the version of library or dependency in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/","og_locale":"en_US","og_type":"article","og_title":"Selection of the version of library or dependency in Go (Golang) - Welcome To Golang By Example","og_description":"To understand how does GO&#8217;s approach while selecting the version of the library of which two versions are specified in the go.mod file, we have to first understand Semantic Versioning Semantic Versioning...","og_url":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-11-01T14:38:03+00:00","article_modified_time":"2020-11-01T14:38:10+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/","url":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/","name":"Selection of the version of library or dependency in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-11-01T14:38:03+00:00","dateModified":"2020-11-01T14:38:10+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/versiono-module-selection-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/versiono-module-selection-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Selection of the version of library or dependency in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-16K","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4262","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4262"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4262\/revisions"}],"predecessor-version":[{"id":4264,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4262\/revisions\/4264"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4262"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4262"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4262"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}