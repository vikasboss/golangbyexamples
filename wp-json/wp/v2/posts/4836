{"id":4836,"date":"2020-12-31T12:00:45","date_gmt":"2020-12-31T06:30:45","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4836"},"modified":"2021-01-01T22:48:00","modified_gmt":"2021-01-01T17:18:00","slug":"url-encoded-body-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/","title":{"rendered":"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\"><strong>Note<\/strong>: This post is parsing the <strong>application\/x-www-form-urlencoded<\/strong> request at the server end. If you using an HTTP client and trying to send the <strong>application\/x-www-form-urlencoded<\/strong> request then please see the below link<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golangbyexamples.com\/http-client-urlencoded-body-go\">https:\/\/golangbyexamples.com\/http-client-urlencoded-body-go<\/a>\/<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/#Example\" title=\"Example\">Example<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>applcation\/x-www-form-urlencoded<\/strong> content-type request body is like a giant query string. Similar to the query string in a URI it is a key-value pair having the below format<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">key1=value1&key2=value21&key2=value22&key3=value3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">where there are below key-value pairs<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>key1, value1<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>key2 has two values i.e value21 and value22.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>key3, value3<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Each key-value pair is separated by <strong>&amp;<\/strong> in case of multiple values for the same key there will be two entries of that key-value pair. Also, each key and value is URLencoded similar to the query string.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now the question that might be coming to the mind is if <strong>x-www-form-urlencoded<\/strong> is just like query string then why does it exist. The reason is that the query string is part of the URI and since there is a limit on the length of the URI, you can send a limited number of key-value pairs in the query string.&nbsp; While there is no limit for the length of the <strong>x-www-form-urlencoded<\/strong> request body. However, it is limited by the max request body size allowed by the server which is generally 10MB for most of the servers. Now let&#8217;s see how we can parse the <strong>x-www-form-urlencoded<\/strong> in golang<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Example\"><\/span><strong>Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Request object of net\/http package has two fields which can hold the form-data. <a href=\"https:\/\/golang.org\/src\/net\/http\/request.go\">https:\/\/golang.org\/src\/net\/http\/request.go<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The two fields are<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Form<\/strong> &#8211; It holds combine data of query string and <strong>x-www-form-urlencoded <\/strong>request body<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>PostForm<\/strong>&#8211; It holds only <strong>x-www-form-urlencoded <\/strong>request body<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">To get the <strong>x-www-form-urlencoded<\/strong> request body we need to first call the below function on the request object<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.ParseForm()<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This function essentially does below things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It parses the query string present in the URL and populates the <strong>Form<\/strong> field of the request object<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>After that, if the request method is PUT, POST, or PATCH&nbsp; and the request body content-type is x-www-form-urlencoded, then it also parses the request body and populates the above two fields of the request object<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form\nrequest.PostForm<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>request.PostForm <\/strong>will be initialized to a non-nil, empty value if the request body content-type is not x-www-form-urlencoded or the request method is not PUT, POST, or PATCH<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The body parameters will take precedence over URL query string values i.e if there is a key that is<strong>&nbsp;<\/strong>present in both form body and in query param. Then the value in the form body will take precedence<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Also, note that this function is idempotent.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Both <strong>Form<\/strong> and <strong>PostForm<\/strong> field are of the below type<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Values map[string][]string<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is a map where<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The key is a string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The value is an array of strings. It is an array of strings because there can be multiple values<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So essentially to get the x-www-url-encoded request body we need to call the <strong>ParseForm<\/strong> function first on the request object. This will populate both the <strong>Form<\/strong> and <strong>PostForm<\/strong> field. Then we can access these fields to get the<strong> x-www-form-urlencoded<\/strong> body. For example, let&#8217;s say we have the below <strong>x-www-form-urlencoded<\/strong> body.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">name=John\nage=21\nhobbies=sports\nhobbies=music<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then you can access the <strong>name<\/strong> field like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form[\"name\"]\nrequest.PostForm[\"name\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">both will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[\"John\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is an array because the key can have multiple values. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, the request&#8217;s object defines one more function <strong>FormValue<\/strong> which can be used to get the first value associated with the key. It just returns the first value and not the array. For example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.FormValue(\"hobbies\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sports<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for that as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"net\/http\"\n)\n\ntype employee struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tcreateEmployeeHanlder := http.HandlerFunc(createEmployee)\n\thttp.Handle(\"\/employee\", createEmployeeHanlder)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc createEmployee(w http.ResponseWriter, r *http.Request) {\n\theaderContentTtype := r.Header.Get(\"Content-Type\")\n\tif headerContentTtype != \"application\/x-www-form-urlencoded\" {\n\t\tw.WriteHeader(http.StatusUnsupportedMediaType)\n\t\treturn\n\t}\n\tr.ParseForm()\n\tfmt.Println(\"request.Form::\")\n\tfor key, value := range r.Form {\n\t\tfmt.Printf(\"Key:%s, Value:%s\\n\", key, value)\n\t}\n\tfmt.Println(\"\\nrequest.PostForm::\")\n\tfor key, value := range r.PostForm {\n\t\tfmt.Printf(\"Key:%s, Value:%s\\n\", key, value)\n\t}\n\n\tfmt.Printf(\"\\nName field in Form:%s\\n\", r.Form[\"name\"])\n\tfmt.Printf(\"\\nName field in PostForm:%s\\n\", r.PostForm[\"name\"])\n\tfmt.Printf(\"\\nHobbies field in FormValue:%s\\n\", r.FormValue(\"hobbies\"))\n\n\tw.WriteHeader(200)\n\treturn\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we are running a server on port <strong>8080<\/strong>. Also notice that we are first calling the <strong>ParseForm<\/strong> function and then accessing the <strong>Form<\/strong> and <strong>PostForm<\/strong> fields of the request object.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, see how we are accessing the value of the <strong>name<\/strong> field in <strong>Form<\/strong> as well as <strong>PostForm<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">r.Form[\"name\"]\nr.PostForm[\"name\"]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also, we are calling the <strong>FormValue<\/strong> function on the request object to access the <strong>hobbies<\/strong> field as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">r.FormValue(\"hobbies\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Run the above program. It will start a server at port <strong>8080<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s try some curl calls.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Passing only the x-www-form-urlencoded body. No query string.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">curl -v -X POST 'http:\/\/localhost:8080\/employee' \\\n--header 'Content-Type: application\/x-www-form-urlencoded' \\\n--data-urlencode 'name=John' \\\n--data-urlencode 'age=18' \\\n--data-urlencode 'hobbies=sports' \\\n--data-urlencode 'hobbies=music'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">request.Form:: \nKey:name, Value:[John] \nKey:age, Value:[18] \nKey:hobbies, Value:[sports music] \n\nrequest.PostForm:: \nKey:name, Value:[John] \nKey:age, Value:[18] \nKey:hobbies, Value:[sports music] \n\nName field in Form:[John] \n\nName field in PostForm:[John] \n\nHobbies field in FormValue:sports<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Passing the x-www-form-urlencoded body. Passing an extra field <strong>gender<\/strong> in the query string. Notice in the output that the gender field is not present in <strong>PostForm<\/strong> but present in <strong>Form<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">curl -v -X POST 'http:\/\/localhost:8080\/employee?gender=male' \\\n--header 'Content-Type: application\/x-www-form-urlencoded' \\\n--data-urlencode 'name=John' \\\n--data-urlencode 'age=18' \\\n--data-urlencode 'hobbies=sports' \\\n--data-urlencode 'hobbies=music'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form:: \nKey:age, Value:[18] \nKey:hobbies, Value:[sports music] \nKey:gender, Value:[male] \nKey:name, Value:[John] \n\nrequest.PostForm:: \nKey:name, Value:[John] \nKey:age, Value:[18] \nKey:hobbies, Value:[sports music] \n\nName field in Form:[John] \n\nName field in PostForm:[John] \n\nHobbies field in FormValue:sports<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Passing the x-www-form-urlencoded body. Also passing the same key ie <strong>age<\/strong> in the query string. <strong>age=20<\/strong> is passed in the query string and <strong>age=18<\/strong> is passed in the post body.&nbsp; The value <strong>20 <\/strong>for<strong> age<\/strong> will not be present in the <strong>PostForm<\/strong> field but present in the <strong>Form<\/strong> field. Since body parameters take precedence therefore <strong>age=18<\/strong> is the first value in the array in the <strong>Form <\/strong>field. If you run <strong>r.FormValue(&#8220;age&#8221;) <\/strong>then it will return 18 and not 20<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">curl -v -X POST 'http:\/\/localhost:8080\/employee?age=20' \\\n--header 'Content-Type: application\/x-www-form-urlencoded' \\\n--data-urlencode 'name=John' \\\n--data-urlencode 'age=18' \\\n--data-urlencode 'hobbies=sports' \\\n--data-urlencode 'hobbies=music'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.Form:: \nKey:hobbies, Value:[sports music] \nKey:name, Value:[John] \nKey:age, Value:[18 20] \n\nrequest.PostForm:: \nKey:name, Value:[John] \nKey:age, Value:[18] \nKey:hobbies, Value:[sports music] \n\nName field in Form:[John] \n\nName field in PostForm:[John] \n\nHobbies field in FormValue:sports<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: This post is parsing the application\/x-www-form-urlencoded request at the server end. If you using an HTTP client and trying to send the application\/x-www-form-urlencoded request then please see the below link https:\/\/golangbyexamples.com\/http-client-urlencoded-body-go\/&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4836","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: This post is parsing the application\/x-www-form-urlencoded request at the server end. If you using an HTTP client and trying to send the application\/x-www-form-urlencoded request then please see the below link https:\/\/golangbyexamples.com\/http-client-urlencoded-body-go\/...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-12-31T06:30:45+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-01-01T17:18:00+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/\",\"name\":\"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-12-31T06:30:45+00:00\",\"dateModified\":\"2021-01-01T17:18:00+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/","og_locale":"en_US","og_type":"article","og_title":"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang) - Welcome To Golang By Example","og_description":"Note: This post is parsing the application\/x-www-form-urlencoded request at the server end. If you using an HTTP client and trying to send the application\/x-www-form-urlencoded request then please see the below link https:\/\/golangbyexamples.com\/http-client-urlencoded-body-go\/...","og_url":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-12-31T06:30:45+00:00","article_modified_time":"2021-01-01T17:18:00+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/","url":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/","name":"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-12-31T06:30:45+00:00","dateModified":"2021-01-01T17:18:00+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/url-encoded-body-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/url-encoded-body-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"HTTP server or Parse incoming application\/x-www-form-urlencoded request body in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1g0","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4836","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4836"}],"version-history":[{"count":6,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4836\/revisions"}],"predecessor-version":[{"id":4857,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4836\/revisions\/4857"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4836"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4836"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4836"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}