{"id":1189,"date":"2020-01-22T17:18:22","date_gmt":"2020-01-22T17:18:22","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=1189"},"modified":"2020-01-22T17:18:51","modified_gmt":"2020-01-22T17:18:51","slug":"understanding-uintptr-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/","title":{"rendered":"Understanding uintptr in Golang"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#Properties\" title=\"Properties\">Properties<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#Purpose\" title=\"Purpose\">Purpose<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is an unsigned integer type which is large enough to hold any pointer address. Therefore its size is platform dependent.  It is just an integer representation of an address.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Properties\"><\/span><strong>Properties<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A <strong>uintptr<\/strong> can be converted to <strong>unsafe.Pointer<\/strong> and viceversa. Later we will talk about where conversion of <strong>uintptr<\/strong> to <strong>unsafe.Pointer<\/strong> is useful.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Arithmetic can be performed on the <strong>uintptr<\/strong>. Do note here arithmetic cannot be performed in a <strong>pointer<\/strong> in Go or <strong>unsafe.Pointer<\/strong> in Go. <\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>uintptr<\/strong> even though it holds a pointer address, is just a value and does not reference any object. Therefore<ul><li>Its value will not be updated if the corresponding object moves. Eg When goroutine stack changes<\/li><li>The corresponding object can be garbage collected. The GC does not consider <strong>uintptr<\/strong> as live references and hence they can be garbage collected.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Purpose\"><\/span><strong>Purpose<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>uintptr<\/strong> can be used for below purposes:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>One purpose of uintptr is to be used along with unsafe.Pointer  for unsafe memory access. Arithmetic operations cannot be performed on unsafe.Pointer. To perform such arithmetic <ul><li>unsafe. Pointer is converted to uintptr <\/li><li>arithmetic is then performed on uintptr<\/li><li>uintptr is converted back to unsafe.Pointer\u00a0 to access the object now pointed by the address<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Be careful that the above steps should be atomic with respect to Garbage Collector, otherwise\u00a0it could lead to issues. For eg after the first step 1, the referenced object is liable to be collection. If that happens then after step 3, the pointer will be an invalid Go pointer and can crash the program. Look at the unsafe package documentation.<\/p>\n\n\n\n<p><a href=\"https:\/\/golang.org\/pkg\/unsafe\/#Pointer\">https:\/\/golang.org\/pkg\/unsafe\/#Pointer<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"> It lists down when the above conversion can be safe. See the below code for the scenario mentioned above. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the below code we are doing arithmetic like below to get to address of field <strong>&#8220;b&#8221;<\/strong> in struct sample and then printing the value at that address. This below code is atomic with reference to the garbage collector. <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">p := unsafe.Pointer(uintptr(unsafe.Pointer(s)) + unsafe.Offsetof(s.b))<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\ntype sample struct {\n    a int\n    b string\n}\nfunc main() {\n    s := &sample{a: 1, b: \"test\"}\n    \n   \/\/Getting the address of field b in struct s\n    p := unsafe.Pointer(uintptr(unsafe.Pointer(s)) + unsafe.Offsetof(s.b))\n    \n    \/\/Typecasting it to a string pointer and printing the value of it\n    fmt.Println(*(*string)(p))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">test<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Another purpose of uintptr is when you want to save the pointer address value for printing it or storing it. Since the address is just stored and does not reference anything, the corresponding object can be garbage collected.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">See below code where we are converting an unsafe.Pointer to uintptr and printing it. Also, note as mentioned before too one the unsafe.Pointer is converted to uinptr, the reference is lost and the reference variable can be garbage collected.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype sample struct {\n    a int\n    b string\n}\n\nfunc main() {\n    s := &sample{\n        a: 1,\n        b: \"test\",\n    }\n    \/\/Get the address as a uintptr\n    startAddress := uintptr(unsafe.Pointer(s))\n    fmt.Printf(\"Start Address of s: %d\\n\", startAddress)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The output will be dependent upon the machine as it is an address.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Start Address of s: 824634330992<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewPropertiesPurpose Overview This is an unsigned integer type which is large enough to hold any pointer address. Therefore its size is platform dependent. It is just an integer representation&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[105,168],"class_list":["post-1189","post","type-post","status-publish","format-standard","hentry","category-tech","tag-data","tag-uintptr"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understanding uintptr in Golang - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understanding uintptr in Golang - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewPropertiesPurpose Overview This is an unsigned integer type which is large enough to hold any pointer address. Therefore its size is platform dependent. It is just an integer representation...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-01-22T17:18:22+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-01-22T17:18:51+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/\",\"name\":\"Understanding uintptr in Golang - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-01-22T17:18:22+00:00\",\"dateModified\":\"2020-01-22T17:18:51+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understanding uintptr in Golang\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understanding uintptr in Golang - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/","og_locale":"en_US","og_type":"article","og_title":"Understanding uintptr in Golang - Welcome To Golang By Example","og_description":"Table of Contents OverviewPropertiesPurpose Overview This is an unsigned integer type which is large enough to hold any pointer address. Therefore its size is platform dependent. It is just an integer representation...","og_url":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-01-22T17:18:22+00:00","article_modified_time":"2020-01-22T17:18:51+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/","url":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/","name":"Understanding uintptr in Golang - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-01-22T17:18:22+00:00","dateModified":"2020-01-22T17:18:51+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/understanding-uintptr-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understanding uintptr in Golang"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-jb","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1189","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=1189"}],"version-history":[{"count":8,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1189\/revisions"}],"predecessor-version":[{"id":1197,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1189\/revisions\/1197"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=1189"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=1189"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=1189"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}