{"id":5864,"date":"2021-07-07T18:26:41","date_gmt":"2021-07-07T12:56:41","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5864"},"modified":"2021-07-07T18:30:12","modified_gmt":"2021-07-07T13:00:12","slug":"golang-regex-floating-point-number","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/","title":{"rendered":"Golang Regex: Match a floating-point number in Regular Expression"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">A floating-point number could have below properties<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It could have a negative and positive sign<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The integer part could be optional when the decimal part is present<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The dot and decimal part could be optional if the integer part is present<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It could have an exponent or not<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So below are valid floating-point numbers<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1.2\n.12\n12\n12.\n+1.2\n-1.2\n1.2e3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below are invalid floating points&nbsp;<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>An empty string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>+ or &#8211; sign only<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A single dot<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A prefix of multiple\u00a00. For eg 00.1 or 001<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Anything like +. or &#8211;<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A dot just before exponent.\u00a0 Eg 1.e2<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Any other char before or after the floating-point number. Eg a1.3 or a1.3b or 1.3b<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below are examples of invalid floats<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\"\"\n.\n00.1\n001\n+\n-\n+.\n-.\n1.e2\na1.2\n1.2b\na1.2b<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s first see a simple regex which only matches only the integer, dot, and decimal parts.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">^(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|\\.\\d+)$<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">On a high level, the entire regex has two parts which are in OR relation<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>(?:0|[1-9]\\d*)(?:\\.\\d*)? &#8211; <\/strong>This captures the part where the integer part is always present and the decimal part is optional<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>\\.\\d+ &#8211; <\/strong>This captures the part where the integer part is not present and the decimal part is always present.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s dissect this regex<\/p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png?resize=640%2C309&#038;ssl=1\" alt=\"\" class=\"wp-image-5865\" width=\"640\" height=\"309\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?resize=1024%2C495&amp;ssl=1 1024w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?resize=300%2C145&amp;ssl=1 300w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?resize=768%2C372&amp;ssl=1 768w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?resize=1536%2C743&amp;ssl=1 1536w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?resize=850%2C411&amp;ssl=1 850w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?w=1968&amp;ssl=1 1968w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex.png?w=1280&amp;ssl=1 1280w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s make it more complex by having it accept a negative or a positive sign. Note that negative or positive sign is optional<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">^[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|\\.\\d+)$<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The regex is the same as the earlier regex. We just added the optional positive negative sign in front<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>[+\\-] &#8211;<\/strong> Match either positive or negative sign.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>?<\/strong> &#8211; Matching either positive or negative sign is optional<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s also add an exponent part to the regex. Again note that the exponent part is optional. This regex is the same as the previous regex. We just added the exponent part at the end<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">^[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|\\.\\d+)(?:\\d[eE][+\\-]?\\d+)?$<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s dissect the exponent part<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>(?: &#8211;<\/strong> It means non-capturing group<\/li><li><strong>\\d<\/strong> &#8211; Match one digit. This is to prevent numbers like 1.e2<\/li><li><strong>[eE]<\/strong> &#8211; Match either lowercase e or uppercase E<\/li><li><strong>[+\\-] &#8211;<\/strong> Match either positive or negative sign. The matching either positive or negative sign is optional<\/li><li><strong>\\d+ &#8211;<\/strong>\u00a0Match zero or more digits<\/li><li><strong>)? &#8211;<\/strong>\u00a0Entire regex\u00a0 expression is optional<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Now see an example of this regular expression in action<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegex := regexp.MustCompile(`^[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|\\.\\d+)(?:\\d[eE][+\\-]?\\d+)?$`)\n\n\tfmt.Println(\"Valid Inputs\")\n\tmatch := sampleRegex.MatchString(\"1.2\")\n\tfmt.Printf(\"For 1.2: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\".12\")\n\tfmt.Printf(\"For .12: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"12\")\n\tfmt.Printf(\"For 12: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"12.\")\n\tfmt.Printf(\"For 12.: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"+1.2\")\n\tfmt.Printf(\"For +1.2.: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"-1.2\")\n\tfmt.Printf(\"For -1.2.: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"1.2e3\")\n\tfmt.Printf(\"For 1.2e3.: %t\\n\", match)\n\n\tfmt.Println(\"\\nInValid Inputs\")\n\tmatch = sampleRegex.MatchString(\".\")\n\tfmt.Printf(\"For .: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"\")\n\tfmt.Printf(\"For empty string: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"00.1\")\n\tfmt.Printf(\"For 00.1: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"001\")\n\tfmt.Printf(\"For 001 %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"+\")\n\tfmt.Printf(\"For +: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"-\")\n\tfmt.Printf(\"For -: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"+.\")\n\tfmt.Printf(\"For +.: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"-.\")\n\tfmt.Printf(\"For -.: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"1.e2\")\n\tfmt.Printf(\"For 1.e2: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\".e2\")\n\tfmt.Printf(\"For .e2: %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"a1.2\")\n\tfmt.Printf(\"For a1.2 %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"1.2b\")\n\tfmt.Printf(\"For 1.2b %t\\n\", match)\n\n\tmatch = sampleRegex.MatchString(\"a1.2b\")\n\tfmt.Printf(\"For a1.2b %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Valid Inputs\nFor 1.2: true\nFor .12: true\nFor 12: true\nFor 12.: true\nFor +1.2.: true\nFor -1.2.: true\nFor 1.2e3.: true\n\nInValid Inputs\nFor .: false\nFor empty string: false\nFor 00.1: false\nFor 001 false\nFor +: false\nFor -: false\nFor +.: false\nFor -.: false\nFor 1.e2: false\nFor .e2: false\nFor a1.2 false\nFor 1.2b false\nFor a1.2b false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">For all the valid inputs discussed above the program prints true<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Valid Inputs\nFor 1.2: true\nFor .12: true\nFor 12: true\nFor 12.: true\nFor +1.2.: true\nFor -1.2.: true\nFor 1.2e3.: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">And for all the invalid inputs discussed above it gives false<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">InValid Inputs\nFor .: false\nFor empty string: false\nFor 00.1: false\nFor 001 false\nFor +: false\nFor -: false\nFor +.: false\nFor -.: false\nFor 1.e2: false\nFor .e2: false\nFor a1.2 false\nFor 1.2b false\nFor a1.2b false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Please try it out and post in the comments if in any case, this regex doesn&#8217;t work.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The above regex is used to validate if a given string is a number. If you want to find if an input string contains a number as a substring then we need to remove the anchor characters at the start and the end which is removing the <strong>caret (^)<\/strong> at the start and the dollar <strong>($)<\/strong> character at the end<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So the regex will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|\\.\\d+)(?:\\d[eE][+\\-]?\\d+)?<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is all about matching floating point numbers through regex in golang. Hope you have liked this article. Please share feedback in the comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview A floating-point number could have below properties It could have a negative and positive sign The integer part could be optional when the decimal part is present&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[328,3,4,218,329,324],"class_list":["post-5864","post","type-post","status-publish","format-standard","hentry","category-tech","tag-floating","tag-go","tag-golang","tag-number","tag-point","tag-regex"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang Regex: Match a floating-point number in Regular Expression - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang Regex: Match a floating-point number in Regular Expression - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgram Overview A floating-point number could have below properties It could have a negative and positive sign The integer part could be optional when the decimal part is present...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-07-07T12:56:41+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-07-07T13:00:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/\",\"url\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/\",\"name\":\"Golang Regex: Match a floating-point number in Regular Expression - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png\",\"datePublished\":\"2021-07-07T12:56:41+00:00\",\"dateModified\":\"2021-07-07T13:00:12+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang Regex: Match a floating-point number in Regular Expression\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang Regex: Match a floating-point number in Regular Expression - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/","og_locale":"en_US","og_type":"article","og_title":"Golang Regex: Match a floating-point number in Regular Expression - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgram Overview A floating-point number could have below properties It could have a negative and positive sign The integer part could be optional when the decimal part is present...","og_url":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-07-07T12:56:41+00:00","article_modified_time":"2021-07-07T13:00:12+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/","url":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/","name":"Golang Regex: Match a floating-point number in Regular Expression - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png","datePublished":"2021-07-07T12:56:41+00:00","dateModified":"2021-07-07T13:00:12+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/07\/floating_point_regex-1024x495.png"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/golang-regex-floating-point-number\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang Regex: Match a floating-point number in Regular Expression"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1wA","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5864","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5864"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5864\/revisions"}],"predecessor-version":[{"id":5869,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5864\/revisions\/5869"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5864"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5864"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5864"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}