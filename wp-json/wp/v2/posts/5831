{"id":5831,"date":"2021-06-16T09:49:11","date_gmt":"2021-06-16T04:19:11","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5831"},"modified":"2021-06-16T09:49:18","modified_gmt":"2021-06-16T04:19:18","slug":"reverse-doubly-linked-list-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/","title":{"rendered":"Reverse Doubly Linked List in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">A Doubly Linked List can be reversed by below two methods:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>By swapping previous and next pointers of nodes.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>By using stack<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In this tutorial, we will cover the first method i.e by swapping previous and next pointers.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s say we have below doubly linked list<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"102\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png?resize=640%2C102&#038;ssl=1\" alt=\"dll_reverse1\" class=\"wp-image-5832\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?resize=1024%2C163&amp;ssl=1 1024w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?resize=300%2C48&amp;ssl=1 300w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?resize=768%2C122&amp;ssl=1 768w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?resize=1536%2C244&amp;ssl=1 1536w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?resize=850%2C135&amp;ssl=1 850w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?w=1598&amp;ssl=1 1598w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1.png?w=1280&amp;ssl=1 1280w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">After reversing, a doubly-linked list will be like below:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"106\" src=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2-1024x170.png?resize=640%2C106&#038;ssl=1\" alt=\"\" class=\"wp-image-5833\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?resize=1024%2C170&amp;ssl=1 1024w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?resize=300%2C50&amp;ssl=1 300w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?resize=768%2C128&amp;ssl=1 768w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?resize=1536%2C256&amp;ssl=1 1536w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?resize=850%2C141&amp;ssl=1 850w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?w=1587&amp;ssl=1 1587w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse2.png?w=1280&amp;ssl=1 1280w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In this approach we need to take care of the below points:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Swap head and tail of the doubly linked list<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Swap previous and next pointers of all nodes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\ntype node struct {\n    data string\n    prev *node\n    next *node\n}\ntype doublyLinkedList struct {\n    len  int\n    tail *node\n    head *node\n}\nfunc initDoublyList() *doublyLinkedList {\n    return &doublyLinkedList{}\n}\nfunc (d *doublyLinkedList) AddFrontNodeDLL(data string) {\n    newNode := &node{\n        data: data,\n    }\n    if d.head == nil {\n        d.head = newNode\n        d.tail = newNode\n    } else {\n        newNode.next = d.head\n        d.head.prev = newNode\n        d.head = newNode\n    }\n    d.len++\n}\nfunc (d *doublyLinkedList) AddEndNodeDLL(data string) {\n    newNode := &node{\n        data: data,\n    }\n    if d.head == nil {\n        d.head = newNode\n        d.tail = newNode\n    } else {\n        currentNode := d.head\n        for currentNode.next != nil {\n            currentNode = currentNode.next\n        }\n        newNode.prev = currentNode\n        currentNode.next = newNode\n        d.tail = newNode\n    }\n    d.len++\n}\nfunc (d *doublyLinkedList) TraverseForward() error {\n    if d.head == nil {\n        return fmt.Errorf(\"TraverseError: List is empty\")\n    }\n    temp := d.head\n    for temp != nil {\n        fmt.Printf(\"value = %v, prev = %v, next = %v\\n\", temp.data, temp.prev, temp.next)\n        temp = temp.next\n    }\n    fmt.Println()\n    return nil\n}\nfunc (d *doublyLinkedList) Size() int {\n    return d.len\n}\nfunc (d *doublyLinkedList) ReverseDLL() {\n    currentNode := d.head\n    var nextInList *node\n    d.head, d.tail = d.tail, d.head\n    for currentNode != nil {\n        nextInList = currentNode.next\n        currentNode.next, currentNode.prev = currentNode.prev, currentNode.next\n        currentNode = nextInList\n    }\n}\nfunc main() {\n    doublyList := initDoublyList()\n    fmt.Printf(\"Add Front Node: C\\n\")\n    doublyList.AddFrontNodeDLL(\"C\")\n    fmt.Printf(\"Add Front Node: B\\n\")\n    doublyList.AddFrontNodeDLL(\"B\")\n    fmt.Printf(\"Add Front Node: A\\n\")\n    doublyList.AddFrontNodeDLL(\"A\")\n    fmt.Printf(\"Add End Node: D\\n\")\n    doublyList.AddEndNodeDLL(\"D\")\n    fmt.Printf(\"Add End Node: E\\n\")\n    doublyList.AddEndNodeDLL(\"E\")\n    fmt.Printf(\"Size of doubly linked ist: %d\\n\", doublyList.Size())\n    err := doublyList.TraverseForward()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n    fmt.Println(\"Reversing Doubly Linked List\")\n    doublyList.ReverseDLL()\n    fmt.Printf(\"Size of doubly linked ist: %d\\n\", doublyList.Size())\n    err = doublyList.TraverseForward()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Add Front Node: C\nAdd Front Node: B\nAdd Front Node: A\nAdd End Node: D\nAdd End Node: E\nSize of doubly linked ist: 5\nvalue = A, prev = <nil>, next = &{B 0xc000070060 0xc000070020}\nvalue = B, prev = &{A <nil> 0xc000070040}, next = &{C 0xc000070040 0xc000070080}\nvalue = C, prev = &{B 0xc000070060 0xc000070020}, next = &{D 0xc000070020 0xc0000700a0}\nvalue = D, prev = &{C 0xc000070040 0xc000070080}, next = &{E 0xc000070080 <nil>}\nvalue = E, prev = &{D 0xc000070020 0xc0000700a0}, next = <nil>\n\nReversing Doubly Linked List\nSize of doubly linked ist: 5\nvalue = E, prev = <nil>, next = &{D 0xc0000700a0 0xc000070020}\nvalue = D, prev = &{E <nil> 0xc000070080}, next = &{C 0xc000070080 0xc000070040}\nvalue = C, prev = &{D 0xc0000700a0 0xc000070020}, next = &{B 0xc000070020 0xc000070060}\nvalue = B, prev = &{C 0xc000070080 0xc000070040}, next = &{A 0xc000070040 <nil>}\nvalue = A, prev = &{B 0xc000070020 0xc000070060}, next = <nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview A Doubly Linked List can be reversed by below two methods: By swapping previous and next pointers of nodes. By using stack In this tutorial, we will&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-5831","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Reverse Doubly Linked List in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"In this tutorial we will see how to reverse a doubly linked list in golang.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Reverse Doubly Linked List in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"In this tutorial we will see how to reverse a doubly linked list in golang.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-06-16T04:19:11+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-06-16T04:19:18+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/\",\"name\":\"Reverse Doubly Linked List in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png\",\"datePublished\":\"2021-06-16T04:19:11+00:00\",\"dateModified\":\"2021-06-16T04:19:18+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"In this tutorial we will see how to reverse a doubly linked list in golang.\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Reverse Doubly Linked List in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Reverse Doubly Linked List in Go (Golang) - Welcome To Golang By Example","description":"In this tutorial we will see how to reverse a doubly linked list in golang.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/","og_locale":"en_US","og_type":"article","og_title":"Reverse Doubly Linked List in Go (Golang) - Welcome To Golang By Example","og_description":"In this tutorial we will see how to reverse a doubly linked list in golang.","og_url":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-06-16T04:19:11+00:00","article_modified_time":"2021-06-16T04:19:18+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/","url":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/","name":"Reverse Doubly Linked List in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png","datePublished":"2021-06-16T04:19:11+00:00","dateModified":"2021-06-16T04:19:18+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"In this tutorial we will see how to reverse a doubly linked list in golang.","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/06\/dll_reverse1-1024x163.png"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/reverse-doubly-linked-list-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Reverse Doubly Linked List in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1w3","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5831","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5831"}],"version-history":[{"count":1,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5831\/revisions"}],"predecessor-version":[{"id":5834,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5831\/revisions\/5834"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5831"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5831"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5831"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}