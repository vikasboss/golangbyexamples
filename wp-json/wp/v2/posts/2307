{"id":2307,"date":"2020-06-20T20:45:57","date_gmt":"2020-06-20T15:15:57","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2307"},"modified":"2021-01-08T21:04:58","modified_gmt":"2021-01-08T15:34:58","slug":"declare-initialize-create-array-slice-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/","title":{"rendered":"Declare\/Initialize\/Create an array or slice in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Creating_a_slice\" title=\"Creating a slice\">Creating a slice<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Using_the_format\" title=\"Using the []&lt;type&gt;{} format\">Using the []&lt;type&gt;{} format<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Creating_a_slice_from_another_slice_or_array\" title=\"Creating a slice from another slice or array\">Creating a slice from another slice or array<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Create_a_slice_from_Array\" title=\"Create a slice from Array\">Create a slice from Array<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Create_a_slice_from_slice\" title=\"Create a slice from slice\">Create a slice from slice<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Using_the_make_function\" title=\"Using the&nbsp;make function\">Using the&nbsp;make function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Using_the_new_function\" title=\"Using the new function\">Using the new function<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#Create_an_array\" title=\"Create an array\">Create an array<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Similar to any other programming language, golang also has an array data structure. But in go, arrays behave little differently than other languages and also we have something called slice in golang which is like a reference to an array. Slice is more powerful and convenient to use than an array.&nbsp; Slice, in fact, is more analogous to arrays in another programming language.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"> In this article, we will learn how to<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create a slice instance<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create an array instance<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_slice\"><\/span><strong>Creating a slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">There are four ways of creating a slice<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the []&lt;type&gt;{} format<\/li><li>Creating a slice from another slice or array<\/li><li>Using make<\/li><li>Using new<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at each of above method one by one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_format\"><\/span><strong>Using the []&lt;type&gt;{} format<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The most common way of declaring a slice is this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := []int<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It declares an empty of slice of 0 length and 0 capacity. We can also initialise the slice during declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := []int{1,2}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It declares a slice of integers of length 2 and also the capacity of 2. The capacity will be equal to the actual slice elements specified. We also have two library functions provided by go which can be used to know the <strong>length<\/strong> and <strong>capacity<\/strong> of a slice.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>len()<\/strong> function &#8211; for&nbsp; length of the slice<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>cap()<\/strong> function &#8211; for capacity of the slice<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a small program which shows the above points<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := []int{}\n    fmt.Println(len(sample))\n    fmt.Println(cap(sample))\n    fmt.Println(sample)\n\n    letters := []string{\"a\", \"b\", \"c\"}\n    fmt.Println(len(letters))\n    fmt.Println(cap(letters))\n    fmt.Println(letters)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0\n0\n[]\n\n3\n3\n[a b c]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">When the actual elements are not specified, then both length and capacity of the slice is zero. When actual elements are specified , both&nbsp; length and capacity is equal to the number of actual elements specified.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_slice_from_another_slice_or_array\"><\/span><strong>Creating a slice from another slice or array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">A slice can be created by re-slicing an exiting slice or array.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Create_a_slice_from_Array\"><\/span><strong>Create a slice from Array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">The format for creating a new slice by re-slicing an existing array is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[n]sample[start:end]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above operation will return a new slice from the array<strong>&nbsp;<\/strong>starting from index <strong>start<\/strong> to index <strong>end-1. <\/strong>So the element at index <strong>end <\/strong>is not included in the newly created slice. While re-slicing, both start, and the end index are optional.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The default value of the start index is zero<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The default value of the end index is the length of the array<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := [5]int{1, 2, 3, 4, 5}\n\n    \/\/Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    \/\/Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    \/\/Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    \/\/None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above example that<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>length of newly created slice = (<strong>end<\/strong>&#8211;<strong>start<\/strong>)<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>capacity of newly created slice = (<strong>length_of_array<\/strong>&#8211;<strong>start<\/strong>)<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>num1<\/strong> slice would look like<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"391\" height=\"251\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg?resize=391%2C251&#038;ssl=1\" alt=\"\" class=\"wp-image-2185\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg?w=391&amp;ssl=1 391w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg?resize=300%2C193&amp;ssl=1 300w\" sizes=\"auto, (max-width: 391px) 100vw, 391px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The newly created slices still refer the original array. To check this change element at any one of the index of the array and then reprint the slice<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here is the output:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">num1=[3 8 5]\nnum3=[1 2 3 8]\nnum4=[1 2 3 8 5]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This proves that each of the new slice is still referring to the original array.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Create_a_slice_from_slice\"><\/span><strong>Create a slice from slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Whatever we discussed about re-slicing from an array also applies here as well. See below example which illustrates same thin<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5}\n\n    \/\/Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    \/\/Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    \/\/Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    \/\/None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here also the newly created slices refer to the same underlying array that was being referred to by the original slice.&nbsp; To check this change element at any one of the index of the original slice and then reprint all the newly created slices<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_make_function\"><\/span><strong>Using the&nbsp;make function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>make<\/strong> is a builtin function provided by go that can also be used to create a slice. Below is the signature of make function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func make([]{type}, length, capacity int) []{type}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Capacity is an optional parameter while creating slice using the make function. When capacity is omitted, the capacity of the slice is equal length specified for the slice. When using make function, behind the scenes go allocates an array equal to the capacity. All the elements of the allocated array are initialized with default zero value of the type. Let&#8217;s see a program illustrating this point.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/With capacity ommited\n    numbers = make([]int, 3)\n    fmt.Println(\"\\nCapacity Ommited\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[0 0 0]\nlength=3\ncapacity=5\n\nWith Capacity Ommited\nnumbers=[0 0 0]\nlength=3\ncapacity=3<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_new_function\"><\/span><strong>Using the new function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>new<\/strong> is a builtin function provided by go that can also be used to create a slice. It is not a very popular way of creating a slice as <strong>make<\/strong> is much more flexible in terms of functionalities . It is not generally used and also using <strong>new <\/strong>function returns a pointer to nil slice. Let&#8217;s see an example. In below example we are using the dereferencing operator <strong>&#8216;*&#8217;<\/strong> as <strong>new <\/strong>function returns a pointer to the nil slice<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := new([]int)\n    fmt.Printf(\"numbers=%v\\n\", *numbers)\n    fmt.Printf(\"length=%d\\n\", len(*numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(*numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[]\nlength=0\ncapacity=0<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Create_an_array\"><\/span><strong>Create an array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Both number of elements and actual elements are optional in the array declaration.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In below example, we see 4 ways of creating of an array<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Specifying both the length of the array and actual elements. Eg.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[2]int{1, 2}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only length &#8211; In this case all the actual elements are filled up with default value zero of that type. Eg<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[2]int{}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only actual elements &#8211; In this case, the length of the array will be equal to the number of actual elements. The symbol<strong> &#8216;&#8230;&#8217; <\/strong>needs to be used within square brackets like this [&#8230;] when not specifying the length. The symbol is an instruction to the compiler to calculate the length.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[...]int{2, 3}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Without length and actual elements &#8211; an empty array will be created in this case. Similar to above the symbol <strong>&#8216;&#8230;&#8217; <\/strong>also needs to be used in this case as well.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[...]int{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a code example illustrating above points. Also please keep in mind that the builtin function <strong>len() <\/strong>can be used to calculate the length of an array. In below program we are using <strong>len()<\/strong> function to calculate the length of the array.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Both number of elements and actual elements\n    sample1 := [2]int{1, 2}\n    fmt.Printf(\"Sample1: Len: %d, %v\\n\", len(sample1), sample1)\n\n    \/\/Only actual elements\n    sample2 := [...]int{2, 3}\n    fmt.Printf(\"Sample2: Len: %d, %v\\n\", len(sample2), sample2)\n\n    \/\/Only number of elements\n    sample3 := [2]int{}\n    fmt.Printf(\"Sample3: Len: %d, %v\\n\", len(sample3), sample3)\n\n    \/\/Without both number of elements and actual elements\n    sample4 := [...]int{}\n    fmt.Printf(\"Sample4: Len: %d, %v\\n\", len(sample4), sample4)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sample1: Len: 2, [1 2]\nSample2: Len: 2, [2 3]\nSample3: Len: 2, [0 0]\nSample4: Len: 0, []<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in the above example that for <strong>sample3 <\/strong>variable the actual elements are filled up with the default value of int which is 0.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is also ok if the actual elements specified are less than the length of the array. The rest of the elements are filled up with the default value of the type specified. See the below example. The length of the array specified is 4 while only 2 actual elements are declared. Hence the remaining two elements are assigned value 0 which is the default zero value of an <strong>int<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [4]int{5, 8}\n    fmt.Printf(\"Sample: Len: %d, %v\\n\", len(sample), sample)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sample: Len: 4, [5 8 0 0]<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewCreating a sliceUsing the []&lt;type&gt;{} formatCreating a slice from another slice or arrayCreate a slice from ArrayCreate a slice from sliceUsing the&nbsp;make functionUsing the new functionCreate an array Overview&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3],"class_list":["post-2307","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Declare\/Initialize\/Create an array or slice in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Declare\/Initialize\/Create an array or slice in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewCreating a sliceUsing the []&lt;type&gt;{} formatCreating a slice from another slice or arrayCreate a slice from ArrayCreate a slice from sliceUsing the&nbsp;make functionUsing the new functionCreate an array Overview...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-20T15:15:57+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-01-08T15:34:58+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/\",\"name\":\"Declare\/Initialize\/Create an array or slice in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg\",\"datePublished\":\"2020-06-20T15:15:57+00:00\",\"dateModified\":\"2021-01-08T15:34:58+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Declare\/Initialize\/Create an array or slice in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Declare\/Initialize\/Create an array or slice in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/","og_locale":"en_US","og_type":"article","og_title":"Declare\/Initialize\/Create an array or slice in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewCreating a sliceUsing the []&lt;type&gt;{} formatCreating a slice from another slice or arrayCreate a slice from ArrayCreate a slice from sliceUsing the&nbsp;make functionUsing the new functionCreate an array Overview...","og_url":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-06-20T15:15:57+00:00","article_modified_time":"2021-01-08T15:34:58+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/","url":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/","name":"Declare\/Initialize\/Create an array or slice in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg","datePublished":"2020-06-20T15:15:57+00:00","dateModified":"2021-01-08T15:34:58+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/declare-initialize-create-array-slice-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Declare\/Initialize\/Create an array or slice in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-Bd","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2307","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2307"}],"version-history":[{"count":7,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2307\/revisions"}],"predecessor-version":[{"id":4906,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2307\/revisions\/4906"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2307"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2307"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2307"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}