{"id":2244,"date":"2020-06-14T14:31:20","date_gmt":"2020-06-14T09:01:20","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2244"},"modified":"2021-09-16T18:13:01","modified_gmt":"2021-09-16T12:43:01","slug":"struct-in-golang-complete-guide","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/","title":{"rendered":"Struct in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the&nbsp; chapter 16 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guid\">Array<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/pointer-golang\/\">Pointer<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Declaring_a_struct_type\" title=\"Declaring a struct type\">Declaring a struct type<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Creating_a_struct_variable\" title=\"Creating a struct variable\">Creating a struct variable<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Accessing_and_Setting_Struct_Fields\" title=\"Accessing and Setting Struct Fields\">Accessing and Setting Struct Fields<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Pointer_to_a_struct\" title=\"Pointer to a struct\">Pointer to a struct<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Using_the_operator\" title=\"Using the &amp; operator\">Using the &amp; operator<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Using_the_new_keyword\" title=\"Using the new keyword\">Using the new keyword<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Print_a_Struct_Variable\" title=\"Print a Struct Variable\">Print a Struct Variable<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Using_the_fmt_package\" title=\"Using the fmt package\">Using the fmt package<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Printing_the_struct_in_JSON_form\" title=\"Printing the struct in JSON form\">Printing the struct in JSON form<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Struct_Field_Meta_or_Tags\" title=\"Struct Field Meta or Tags\">Struct Field Meta or Tags<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Anonymous_Fields_in_a_Struct\" title=\"Anonymous Fields in a Struct\">Anonymous Fields in a Struct<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Nested_Struct\" title=\"Nested Struct\">Nested Struct<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Anonymous_nested_struct_fields\" title=\"Anonymous nested struct fields\">Anonymous nested struct fields<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Exported_and_UnExported_fields_of_a_struct\" title=\"Exported and UnExported fields of a struct\">Exported and UnExported fields of a struct<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-16\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Struct_Equality\" title=\"Struct Equality\">Struct Equality<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-17\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Struct_are_value_types\" title=\"Struct are value types\">Struct are value types<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-18\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">GO struct is named collection of data fields which can be of different types. Struct acts as a container that has different heterogeneous data types which together represents an entity. For example, different attributes are used to represent an employee in an organization. Employee can have<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Name of string type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Age of int type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>DOB of time.Time type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Salary of int type<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">.. and so on. A struct can be used to represent an employee<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n    name   string\n    age    int\n    salary int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A struct in golang can be compared to a class in Object Oriented Languages<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Declaring_a_struct_type\"><\/span><strong>Declaring a struct type<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for declaring a struct<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type struct_name struct {\n    field_name1 field_type1\n    field_name2 field_type2\n    ...\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above format, <strong>struct_name<\/strong> is the name of the struct. It has a field named <strong>field_name1<\/strong> of type <strong>field_type1<\/strong> and a field named <strong>field_name2<\/strong> of type <strong>field_type2<\/strong>. This declares a new named struct type which acts as a blueprint. The type keyword is used to introduce a new type<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type point struct {\n    x float64\n    y float64\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above declaration declares a new struct named <strong>point<\/strong> which has two field <strong>x<\/strong> and <strong>y<\/strong>. Both fields are of <strong>float64<\/strong> type.Once a new struct type is declared we can define new concrete struct variable from it as we will see in next section<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_struct_variable\"><\/span><strong>Creating a struct variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Declaring a struct just declares a named struct type. Creating a struct variable creates an instance of that struct with memory being initialized as well. We can create a empty struct variable without given any value to any of the field<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In this case, all the fields in the struct are initialized with a default zero value of that field type.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">We can also initialize the value for each struct field while creating a struct variable. There are two variations<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each field on the same line<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{name: \"Sam\", age: 31, salary: 2000}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each field on different lines<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n   name:   \"Sam\",\n   age:    31,\n   salary: 2000,\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is also ok to initialize only some of the fields with value. The field which are not initialized with value will get the default zero value of their type<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n   name: \"Sam\",\n   age: 31,\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above case salary will get default value of zero since it is not initialized<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a working code illustrating above points:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{}\n    fmt.Printf(\"Emp1: %+v\\n\", emp1)\n\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp2: %+v\\n\", emp2)\n\n    emp3 := employee{\n        name:   \"Sam\",\n        age:    31,\n        salary: 2000,\n    }\n    fmt.Printf(\"Emp3: %+v\\n\", emp3)\n\n    emp4 := employee{\n        name: \"Sam\",\n        age:  31,\n    }\n    fmt.Printf(\"Emp4: %+v\\n\", emp4)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp1: {name: age:0 salary:0}\nEmp2: {name:Sam age:31 salary:2000}\nEmp3: {name:Sam age:31 salary:2000}\nEmp4: {name:Sam age:31 salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">For above program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We first declare an <strong>employee<\/strong> struct.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp1&#8217;s fields are all initialized with default zero value of its type i.e name with &#8220;&#8221;, age and salary with 0.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp2 has been initialized with all fields on the same line. Its fields are correctly printed with their value<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp3&#8217;s has been initialized with all fields on different lines. Its fields are correctly printed with their value<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>emp4&#8217;s salary field is initialized with default zero value of 0. While other other two fields are correctly printed with their value.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">It is to be noted that in the initialization of a struct, every new line with in curly braces has to end with a comma. So below initialization will raise error as<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\"salary\" : 2000<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">doesn&#8217;t end with a comma.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n  name:   \"Sam\",\n  age:    31,\n  salary: 2000\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This will be fine<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\n  name:   \"Sam\",\n  age:    31,\n  salary: 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Without field names<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">struct can also be initialized without specifying the field names. But in this case, all values for each of the field has to be provided in sequence<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{\"Sam\", 31, 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A compiler error will be raised if all values are not provided when field name is not used.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{\"Sam\", 31, 2000}\n    fmt.Printf(\"Emp: %+v\\n\", emp)\n\n    \/\/emp = employee{\"Sam\", 31}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp2: {name:Sam age:31 salary:2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Uncomment the line<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp = employee{\"Sam\", 31}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">in&nbsp;the above program, and it will raise compiler error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">too few values in employee literal<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Accessing_and_Setting_Struct_Fields\"><\/span><strong>Accessing and Setting Struct Fields<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Structs fields can be accessed using the dot operator. Below is the format for getting the value<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">n := emp.name<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Similarly a value can be assigned to a struct field too.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp.name = \"some_new_name\"<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n\n    \/\/Accessing a struct field\n    n := emp.name\n    fmt.Printf(\"Current name is: %s\\n\", n)\n\n    \/\/Assigning a new value\n    emp.name = \"John\"\n    fmt.Printf(\"New name is: %s\\n\", emp.name)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Current name is: Sam\nNew name is: John<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Pointer_to_a_struct\"><\/span><strong>Pointer to a struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">There<strong> <\/strong>are two ways of creating a pointer to the struct<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the &amp; operator<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the new keyword<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s looks at each of above method one by one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_operator\"><\/span><strong>Using the &amp; operator<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>&amp;<\/strong> operator can be used to get the pointer to a struct variable.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{name: \"Sam\", age: 31, salary: 2000}\nempP := &emp<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">struct pointer can also be directly created as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">empP := &employee{name: \"Sam\", age: 31, salary: 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    empP := &emp\n    fmt.Printf(\"Emp: %+v\\n\", empP)\n    empP = &employee{name: \"John\", age: 30, salary: 3000}\n    fmt.Printf(\"Emp: %+v\\n\", empP)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp: &{name:Sam age:31 salary:2000}\nEmp: &{name:John age:30 salary:3000}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_new_keyword\"><\/span><strong>Using the new keyword<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Using the&nbsp; new() keyword will:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create the struct<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Initialize all the field to the zero default value of their type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Return the pointer to the newly created struct<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">This will return a pointer<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">empP := new(employee)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Pointer address can be print using the <strong>%p<\/strong> format modifier<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Emp Pointer: %p\\n\", empP)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Deference operator &#8216;*&#8217; can be used to print the value at the pointer.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Emp Value: %+v\\n\", *empP)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will print<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp Value: {name: age:0 salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">When not using the dereference pointer but using the format identifier<strong>&nbsp; %+v, <\/strong>then ampersand will be appended before the struct indicating that is a pointer.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Emp Value: %+v\\n\", empP)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will print<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp Value: &{name: age:0 salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see full program denoting above points<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    empP := new(employee)\n    fmt.Printf(\"Emp Pointer Address: %p\\n\", empP)\n    fmt.Printf(\"Emp Pointer: %+v\\n\", empP)\n    fmt.Printf(\"Emp Value: %+v\\n\", *empP)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp Pointer Address: 0xc000130000\nEmp Pointer: &{name: age:0 salary:0}\nEmp Value: {name: age:0 salary:0}<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Print_a_Struct_Variable\"><\/span><strong>Print a Struct Variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">There<strong>&nbsp;<\/strong>are two ways to print all struct variables including all its key and values.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the <strong>fmt<\/strong> package<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Printing the struct in JSON form using the <strong>json\/encoding<\/strong> package. This also allows pretty print of a struct as well.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see the two ways in which we can print the instance of the employee struct.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_fmt_package\"><\/span><strong>Using the fmt package<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>fmt.Printf()<\/strong> function can be used to print a struct.&nbsp; Different format identifiers can be used to print a struct in different ways. Let&#8217;s see how different format identifiers can be used to print a struct in different formats.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s first create an instance of employee<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp := employee{name: \"Sam\", age: 31, salary: 2000}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%v<\/strong> &#8211; It will print only values. Field name will not be printed. This is the default way of printing a struct. Eg<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"%v\", emp)  -  {Sam 31 2000}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%+v &#8211; <\/strong>It will print both field and value. Eg<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"%+v\", emp) - {name:Sam age:31 salary:2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>fmt.Println()<\/strong> function can also be used to print a struct. Since %v is the default for <strong>fmt.Printlin()<\/strong> function, hence output will be same as using %v for <strong>fmt.Printf()<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(emp) - {Sam 31 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a working program too<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp: %v\\n\", emp)\n    fmt.Printf(\"Emp: %+v\\n\", emp)\n    fmt.Printf(\"Emp: %#v\\n\", emp)\n    fmt.Println(emp)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp: {Sam 31 2000}\nEmp: {name:Sam age:31 salary:2000}\nEmp: main.employee{name:\"Sam\", age:31, salary:2000}\n{Sam 31 2000}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Printing_the_struct_in_JSON_form\"><\/span><strong>Printing the struct in JSON form<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Second method is to print the struct in the JSON format. <strong>Marshal<\/strong> and <strong>MarshalIndent<\/strong> function of <strong>encoding\/json<\/strong> package can be used to print a struct in JSON format. Here is the difference<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Marshal<\/strong> &#8211; Below is the signature of the <strong>Marshal<\/strong> function. This function returns the JSON encoding of <strong>v <\/strong>by traversing the value recursively<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Marshal(v interface{}) ([]byte, error)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>MarshalIndent<\/strong>&#8211; Below is the signature of the <strong>MarshalIndent<\/strong> function. It is similar to <strong>Marshal <\/strong>function but applies Indent to format the output. So it can be used to pretty print a struct<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is to be noted that both <strong>Marshal<\/strong> and <strong>MarshalIndent<\/strong> function can only access the exported fields of a struct, which means that only the capitalized fields can be accessed and encoded in JSON form.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"encoding\/json\"\n    \"fmt\"\n    \"log\"\n)\n\ntype employee struct {\n    Name   string\n    Age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{Name: \"Sam\", Age: 31, salary: 2000}\n    \/\/Marshal\n    empJSON, err := json.Marshal(emp)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"Marshal funnction output %s\\n\", string(empJSON))\n\n    \/\/MarshalIndent\n    empJSON, err = json.MarshalIndent(emp, \"\", \"  \")\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"MarshalIndent funnction output %s\\n\", string(empJSON))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Marshal funnction output {\"Name\":\"Sam\",\"Age\":31}\n\nMarshalIndent funnction output {\n  \"Name\": \"Sam\",\n  \"Age\": 31\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The salary field is not printed in the output because it begins with a lowercase letter and is not exported. The <strong>Marshal<\/strong> function output is not formatted while the <strong>MarshalIndent<\/strong> function output is formatted.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>golang<\/strong> also allows the JSON encoded struct key name to be different by the use of struct meta fields as will see in the next section.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Struct_Field_Meta_or_Tags\"><\/span><strong>Struct Field Meta or Tags<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A struct in go also allows adding metadata to its fields. These meta fields can be used to encode decode into different forms, doing some forms of validations on struct fields, etc. So basically any meta information can be stored with fields of a struct and can be used by any package or library for different purposes.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for attaching a meta-data. Meta-data is a string literal i.e it is enclosed in backquotes<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type strutName struct{\n   fieldName type `key:value key2:value2`\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now for our use case, we will add JSON tags to employee struct as below. Marshal function will use the key name specified in the tags<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n    Name   string `json:\"n\"`\n    Age    int    `json:\"a\"`\n    Salary int    `json:\"s\"`\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see full program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">package main\n\nimport (\n    \"encoding\/json\"\n    \"fmt\"\n    \"log\"\n)\n\ntype employee struct {\n    Name   string `json:\"n\"`\n    Age    int    `json:\"a\"`\n    Salary int    `json:\"s\"`\n}\n\nfunc main() {\n    emp := employee{Name: \"Sam\", Age: 31, Salary: 2000}\n    \/\/Converting to jsonn\n    empJSON, err := json.MarshalIndent(emp, '', '  ')\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Println(string(empJSON))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\n  \"n\": \"Sam\",\n  \"a\": 31,\n  \"s\": 2000\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The key name in the output is same as specified in the json meta tags.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Anonymous_Fields_in_a_Struct\"><\/span><strong>Anonymous Fields in a Struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A<strong>&nbsp;<\/strong>struct can have anonymous fields as well, meaning a field having no name. The type will become the field name. In below example, <strong>string<\/strong> will be the field name as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n    string\n    age    int\n    salary int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The anonymous field can also be accessed and assigned a value<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{string: \"Sam\", age: 31, salary: 2000}\n    \/\/Accessing a struct field\n    n := emp.string\n    fmt.Printf(\"Current name is: %s\\n\", n)\n    \/\/Assigning a new value\n    emp.string = \"John\"\n    fmt.Printf(\"New name is: %s\\n\", emp.string)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Current name is: Sam\nNew name is: John<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Nested_Struct\"><\/span><strong>Nested Struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A struct can have another struct nested in it. Let&#8217;s see an example of a nested struct. In below <strong>employee<\/strong> struct has <strong>address<\/strong> struct nested it in.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name    string\n    age     int\n    salary  int\n    address address\n}\n\ntype address struct {\n    city    string\n    country string\n}\n\nfunc main() {\n    address := address{city: \"London\", country: \"UK\"}\n    emp := employee{name: \"Sam\", age: 31, salary: 2000, address: address}\n    fmt.Printf(\"City: %s\\n\", emp.address.city)\n    fmt.Printf(\"Country: %s\\n\", emp.address.country)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">City: London\nCountry: UK<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice how nested struct fields are accessed.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp.address.city\nemp.address.country<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Anonymous_nested_struct_fields\"><\/span><strong>Anonymous nested struct fields<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The nested struct field can also be anonymous. Also, in this case, nested struct&#8217;s fields are directly accessed. So below is valid<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp.city\nemp.country<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is also to be noted that below is still valid in this case<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp.address.city\nemp.address.country<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n\tname   string\n\tage    int\n\tsalary int\n\taddress\n}\n\ntype address struct {\n\tcity    string\n\tcountry string\n}\n\nfunc main() {\n\taddress := address{city: \"London\", country: \"UK\"}\n\n\temp := employee{name: \"Sam\", age: 31, salary: 2000, address: address}\n\n\tfmt.Printf(\"City: %s\\n\", emp.address.city)\n\tfmt.Printf(\"Country: %s\\n\", emp.address.country)\n\n\tfmt.Printf(\"City: %s\\n\", emp.city)\n\tfmt.Printf(\"Country: %s\\n\", emp.country)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">City: London\nCountry: UK\nCity: London\nCountry: UK<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above program that city field of address struct can be accessed in two ways<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">emp.city\nemp.address.city<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Similar for the country field of the address struct.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Exported_and_UnExported_fields_of_a_struct\"><\/span><strong>Exported and UnExported fields of a struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Go doesn\u2019t have any public,&nbsp; private or protected keyword. The only mechanism to control the visibility outside the package is using the capitalized and non-capitalized formats<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Capitalized Identifiers<\/strong>&nbsp;are exported. The capital letter indicates that this is an exported identifier and is available outside the package.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Non-capitalized identifiers&nbsp;<\/strong>are not exported.&nbsp;The lowercase indicates that the identifier is not exported and will only be accessed from within the same package.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So any struct which starts with a capital letter is exported to other packages.&nbsp; Similarly any struct field which starts with capital is exported otherwise not. Let\u2019s see an example that shows exporting and non-exporting of structs and struct fields. See&nbsp;<strong>model.go<\/strong>&nbsp;and <strong>test.go<\/strong> below. Both belong to the <strong>main<\/strong> package.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Structure<ul><li>Struct&nbsp;<strong>Person<\/strong>&nbsp;is exported<\/li><li>Struct&nbsp;<strong>company<\/strong>&nbsp;is non-exported<\/li><\/ul><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Structure\u2019s Field<ul><li><strong>Person<\/strong>&nbsp;struct field&nbsp;<strong>Name<\/strong>&nbsp;is exported<\/li><li><strong>Person<\/strong>&nbsp;struct field&nbsp;<strong>age<\/strong>&nbsp;is not exported but <strong>Name<\/strong> is exported<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>model.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\n\/\/Person struct\ntype Person struct {\n    Name string\n    age  int\n}\n\ntype company struct {\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s write a file <strong>test.go<\/strong> in same <strong>main<\/strong> package. See below.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>test.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\n\/\/Test function\nfunc Test() {\n    \/\/STRUCTURE IDENTIFIER\n    p := &Person{\n        Name: \"test\",\n        age:  21,\n    }\n    fmt.Println(p)\n    c := &company{}\n    fmt.Println(c)\n    \n    \/\/STRUCTURE'S FIELDS\n    fmt.Println(p.Name)\n    fmt.Println(p.age)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">On running this file, it is able to access all exported and un-exported fields in <strong>model.go<\/strong> as both lies in the same package <strong>main<\/strong>. There is no compilation error and it gives below output<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">&{test 21}\n&{}\ntest\n21<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s move the above file <strong>model.go<\/strong> to a different package named <strong>model. <\/strong>Now notice the output on running &#8216;go build&#8217;. It gives compilation errors. All the compilation error are because <strong>test.go<\/strong> in <strong>main<\/strong> package to not able to refer to un-exported fields of <strong>model.go<\/strong> in <strong>model<\/strong> package<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>model.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package model\n\n\/\/Person struct\ntype Person struct {\n\tName string\n\tage  int\n}\n\ntype company struct {\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>test.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n        \/\/This will path of your model package\n\t\"<somepath>\/model\"\n)\n\n\/\/Test function\nfunc main() {\n\t\/\/STRUCTURE IDENTIFIER\n\tp := &model.Person{\n\t\tName: \"test\",\n\t\tage:  21,\n\t}\n\tfmt.Println(p)\n\tc := &model.company{}\n\tfmt.Println(c)\n\n\t\/\/STRUCTURE'S FIELDS\n\tfmt.Println(p.Name)\n\tfmt.Println(p.age)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">cannot refer to unexported name model.company\np.age undefined (cannot refer to unexported field or method age)<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Struct_Equality\"><\/span><strong>Struct Equality<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The first thing to know before considering struct equality is weather if all struct fields types are comparable or not<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Some of the comparable types as defined by go specification are<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>boolean<\/li><li>numeric<\/li><li>string,<\/li><li>pointer<\/li><li>channel<\/li><li>interface types<\/li><li>structs &#8211; if all it&#8217;s field type is comparable<\/li><li>array &#8211; if the type of value of array element is comparable<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Some of the types which are not comparable as per go specification and which cannot be used as a key in a map are.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Slice<\/li><li>Map<\/li><li>Function<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So two struct will be equal if first all their field types are comparable and all the corresponding field values are equal. Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{name: \"Sam\", age: 31, salary: 2000}\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000}\n    if emp1 == emp2 {\n        fmt.Println(\"emp1 annd emp2 are equal\")\n    } else {\n        fmt.Println(\"emp1 annd emp2 are not equal\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">emp1 annd emp2 are equal<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If the struct field type are not comparable then there will be compilation error on checking struct equality using the == operator.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\ntype employee struct {\n    name        string\n    age         int\n    salary      int\n    departments []string\n}\nfunc main() {\n    emp1 := employee{name: \"Sam\", age: 31, salary: 2000, departments: []string{\"CS\"}}\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000, departments: []string{\"EC\"}}\n    if emp1 == emp2 {\n        fmt.Println(\"emp1 annd emp2 are equal\")\n    } else {\n        fmt.Println(\"emp1 annd emp2 are not equal\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Above program will raise compilation error as <strong>employee<\/strong> struct contains a field <strong>deparments<\/strong> which is a <strong>slice<\/strong> of <strong>string<\/strong>. <strong>slice<\/strong> is not a comparable type and hence the compilation error.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">invalid operation: emp1 == emp2 (struct containing []string cannot be compared)<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Struct_are_value_types\"><\/span><strong>Struct are value types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A struct is value type in go. So a struct variable name is not a pointer to the struct in fact it denotes the entire struct. A new copy of the struct will be created when<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A struct variable is assigned to another struct variable.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A struct variable is passed as an argument to a function.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see above point with another example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp1 Before: %v\\n\", emp1)\n\n    emp2 := emp1\n\n    emp2.name = \"John\"\n    fmt.Printf(\"Emp1 After assignment: %v\\n\", emp1)\n    fmt.Printf(\"Emp2: %v\\n\", emp2)\n\n    test(emp1)\n    fmt.Printf(\"Emp1 After Test Function Call: %v\\n\", emp1)\n}\n\nfunc test(emp employee) {\n    emp.name = \"Mike\"\n    fmt.Printf(\"Emp in Test function: %v\\n\", emp)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Emp1 Before: {Sam 31 2000}\nEmp1 After assignment: {Sam 31 2000}\nEmp2: {John 31 2000}\nEmp in Test function: {Mike 31 2000}\nEmp1 After Test Function Call: {Sam 31 2000}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above example,<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>we assigned the <strong>emp1<\/strong> to <strong>emp2<\/strong> and we then changed name&nbsp; <strong>emp2<\/strong> to have a different value.&nbsp; After that when we print <strong>emp1<\/strong>, we see that it hasn&#8217;t changed. This is because when we assign <strong>emp1<\/strong> to <strong>emp2<\/strong>, a copy is created and changing <strong>emp2<\/strong> doesn&#8217;t have any effect on <strong>emp1<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We passed <strong>emp1<\/strong> to the test function and then again changed its <strong>name<\/strong> field in the test function.&nbsp; After that when we print <strong>emp1<\/strong>, we see that it hasn&#8217;t changed. The reason is same, when <strong>emp1<\/strong> is passed as an argument to test function a copy of <strong>emp1<\/strong> is created.<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about struct in golang. In this article, we learned different ways of initializing a struct, pointer to struct, different ways of printing, about anonymous fields, etc. I hope you have liked this article. Please share the feedback\/improvements\/mistakes in the comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guid\">Array<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/pointer-golang\/\">Pointer<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the&nbsp; chapter 16 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;ArrayPrevious Tutorial&nbsp;\u2013 Pointer Now let\u2019s check&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[181,3,4],"class_list":["post-2244","post","type-post","status-publish","format-standard","hentry","category-tech","tag-complete-guide","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Struct in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Struct in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the&nbsp; chapter 16 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;ArrayPrevious Tutorial&nbsp;\u2013 Pointer Now let\u2019s check...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-14T09:01:20+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-09-16T12:43:01+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"15 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\",\"url\":\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\",\"name\":\"Struct in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-06-14T09:01:20+00:00\",\"dateModified\":\"2021-09-16T12:43:01+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Struct in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Struct in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/","og_locale":"en_US","og_type":"article","og_title":"Struct in Go (Golang) - Welcome To Golang By Example","og_description":"This is the&nbsp; chapter 16 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;ArrayPrevious Tutorial&nbsp;\u2013 Pointer Now let\u2019s check...","og_url":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-06-14T09:01:20+00:00","article_modified_time":"2021-09-16T12:43:01+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"15 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/","url":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/","name":"Struct in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-06-14T09:01:20+00:00","dateModified":"2021-09-16T12:43:01+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Struct in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-Ac","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2244","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2244"}],"version-history":[{"count":12,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2244\/revisions"}],"predecessor-version":[{"id":6332,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2244\/revisions\/6332"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2244"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2244"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2244"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}