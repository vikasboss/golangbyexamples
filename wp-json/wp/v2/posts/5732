{"id":5732,"date":"2021-05-27T00:00:58","date_gmt":"2021-05-26T18:30:58","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5732"},"modified":"2021-05-27T09:12:17","modified_gmt":"2021-05-27T03:42:17","slug":"dot-chracter-golang-regex","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/","title":{"rendered":"Golang Regex: Understanding dot &#8216;.&#8217; character"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#Overview\" title=\"Overview\">Overview<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#MatchCompile_Function\" title=\"MatchCompile Function\">MatchCompile Function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#Match_Method\" title=\"Match Method\">Match Method<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#Using_Dot_as_a_literal_character\" title=\"Using Dot as a literal character\">Using Dot as a literal character<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#Dot_character_inside_a_character_class\" title=\"Dot character inside a character class\">Dot character inside a character class<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Dot &#8216;.&#8217; character is one of the most commonly used metacharacters in the regular expression. It is used to match any character. It can also match a new line if a specific flag is added to the regular expression which we going to discuss later. By default, it doesn&#8217;t match a new line.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Before looking into the regex itself and usage of Dot &#8216;<strong>.&#8217;<\/strong> character, let&#8217;s look at some basic functions or methods provided by Go to do a regex match.<\/p>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"MatchCompile_Function\"><\/span><strong>MatchCompile Function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/regexp\/#MustCompile\">https:\/\/golang.org\/pkg\/regexp\/#MustCompile<\/a> . Below is the signature of the function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func MustCompile(str string) *Regexp<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We first compile the given regex string using the <strong>MustCompile<\/strong> function. This function panics if the given regex is not valid. After it can successfully compile the given regex, it returns the instance of <strong>regexp<\/strong> struct.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\"some_regular_expression\")<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Match_Method\"><\/span><strong>Match Method<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/regexp\/#Regexp.Match\">https:\/\/golang.org\/pkg\/regexp\/#Regexp.Match<\/a> <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the signature of the method<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (re *Regexp) Match(b []byte) bool<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We can call the <strong>Match<\/strong> method on the <strong>regexp<\/strong> struct instance to match the given pattern with the regex. It returns true if the regex matches with the input string otherwise false. We need to pass in bytes of the input string to this method.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">match := sampleRegexp.Match([]byte(\"some_string\"))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We will see these two functions in action later in the examples.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s see a simple program for Dot &#8216;.&#8217; character<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\".\")\n\n\tmatch := sampleRegexp.Match([]byte(\"a\"))\n\tfmt.Printf(\"For a: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"b\"))\n\tfmt.Printf(\"For b: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"ab\"))\n\tfmt.Printf(\"For ab: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"\"))\n\tfmt.Printf(\"For empty string: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For a: true\nFor b: true\nFor ab: true\nFor empty string: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a simple regex containing only one dot character.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\".\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches below characters and string.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\nab<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches <strong>ab <\/strong>because by default the regex doesn&#8217;t do the match the full string unless we use the anchor characters (Caret and Dollar character). That is why it matches the first character &#8216;a&#8217; in &#8216;ab&#8217; and reports a match.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It doesn&#8217;t match an empty string.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see another example where we have two dots in the regex.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"..\")\n\tmatch := sampleRegexp.Match([]byte(\"ab\"))\n\tfmt.Printf(\"For ab: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"ba\"))\n\tfmt.Printf(\"For ba: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"a\"))\n\tfmt.Printf(\"For a: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For ab: true\nFor ba: true\nFor abc: true\nFor a: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a simple regex containing two dots.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\"..\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will match any given string which has at least two characters as a substring.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">That is why it gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">ab\nba\nabc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and doesn&#8217;t give a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The dot <strong>&#8216;.&#8217;<\/strong> as we mentioned before as well doesn&#8217;t match the new line. But the default behavior can be changed by adding a set of flags to the beginning of the regular expression. The flag we need to add to the beginning of regex is:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(?s)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\".\")\n\n\tmatch := sampleRegexp.Match([]byte(\"\\n\"))\n\tfmt.Printf(\"For \\\\n: %t\\n\", match)\n\n\tsampleRegexp = regexp.MustCompile(\"(?s).\")\n\n\tmatch = sampleRegexp.Match([]byte(\"\\n\"))\n\tfmt.Printf(\"For \\\\n: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For \\n: false\nFor \\n: true<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\".\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp = regexp.MustCompile(\"(?s).\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the second regex, we have added the additional flag. That is why it gives a match for a new line while the first regex without a flag doesn&#8217;t give a match.&nbsp;<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_Dot_as_a_literal_character\"><\/span><strong>Using Dot as a literal character<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">If you want to use <strong>Dot &#8216;.&#8217;<\/strong> as a literal character, we need to escape it with a backslash. Once escaped it will match a literal dot character.&nbsp; For example, if we want to match the literal below string or text<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a.b<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then the regex for the same will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\\.b<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here is the program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"a\\\\.b\")\n\n\tmatch := sampleRegexp.Match([]byte(\"a.b\"))\n\n\tfmt.Printf(\"For a.b string: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For a.b string: true<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Dot_character_inside_a_character_class\"><\/span><strong>Dot character inside a character class<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Dot or&nbsp;<strong>\u2018.\u2019<\/strong>&nbsp;is treated as a literal character inside the square brackets or character class. It doesn\u2019t need to be escaped inside that. Let\u2019s see a working program for the same as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"[.]\")\n\tmatch := sampleRegexp.Match([]byte(\".\"))\n\n\tfmt.Println(match)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">true<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Also, check out our Golang advance tutorial Series \u2013\u00a0Golang Advance Tutorial<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewMatchCompile FunctionMatch MethodUsing Dot as a literal characterDot character inside a character class Overview Dot &#8216;.&#8217; character is one of the most commonly used metacharacters in the regular expression&#8230;.<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-5732","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang Regex: Understanding dot &#039;.&#039; character - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"In this tutorial we will look into each details of using dot character in golang regex.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang Regex: Understanding dot &#039;.&#039; character - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"In this tutorial we will look into each details of using dot character in golang regex.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-05-26T18:30:58+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-27T03:42:17+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/\",\"url\":\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/\",\"name\":\"Golang Regex: Understanding dot '.' character - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-05-26T18:30:58+00:00\",\"dateModified\":\"2021-05-27T03:42:17+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"In this tutorial we will look into each details of using dot character in golang regex.\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang Regex: Understanding dot &#8216;.&#8217; character\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang Regex: Understanding dot '.' character - Welcome To Golang By Example","description":"In this tutorial we will look into each details of using dot character in golang regex.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/","og_locale":"en_US","og_type":"article","og_title":"Golang Regex: Understanding dot '.' character - Welcome To Golang By Example","og_description":"In this tutorial we will look into each details of using dot character in golang regex.","og_url":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-05-26T18:30:58+00:00","article_modified_time":"2021-05-27T03:42:17+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/","url":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/","name":"Golang Regex: Understanding dot '.' character - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-05-26T18:30:58+00:00","dateModified":"2021-05-27T03:42:17+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"In this tutorial we will look into each details of using dot character in golang regex.","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/dot-chracter-golang-regex\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang Regex: Understanding dot &#8216;.&#8217; character"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1us","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5732","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5732"}],"version-history":[{"count":5,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5732\/revisions"}],"predecessor-version":[{"id":6078,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5732\/revisions\/6078"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5732"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5732"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5732"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}