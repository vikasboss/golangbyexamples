{"id":6504,"date":"2022-01-12T20:03:04","date_gmt":"2022-01-12T14:33:04","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6504"},"modified":"2022-01-12T20:17:21","modified_gmt":"2022-01-12T14:47:21","slug":"tic-tac-toe-program-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/","title":{"rendered":"Tic Tac Toe Complete Working Program in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#Program\" title=\"Program\">Program<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#Full_Working_Code\" title=\"Full Working Code:\">Full Working Code:<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s first understand what is Tic Tac Toe with an example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>There is an n*n board and each block in the board can be marked with either a <strong>cross<\/strong> or a <strong>circle <\/strong>only if the block is empty<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Max<strong> <\/strong>two players play the game at a time with each taking turn.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The first player marks a <strong>cross<\/strong> at any block in the board in its turn.&nbsp; While the second player marks a <strong>circle<\/strong> at any block in the board in its turn.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The objective is to have either an entire row or an entire column or an entire diagonal with any of the one symbol either <strong>cross<\/strong> or <strong>circle<\/strong>.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Both players will try to stop the other player from achieving this objective. Whosoever achieves it first will win.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If all blocks in the board are full and none of the players have not been able to mark the entire row, column, or diagonal with its symbol then the game results in a draw.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>No more moves are allowed after one player wins the game.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand this game with an example. Assume a 3*3 grid. Dot (&#8216;.&#8217;) represents an empty block<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Player 1 Move with Symbol * at Position X:1 Y:1\n...\n.*.\n...\n\nPlayer 2 Move with Symbol o at Position X:1 Y:2\n...\n.*o\n...\n\nPlayer 1 Move with Symbol * at Position X:2 Y:0\n...\n.*o\n*..\n\nPlayer 2 Move with Symbol o at Position X:0 Y:2\n..o\n.*o\n*..\n\nPlayer 1 Move with Symbol * at Position X:2 Y:2\n..o\n.*o\n*.*\n\nPlayer 2 Move with Symbol o at Position X:0 Y:0\no.o\n.*o\n*.*\n\nPlayer 1 Move with Symbol * at Position X:2 Y:1\no.o\n.*o\n***\n\nFirst Player Win\no.o\n.*o\n***<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above game First Player Win because the third row is all occupied with symbol cross &#8211; <strong>&#8216;*&#8217;<\/strong><\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Here is the full working code<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>symbol.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype Symbol uint8\n\nconst (\n    Cross Symbol = iota\n    Circle\n    Dot\n)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>iPlayer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype iPlayer interface {\n    getSymbol() Symbol\n    getNextMove() (int, int, error)\n    getID() int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>humanPlayer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nvar (\n\tMovesPlayer1 = [4][2]int{{1, 1}, {2, 0}, {2, 2}, {2, 1}}\n\tMovesPlayer2 = [4][2]int{{1, 2}, {0, 2}, {0, 0}, {0, 0}}\n)\n\ntype humanPlayer struct {\n\tsymbol Symbol\n\tindex  int\n\tid     int\n}\n\nfunc (h *humanPlayer) getSymbol() Symbol {\n\treturn h.symbol\n}\n\nfunc (h *humanPlayer) getNextMove() (int, int, error) {\n\tif h.symbol == Cross {\n\t\th.index = h.index + 1\n\t\treturn MovesPlayer1[h.index-1][0], MovesPlayer1[h.index-1][1], nil\n\t} else if h.symbol == Circle {\n\t\th.index = h.index + 1\n\t\treturn MovesPlayer2[h.index-1][0], MovesPlayer2[h.index-1][1], nil\n\t}\n\treturn 0, 0, fmt.Errorf(\"Invalid Symbol\")\n}\n\nfunc (h *humanPlayer) getID() int {\n\treturn h.id\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>computerPlayer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype computerPlayer struct {\n\tsymbol Symbol\n\tid     int\n}\n\nfunc (c *computerPlayer) getSymbol() Symbol {\n\treturn c.symbol\n}\n\nfunc (c *computerPlayer) getNextMove() (int, int, error) {\n\t\/\/To be implemented\n\treturn 0, 0, nil\n}\n\nfunc (c *computerPlayer) getID() int {\n\treturn c.id\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>gameStatus.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype GameStatus uint8\n\nconst (\n\tGameInProgress GameStatus = iota\n\tGameDraw\n\tFirstPlayerWin\n\tSecondPlayerWin\n)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>board.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype board struct {\n\tsquare    [][]Symbol\n\tdimension int\n}\n\nfunc (b *board) printBoard() {\n\tfor i := 0; i < b.dimension; i++ {\n\t\tfor j := 0; j < b.dimension; j++ {\n\t\t\tif b.square[i][j] == Dot {\n\t\t\t\tfmt.Print(\".\")\n\t\t\t} else if b.square[i][j] == Cross {\n\t\t\t\tfmt.Print(\"*\")\n\t\t\t} else {\n\t\t\t\tfmt.Print(\"o\")\n\t\t\t}\n\n\t\t}\n\t\tfmt.Println(\"\")\n\t}\n}\n\nfunc (b *board) markSymbol(i, j int, symbol Symbol) (bool, Symbol, error) {\n\tif i > b.dimension || j > b.dimension {\n\t\treturn false, Dot, fmt.Errorf(\"index input is greater than dimension\")\n\t}\n\tif b.square[i][j] != Dot {\n\t\treturn false, Dot, fmt.Errorf(\"input square already marked\")\n\t}\n\tif symbol != Cross && symbol != Circle {\n\t\treturn false, Dot, fmt.Errorf(\"incorrect Symbol\")\n\t}\n\tb.square[i][j] = symbol\n\twin := b.checkWin(i, j, symbol)\n\n\treturn win, symbol, nil\n}\n\nfunc (b *board) checkWin(i, j int, symbol Symbol) bool {\n\t\/\/Check Row\n\trowMatch := true\n\tfor k := 0; k < b.dimension; k++ {\n\t\tif b.square[i][k] != symbol {\n\t\t\trowMatch = false\n\t\t}\n\t}\n\n\tif rowMatch {\n\t\treturn rowMatch\n\t}\n\n\t\/\/Check Row\n\tcolumnMatch := true\n\tfor k := 0; k < b.dimension; k++ {\n\t\tif b.square[k][j] != symbol {\n\t\t\tcolumnMatch = false\n\t\t}\n\t}\n\n\tif columnMatch {\n\t\treturn columnMatch\n\t}\n\n\t\/\/Check diagonal\n\tdiagonalMatch := false\n\tif i == j {\n\t\tdiagonalMatch = true\n\t\tfor k := 0; k < b.dimension; k++ {\n\t\t\tif b.square[k][k] != symbol {\n\t\t\t\tdiagonalMatch = false\n\t\t\t}\n\t\t}\n\t}\n\n\treturn diagonalMatch\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>game.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype game struct {\n    board           *board\n    firstPlayer     iPlayer\n    secondPlayer    iPlayer\n    firstPlayerTurn bool\n    moveIndex       int\n    gameStatus      GameStatus\n}\n\nfunc initGame(b *board, p1, p2 iPlayer) *game {\n    game := &game{\n        board:           b,\n        firstPlayer:     p1,\n        secondPlayer:    p2,\n        firstPlayerTurn: true,\n        gameStatus:      GameInProgress,\n    }\n    return game\n}\n\nfunc (g *game) play() error {\n    var win bool\n    var symbol Symbol\n    for {\n        if g.firstPlayerTurn {\n            x, y, err := g.firstPlayer.getNextMove()\n            if err != nil {\n                return err\n            }\n            win, symbol, err = g.board.markSymbol(x, y, g.firstPlayer.getSymbol())\n            if err != nil {\n                return err\n            }\n            g.firstPlayerTurn = false\n            g.printMove(g.firstPlayer, x, y)\n        } else {\n            x, y, err := g.secondPlayer.getNextMove()\n            if err != nil {\n                return err\n            }\n            win, symbol, err = g.board.markSymbol(x, y, g.secondPlayer.getSymbol())\n            if err != nil {\n                return err\n            }\n            g.firstPlayerTurn = true\n            g.printMove(g.secondPlayer, x, y)\n        }\n        g.moveIndex = g.moveIndex + 1\n        g.setGameStatus(win, symbol)\n        if g.gameStatus != GameInProgress {\n            break\n        }\n    }\n    return nil\n}\n\nfunc (g *game) setGameStatus(win bool, symbol Symbol) {\n    if win {\n        if g.firstPlayer.getSymbol() == symbol {\n            g.gameStatus = FirstPlayerWin\n            return\n        } else if g.secondPlayer.getSymbol() == symbol {\n            g.gameStatus = SecondPlayerWin\n            return\n        }\n    }\n    if g.moveIndex == g.board.dimension*g.board.dimension {\n        g.gameStatus = GameDraw\n        return\n    }\n    g.gameStatus = GameInProgress\n}\n\nfunc (g *game) printMove(player iPlayer, x, y int) {\n\tsymbolString := \"\"\n\tsymbol := player.getSymbol()\n\tif symbol == Cross {\n\t\tsymbolString = \"*\"\n\t} else if symbol == Circle {\n\t\tsymbolString = \"o\"\n\t}\n\tfmt.Printf(\"Player %d Move with Symbol %s at Position X:%d Y:%d\\n\", player.getID(), symbolString, x, y)\n\tg.board.printBoard()\n\tfmt.Println(\"\")\n}\n\nfunc (g *game) printResult() {\n    switch g.gameStatus {\n    case GameInProgress:\n        fmt.Println(\"Game in Between\")\n    case GameDraw:\n        fmt.Println(\"Game Drawn\")\n    case FirstPlayerWin:\n        fmt.Println(\"First Player Win\")\n    case SecondPlayerWin:\n        fmt.Println(\"Second Player Win\")\n    default:\n        fmt.Println(\"Invalid Game Status\")\n    }\n    g.board.printBoard()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have fixed the moves for both the player in the <strong>humanPlayer.go<\/strong> file. Here is the output based upon those moves.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Player 1 Move with Symbol * at Position X:1 Y:1\n...\n.*.\n...\n\nPlayer 2 Move with Symbol o at Position X:1 Y:2\n...\n.*o\n...\n\nPlayer 1 Move with Symbol * at Position X:2 Y:0\n...\n.*o\n*..\n\nPlayer 2 Move with Symbol o at Position X:0 Y:2\n..o\n.*o\n*..\n\nPlayer 1 Move with Symbol * at Position X:2 Y:2\n..o\n.*o\n*.*\n\nPlayer 2 Move with Symbol o at Position X:0 Y:0\no.o\n.*o\n*.*\n\nPlayer 1 Move with Symbol * at Position X:2 Y:1\no.o\n.*o\n***\n\nFirst Player Win\no.o\n.*o\n***<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Here is the full working code in one file<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype Symbol uint8\n\nconst (\n\tCross Symbol = iota\n\tCircle\n\tDot\n)\n\ntype GameStatus uint8\n\nconst (\n\tGameInProgress GameStatus = iota\n\tGameDraw\n\tFirstPlayerWin\n\tSecondPlayerWin\n)\n\ntype iPlayer interface {\n\tgetSymbol() Symbol\n\tgetNextMove() (int, int, error)\n\tgetID() int\n}\n\nvar (\n\tMovesPlayer1 = [4][2]int{{1, 1}, {2, 0}, {2, 2}, {2, 1}}\n\tMovesPlayer2 = [4][2]int{{1, 2}, {0, 2}, {0, 0}, {0, 0}}\n)\n\ntype humanPlayer struct {\n\tsymbol Symbol\n\tindex  int\n\tid     int\n}\n\nfunc (h *humanPlayer) getSymbol() Symbol {\n\treturn h.symbol\n}\n\nfunc (h *humanPlayer) getNextMove() (int, int, error) {\n\tif h.symbol == Cross {\n\t\th.index = h.index + 1\n\t\treturn MovesPlayer1[h.index-1][0], MovesPlayer1[h.index-1][1], nil\n\t} else if h.symbol == Circle {\n\t\th.index = h.index + 1\n\t\treturn MovesPlayer2[h.index-1][0], MovesPlayer2[h.index-1][1], nil\n\t}\n\treturn 0, 0, fmt.Errorf(\"Invalid Symbol\")\n}\n\nfunc (h *humanPlayer) getID() int {\n\treturn h.id\n}\n\ntype computerPlayer struct {\n\tsymbol Symbol\n\tid     int\n}\n\nfunc (c *computerPlayer) getSymbol() Symbol {\n\treturn c.symbol\n}\n\nfunc (c *computerPlayer) getNextMove() (int, int, error) {\n\t\/\/To be implemented\n\treturn 0, 0, nil\n}\n\nfunc (c *computerPlayer) getID() int {\n\treturn c.id\n}\n\ntype board struct {\n\tsquare    [][]Symbol\n\tdimension int\n}\n\nfunc (b *board) printBoard() {\n\tfor i := 0; i < b.dimension; i++ {\n\t\tfor j := 0; j < b.dimension; j++ {\n\t\t\tif b.square[i][j] == Dot {\n\t\t\t\tfmt.Print(\".\")\n\t\t\t} else if b.square[i][j] == Cross {\n\t\t\t\tfmt.Print(\"*\")\n\t\t\t} else {\n\t\t\t\tfmt.Print(\"o\")\n\t\t\t}\n\n\t\t}\n\t\tfmt.Println(\"\")\n\t}\n}\n\nfunc (b *board) markSymbol(i, j int, symbol Symbol) (bool, Symbol, error) {\n\tif i > b.dimension || j > b.dimension {\n\t\treturn false, Dot, fmt.Errorf(\"index input is greater than dimension\")\n\t}\n\tif b.square[i][j] != Dot {\n\t\treturn false, Dot, fmt.Errorf(\"input square already marked\")\n\t}\n\tif symbol != Cross && symbol != Circle {\n\t\treturn false, Dot, fmt.Errorf(\"incorrect Symbol\")\n\t}\n\tb.square[i][j] = symbol\n\twin := b.checkWin(i, j, symbol)\n\n\treturn win, symbol, nil\n}\n\nfunc (b *board) checkWin(i, j int, symbol Symbol) bool {\n\t\/\/Check Row\n\trowMatch := true\n\tfor k := 0; k < b.dimension; k++ {\n\t\tif b.square[i][k] != symbol {\n\t\t\trowMatch = false\n\t\t}\n\t}\n\n\tif rowMatch {\n\t\treturn rowMatch\n\t}\n\n\t\/\/Check Row\n\tcolumnMatch := true\n\tfor k := 0; k < b.dimension; k++ {\n\t\tif b.square[k][j] != symbol {\n\t\t\tcolumnMatch = false\n\t\t}\n\t}\n\n\tif columnMatch {\n\t\treturn columnMatch\n\t}\n\n\t\/\/Check diagonal\n\tdiagonalMatch := false\n\tif i == j {\n\t\tdiagonalMatch = true\n\t\tfor k := 0; k < b.dimension; k++ {\n\t\t\tif b.square[k][k] != symbol {\n\t\t\t\tdiagonalMatch = false\n\t\t\t}\n\t\t}\n\t}\n\n\treturn diagonalMatch\n\n}\n\ntype game struct {\n\tboard           *board\n\tfirstPlayer     iPlayer\n\tsecondPlayer    iPlayer\n\tfirstPlayerTurn bool\n\tmoveIndex       int\n\tgameStatus      GameStatus\n}\n\nfunc initGame(b *board, p1, p2 iPlayer) *game {\n\tgame := &#038;game{\n\t\tboard:           b,\n\t\tfirstPlayer:     p1,\n\t\tsecondPlayer:    p2,\n\t\tfirstPlayerTurn: true,\n\t\tgameStatus:      GameInProgress,\n\t}\n\treturn game\n}\n\nfunc (g *game) play() error {\n\tvar win bool\n\tvar symbol Symbol\n\tfor {\n\t\tif g.firstPlayerTurn {\n\t\t\tx, y, err := g.firstPlayer.getNextMove()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\twin, symbol, err = g.board.markSymbol(x, y, g.firstPlayer.getSymbol())\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tg.firstPlayerTurn = false\n\t\t\tg.printMove(g.firstPlayer, x, y)\n\t\t} else {\n\t\t\tx, y, err := g.secondPlayer.getNextMove()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\twin, symbol, err = g.board.markSymbol(x, y, g.secondPlayer.getSymbol())\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tg.firstPlayerTurn = true\n\t\t\tg.printMove(g.secondPlayer, x, y)\n\t\t}\n\t\tg.moveIndex = g.moveIndex + 1\n\n\t\tg.setGameStatus(win, symbol)\n\t\tif g.gameStatus != GameInProgress {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (g *game) setGameStatus(win bool, symbol Symbol) {\n\tif win {\n\t\tif g.firstPlayer.getSymbol() == symbol {\n\t\t\tg.gameStatus = FirstPlayerWin\n\t\t\treturn\n\t\t} else if g.secondPlayer.getSymbol() == symbol {\n\t\t\tg.gameStatus = SecondPlayerWin\n\t\t\treturn\n\t\t}\n\t}\n\tif g.moveIndex == g.board.dimension*g.board.dimension {\n\t\tg.gameStatus = GameDraw\n\t\treturn\n\t}\n\tg.gameStatus = GameInProgress\n}\n\nfunc (g *game) printMove(player iPlayer, x, y int) {\n\tsymbolString := \"\"\n\tsymbol := player.getSymbol()\n\tif symbol == Cross {\n\t\tsymbolString = \"*\"\n\t} else if symbol == Circle {\n\t\tsymbolString = \"o\"\n\t}\n\tfmt.Printf(\"Player %d Move with Symbol %s at Position X:%d Y:%d\\n\", player.getID(), symbolString, x, y)\n\tg.board.printBoard()\n\tfmt.Println(\"\")\n}\n\nfunc (g *game) printResult() {\n\tswitch g.gameStatus {\n\tcase GameInProgress:\n\t\tfmt.Println(\"Game in Between\")\n\tcase GameDraw:\n\t\tfmt.Println(\"Game Drawn\")\n\tcase FirstPlayerWin:\n\t\tfmt.Println(\"First Player Win\")\n\tcase SecondPlayerWin:\n\t\tfmt.Println(\"Second Player Win\")\n\tdefault:\n\t\tfmt.Println(\"Invalid Game Status\")\n\t}\n\tg.board.printBoard()\n}\n\nfunc main() {\n\n\tboard := &#038;board{\n\t\tsquare:    [][]Symbol{{Dot, Dot, Dot}, {Dot, Dot, Dot}, {Dot, Dot, Dot}},\n\t\tdimension: 3,\n\t}\n\n\tplayer1 := &#038;humanPlayer{\n\t\tsymbol: Cross,\n\t\tid:     1,\n\t}\n\n\tplayer2 := &#038;humanPlayer{\n\t\tsymbol: Circle,\n\t\tid:     2,\n\t}\n\n\tgame := initGame(board, player1, player2)\n\tgame.play()\n\tgame.printResult()\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the above program as well, we have fixed the moves for both the player in the <strong>humanPlayer class<\/strong>. Here is the output based upon those moves.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Player 1 Move with Symbol * at Position X:1 Y:1\n...\n.*.\n...\n\nPlayer 2 Move with Symbol o at Position X:1 Y:2\n...\n.*o\n...\n\nPlayer 1 Move with Symbol * at Position X:2 Y:0\n...\n.*o\n*..\n\nPlayer 2 Move with Symbol o at Position X:0 Y:2\n..o\n.*o\n*..\n\nPlayer 1 Move with Symbol * at Position X:2 Y:2\n..o\n.*o\n*.*\n\nPlayer 2 Move with Symbol o at Position X:0 Y:0\no.o\n.*o\n*.*\n\nPlayer 1 Move with Symbol * at Position X:2 Y:1\no.o\n.*o\n***\n\nFirst Player Win\no.o\n.*o\n***<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Note: <\/strong>Check out our Golang Advanced Tutorial. The tutorials in this series are elaborative and we have tried to cover all concepts with examples. This tutorial is for those who are looking to gain expertise and a solid understanding of golang - <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also if you are interested in understanding how all design patterns can be implemented in Golang. If yes, then this post is for you -<a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns Golang<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgramFull Working Code: Overview Let&#8217;s first understand what is Tic Tac Toe with an example There is an n*n board and each block in the board can be marked&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6504","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Tic Tac Toe Complete Working Program in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Tic Tac Toe Complete Working Program in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgramFull Working Code: Overview Let&#8217;s first understand what is Tic Tac Toe with an example There is an n*n board and each block in the board can be marked...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2022-01-12T14:33:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-12T14:47:21+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/\",\"name\":\"Tic Tac Toe Complete Working Program in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2022-01-12T14:33:04+00:00\",\"dateModified\":\"2022-01-12T14:47:21+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Tic Tac Toe Complete Working Program in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Tic Tac Toe Complete Working Program in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/","og_locale":"en_US","og_type":"article","og_title":"Tic Tac Toe Complete Working Program in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgramFull Working Code: Overview Let&#8217;s first understand what is Tic Tac Toe with an example There is an n*n board and each block in the board can be marked...","og_url":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2022-01-12T14:33:04+00:00","article_modified_time":"2022-01-12T14:47:21+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/","url":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/","name":"Tic Tac Toe Complete Working Program in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2022-01-12T14:33:04+00:00","dateModified":"2022-01-12T14:47:21+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/tic-tac-toe-program-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Tic Tac Toe Complete Working Program in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1GU","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6504","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6504"}],"version-history":[{"count":1,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6504\/revisions"}],"predecessor-version":[{"id":6505,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6504\/revisions\/6505"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6504"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6504"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6504"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}