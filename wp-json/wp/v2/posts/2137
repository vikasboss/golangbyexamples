{"id":2137,"date":"2020-05-14T01:22:44","date_gmt":"2020-05-13T19:52:44","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2137"},"modified":"2021-01-11T22:47:18","modified_gmt":"2021-01-11T17:17:18","slug":"understanding-array-golang-complete-guide","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/","title":{"rendered":"Understanding Array in Go (Golang) &#8211; Complete Guide"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the&nbsp; chapter 17 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/\">Slice<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\">Struct<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Overview\" title=\"Overview\">Overview<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Definition\" title=\"Definition\">Definition<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Declaration_of_an_array\" title=\"Declaration of an array\">Declaration of an array<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Accessing_array_elements\" title=\"Accessing array elements\">Accessing array elements<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Arrays_are_value_in_go\" title=\"Arrays are value in go\">Arrays are value in go<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Different_ways_of_iterating_an_array\" title=\"Different ways of iterating an array\">Different ways of iterating an array<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#MultiDimensional_Arrays\" title=\"MultiDimensional Arrays\">MultiDimensional Arrays<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Similar to any other programming language, golang also has <strong>array<\/strong> data structure. But in go, <strong>arrays<\/strong> behave little differently than other languages and also we have something called slice in golang which is like a reference to an array. In this article, we will study only array.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Definition\"><\/span><strong>Definition<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">An array is a contiguous collection of elements of the same type. It is an ordered sequence of elements stored contiguously in memory<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Here is the format for the declaration of an array<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample := [size_of_array]{type}{a1, a2... an}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>size_of_array &#8211; number of elements in the array<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>&lt;type&gt; is type of each element in the array<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>a1, a2 &#8230; an are the actual elements.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In golang, the size of the array is part of its type. So &nbsp;This means that two arrays that have a different number of elements are of two different types and one cannot be assigned to another.  Below error will be raised in case we try to assign two arrays of different length<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">cannot use sample1 (type [1]int) as type [2]int in assignment<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The code is:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample1 := [1]int{1}\nsample2 := [2]int{1,2}\n\nsample2 = sample1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">For the same reason the length of array is fixed during create and cannot be changed later.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Declaration_of_an_array\"><\/span><strong>Declaration of an array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Both number of elements and actual elements are optional in the array declaration.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In below example, we see 4 ways of declaring of an array<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Specifying both the length of the array and actual elements. Eg.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[2]int{1, 2}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only length &#8211; In this case all the actual elements are filled up with default value zero of that type. Eg<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[2]int{}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only actual elements &#8211; In this case, the length of array will be equal to the number of actual elements. The symbol<strong> &#8216;&#8230;&#8217; <\/strong>needs to be used within square brackets like this <strong>[&#8230;]<\/strong> when not specifying the length. The symbol is an instruction to the compiler to calculate the length.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[...]int{2, 3}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Without length and actual elements &#8211; an empty array will be created in this case. Similar to above the symbol <strong>&#8216;&#8230;&#8217; <\/strong>also needs to be used in this case as well.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[...]int{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a code example illustrating above points. Also please keep in mind that the builtin function <strong>len() <\/strong>can be used to calculate the length of an array. In below program we are using <strong>len()<\/strong> function to calculate the length of the array.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Both number of elements and actual elements\n    sample1 := [2]int{1, 2}\n    fmt.Printf(\"Sample1: Len: %d, %v\\n\", len(sample1), sample1)\n\n    \/\/Only actual elements\n    sample2 := [...]int{2, 3}\n    fmt.Printf(\"Sample2: Len: %d, %v\\n\", len(sample2), sample2)\n\n    \/\/Only number of elements\n    sample3 := [2]int{}\n    fmt.Printf(\"Sample3: Len: %d, %v\\n\", len(sample3), sample3)\n\n    \/\/Without both number of elements and actual elements\n    sample4 := [...]int{}\n    fmt.Printf(\"Sample4: Len: %d, %v\\n\", len(sample4), sample4)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sample1: Len: 2, [1 2]\nSample2: Len: 2, [2 3]\nSample3: Len: 2, [0 0]\nSample4: Len: 0, []<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in the above example that for <strong>sample3 <\/strong>variable the actual elements are filled up with the default value of int which is 0.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is also ok if the actual elements specified are less than the length of the array. The rest of the elements are filled up with the default value of the type specified. See the below example. The length of the array specified is 4 while only 2 actual elements are declared. Hence the remaining two elements are assigned value 0 which is the default zero value of an <strong>int<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [4]int{5, 8}\n    fmt.Printf(\"Sample: Len: %d, %v\\n\", len(sample), sample)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sample: Len: 4, [5 8 0 0]<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Accessing_array_elements\"><\/span><strong>Accessing array elements<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Since array element are stored in contiguous manner, we can access an array element using an index. Similarly individual array elements can also be assigned a value using index. Accessing out of bound index will cause a compilation error. See below examples illustrating these points. The first index position will be <strong>zero<\/strong> and last will <strong>(length_of_array-1)<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2]string{\"aa\", \"bb\"}\n\n    fmt.Println(sample[0])\n    fmt.Println(sample[1])\n\n    sample[0] = \"xx\"\n    fmt.Println(sample)\n    \/\/sample[3] = \"yy\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">aa\nbb\n[xx bb]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">On uncommenting the below line<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample[3] = \"yy\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">, it will give compilation error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">invalid array index 3 (out of bounds for 2-element array)<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Arrays_are_value_in_go\"><\/span><strong>Arrays are value in go<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Array are value type in go. So an array variable name is not a pointer to the first element in fact it denotes the entire array. A copy of the array will be created when<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>An array variable is assigned to another array variable.<\/li><li>An array variable is passed as an argument to a function.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see above point with another example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample1 := [2]string{\"a\", \"b\"}\n    fmt.Printf(\"Sample1 Before: %v\\n\", sample1)\n    sample2 := sample1\n    sample2[0] = \"c\"\n    fmt.Printf(\"Sample1 After assignment: %v\\n\", sample1)\n    fmt.Printf(\"Sample2: %v\\n\", sample2)\n    test(sample1)\n    fmt.Printf(\"Sample1 After Test Function Call: %v\\n\", sample1)\n}\nfunc test(sample [2]string) {\n    sample[0] = \"d\"\n    fmt.Printf(\"Sample in Test function: %v\\n\", sample)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Sample1 Before: [a b]\nSample1 After assignment: [a b]\nSample2: \nSample in Test function: [d b]\nSample1 After Test Function Call: [a b]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above example,<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>we assigned the <strong>sample1<\/strong> to <strong>sample2<\/strong> and we then changed 0th index at <strong>sample2<\/strong> to have a different value.&nbsp; After that when we print <strong>sample1<\/strong>, we see that it hasn&#8217;t changed. This is because when we assign <strong>sample1<\/strong> to <strong>sample2<\/strong>, a copy is created and changing <strong>sample2<\/strong> doesn&#8217;t have any effect on <strong>sample1<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We passed <strong>sample1<\/strong> to the test function and then again changed its value in the test function at 0th index.&nbsp; After that when we print <strong>sample1<\/strong>, we see that it hasn&#8217;t changed. The reason is same, when <strong>sample1<\/strong> is passed as an argument to test function a copy of <strong>sample1<\/strong> is created.<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Different_ways_of_iterating_an_array\"><\/span><strong>Different ways of iterating an array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">An array can be iterated using:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using for loop<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using for-range loop<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a code example for both<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    letters := [3]string{\"a\", \"b\", \"c\"}\n    \/\/Using for loop\n    fmt.Println(\"Using for loop\")\n    len := len(letters)\n    for i := 0; i < len; i++ {\n        fmt.Println(letters[i])\n    }\n    \/\/Using for-range operator\n    fmt.Println(\"\\nUsing for-range loop\")\n    for i, letter := range letters {\n        fmt.Printf(\"%d %s\\n\", i, letter)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Using for loop\na\nb\nc\n\nUsing for-range loop\n0 a\n1 b\n2 c<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"MultiDimensional_Arrays\"><\/span><strong>MultiDimensional Arrays<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for declaring a two dimensional array<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample := [x][y]{type}{{a11, a12 .. a1y},\n                       {a21, a22 .. a2y},\n                       {.. },\n                       {ax1, ax2 .. axy}}     <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">where<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>x denotes the number of rows<\/li><li>y denotes the number of columns<\/li><li>aij denotes an element present at i row and j column<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The same idea can be extended to three dimensions, four dimensions, and so on. All the rules we discussed above also apply to multidimensional arrays too.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let's see a code example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    fmt.Println(\"First Run\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n\n    sample[0][0] = 6\n    sample[1][2] = 1\n    fmt.Println(\"\\nSecond Run\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">First Run\n1\n2\n3\n4\n5\n6\n\nSecond Run\n6\n2\n3\n4\n5\n1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above example we access the element of two dimensional array using index for both first and second dimension<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample[0][0] = 6<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also notice how we are traversing the two dimensional array. We need to use nested range . The first range traverses the arrays of array. The second range traverses the individual array after that.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about array in Golang. Hope you have liked this article. Please share feedback\/improvements\/mistakes in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/\">Slice<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/struct-in-golang-complete-guide\/\">Struct<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the&nbsp; chapter 17 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;SlicePrevious Tutorial&nbsp;\u2013 Struct Now let\u2019s check&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[45,181,3,4],"class_list":["post-2137","post","type-post","status-publish","format-standard","hentry","category-tech","tag-array","tag-complete-guide","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understanding Array in Go (Golang) - Complete Guide - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understanding Array in Go (Golang) - Complete Guide - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the&nbsp; chapter 17 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;SlicePrevious Tutorial&nbsp;\u2013 Struct Now let\u2019s check...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-05-13T19:52:44+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-01-11T17:17:18+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/\",\"url\":\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/\",\"name\":\"Understanding Array in Go (Golang) - Complete Guide - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-05-13T19:52:44+00:00\",\"dateModified\":\"2021-01-11T17:17:18+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understanding Array in Go (Golang) &#8211; Complete Guide\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understanding Array in Go (Golang) - Complete Guide - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/","og_locale":"en_US","og_type":"article","og_title":"Understanding Array in Go (Golang) - Complete Guide - Welcome To Golang By Example","og_description":"This is the&nbsp; chapter 17 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;SlicePrevious Tutorial&nbsp;\u2013 Struct Now let\u2019s check...","og_url":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-05-13T19:52:44+00:00","article_modified_time":"2021-01-11T17:17:18+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/","url":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/","name":"Understanding Array in Go (Golang) - Complete Guide - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-05-13T19:52:44+00:00","dateModified":"2021-01-11T17:17:18+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guide\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understanding Array in Go (Golang) &#8211; Complete Guide"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-yt","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2137","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2137"}],"version-history":[{"count":9,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2137\/revisions"}],"predecessor-version":[{"id":4904,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2137\/revisions\/4904"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2137"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2137"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2137"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}