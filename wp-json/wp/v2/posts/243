{"id":243,"date":"2019-09-04T17:58:52","date_gmt":"2019-09-04T17:58:52","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=243"},"modified":"2019-11-30T15:19:03","modified_gmt":"2019-11-30T15:19:03","slug":"builder-pattern-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/","title":{"rendered":"Builder Pattern in GoLang"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#Definition\" title=\"Definition:\">Definition:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#UML_Diagram\" title=\"UML Diagram\">UML Diagram<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#Mapping_Also_Refer_5th_point_-_Example\" title=\"Mapping (Also Refer 5th point &#8211; Example)\">Mapping (Also Refer 5th point &#8211; Example)<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#When_To_Use\" title=\"When To Use\">When To Use<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#Example\" title=\"Example:\">Example:<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Definition\"><\/span><strong>Definition:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Builder Pattern is a creational design pattern used for constructing complex objects. Below is the UML diagram.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference  &#8211; <a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns in Go (Golang)<\/a><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"UML_Diagram\"><\/span><strong>UML Diagram<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<figure class=\"wp-block-gallery columns-1 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" decoding=\"async\" width=\"511\" height=\"278\" src=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg?resize=511%2C278&#038;ssl=1\" alt=\"\" data-id=\"244\" data-link=\"https:\/\/golangbyexamples.com\/?attachment_id=244\" class=\"wp-image-244\" srcset=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg?w=511&amp;ssl=1 511w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg?resize=300%2C163&amp;ssl=1 300w\" sizes=\"auto, (max-width: 511px) 100vw, 511px\" data-recalc-dims=\"1\" \/><\/figure><\/li><\/ul><\/figure>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Mapping_Also_Refer_5th_point_-_Example\"><\/span><strong>Mapping (Also Refer 5th point &#8211; Example)<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>Director<\/td><td>director.go<\/td><\/tr><tr><td>Builder Interface<\/td><td>iBuilder.go<\/td><\/tr><tr><td>Concrete Builder 1<\/td><td>normalBuilder.go<\/td><\/tr><tr><td>Concrete Builder 2<\/td><td>iglooBuilder.go<\/td><\/tr><tr><td>Product<\/td><td>house.go<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"When_To_Use\"><\/span><strong>When To Use<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use Builder pattern when the object constructed is big and requires multiple steps. It helps in less size of the constructor.\u00a0 The construction of the house becomes simple and it does not require a large constructor<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When a different version of the same product needs to be created. For example, in the below code we see a different version of house ie. igloo and the normal house being constructed by <strong>iglooBuilder <\/strong>and <strong>normalBuilder<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When half constructed final object should not exist. Again referring to below code the house created will either be created fully or not created at all. The Concrete Builder struct holds the temporary state of house object being created<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Example\"><\/span><strong>Example:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>iBuilder.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype iBuilder interface {\n    setWindowType()\n    setDoorType()\n    setNumFloor()\n    getHouse() house\n}\n\nfunc getBuilder(builderType string) iBuilder {\n    if builderType == \"normal\" {\n        return &normalBuilder{}\n    }\n    if builderType == \"igloo\" {\n        return &iglooBuilder{}\n    }\n    return nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>normalBuilder.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype normalBuilder struct {\n    windowType string\n    doorType   string\n    floor      int\n}\n\nfunc newNormalBuilder() *normalBuilder {\n    return &normalBuilder{}\n}\n\nfunc (b *normalBuilder) setWindowType() {\n    b.windowType = \"Wooden Window\"\n}\n\nfunc (b *normalBuilder) setDoorType() {\n    b.doorType = \"Wooden Door\"\n}\n\nfunc (b *normalBuilder) setNumFloor() {\n    b.floor = 2\n}\n\nfunc (b *normalBuilder) getHouse() house {\n    return house{\n        doorType:   b.doorType,\n        windowType: b.windowType,\n        floor:      b.floor,\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>iglooBuilder.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype iglooBuilder struct {\n    windowType string\n    doorType   string\n    floor      int\n}\n\nfunc newIglooBuilder() *iglooBuilder {\n    return &iglooBuilder{}\n}\n\nfunc (b *iglooBuilder) setWindowType() {\n    b.windowType = \"Snow Window\"\n}\n\nfunc (b *iglooBuilder) setDoorType() {\n    b.doorType = \"Snow Door\"\n}\n\nfunc (b *iglooBuilder) setNumFloor() {\n    b.floor = 1\n}\n\nfunc (b *iglooBuilder) getHouse() house {\n    return house{\n        doorType:   b.doorType,\n        windowType: b.windowType,\n        floor:      b.floor,\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>house.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype house struct {\n    windowType string\n    doorType   string\n    floor      int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>director.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype director struct {\n    builder iBuilder\n}\n\nfunc newDirector(b iBuilder) *director {\n    return &director{\n        builder: b,\n    }\n}\n\nfunc (d *director) setBuilder(b iBuilder) {\n    d.builder = b\n}\n\nfunc (d *director) buildHouse() house {\n    d.builder.setDoorType()\n    d.builder.setWindowType()\n    d.builder.setNumFloor()\n    return d.builder.getHouse()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    normalBuilder := getBuilder(\"normal\")\n    iglooBuilder := getBuilder(\"igloo\")\n\n    director := newDirector(normalBuilder)\n    normalHouse := director.buildHouse()\n\n    fmt.Printf(\"Normal House Door Type: %s\\n\", normalHouse.doorType)\n    fmt.Printf(\"Normal House Window Type: %s\\n\", normalHouse.windowType)\n    fmt.Printf(\"Normal House Num Floor: %d\\n\", normalHouse.floor)\n\n    director.setBuilder(iglooBuilder)\n    iglooHouse := director.buildHouse()\n\n    fmt.Printf(\"\\nIgloo House Door Type: %s\\n\", iglooHouse.doorType)\n    fmt.Printf(\"Igloo House Window Type: %s\\n\", iglooHouse.windowType)\n    fmt.Printf(\"Igloo House Num Floor: %d\\n\", iglooHouse.floor)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Normal House Door Type: Wooden Door\nNormal House Window Type: Wooden Window\nNormal House Num Floor: 2\n\nIgloo House Door Type: Snow Door\nIgloo House Window Type: Snow Window\nIgloo House Num Floor: 1<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents Definition:UML DiagramMapping (Also Refer 5th point &#8211; Example)When To UseExample: Definition: Builder Pattern is a creational design pattern used for constructing complex objects. Below is the UML diagram. Note:&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[28,29,26,25,24,4,27],"class_list":["post-243","post","type-post","status-publish","format-standard","hentry","category-tech","tag-builder","tag-creational","tag-design","tag-design-pattern","tag-designpatter","tag-golang","tag-pattern"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Builder Pattern in GoLang - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Builder Pattern in GoLang - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents Definition:UML DiagramMapping (Also Refer 5th point &#8211; Example)When To UseExample: Definition: Builder Pattern is a creational design pattern used for constructing complex objects. Below is the UML diagram. Note:...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-09-04T17:58:52+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-11-30T15:19:03+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/\",\"name\":\"Builder Pattern in GoLang - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg\",\"datePublished\":\"2019-09-04T17:58:52+00:00\",\"dateModified\":\"2019-11-30T15:19:03+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Builder Pattern in GoLang\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Builder Pattern in GoLang - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/","og_locale":"en_US","og_type":"article","og_title":"Builder Pattern in GoLang - Welcome To Golang By Example","og_description":"Table of Contents Definition:UML DiagramMapping (Also Refer 5th point &#8211; Example)When To UseExample: Definition: Builder Pattern is a creational design pattern used for constructing complex objects. Below is the UML diagram. Note:...","og_url":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-09-04T17:58:52+00:00","article_modified_time":"2019-11-30T15:19:03+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/","url":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/","name":"Builder Pattern in GoLang - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg","datePublished":"2019-09-04T17:58:52+00:00","dateModified":"2019-11-30T15:19:03+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/builder-pattern-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/09\/Builder-Design-Patter-1.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/builder-pattern-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Builder Pattern in GoLang"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-3V","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/243","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=243"}],"version-history":[{"count":9,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/243\/revisions"}],"predecessor-version":[{"id":760,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/243\/revisions\/760"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=243"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=243"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=243"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}