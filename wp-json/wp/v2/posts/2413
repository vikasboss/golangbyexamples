{"id":2413,"date":"2020-07-15T19:44:55","date_gmt":"2020-07-15T14:14:55","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2413"},"modified":"2021-07-10T13:09:08","modified_gmt":"2021-07-10T07:39:08","slug":"basic-http-server-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/basic-http-server-go\/","title":{"rendered":"Basic HTTP Server Implementation Using Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Overview\" title=\"Overview\">Overview<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Request\" title=\"Request\">Request<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Response\" title=\"Response\">Response<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Pair_of_API_signature_and_its_handler\" title=\"Pair of API signature and its handler\">Pair of API signature and its handler<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Mux\" title=\"Mux\">Mux<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Listener\" title=\"Listener\">Listener<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Using_servers_ListenAndServe_function\" title=\"Using server&#8217;s ListenAndServe function\">Using server&#8217;s ListenAndServe function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Using_https_ListenAndServe_function\" title=\"Using http&#039;s ListenAndServe function\">Using http's ListenAndServe function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">HTTP (Hypertext Transfer Protocol) is an application layer protocol and works in client-server mode. HTTP server is basically a program running on a machine. It listens and responds to HTTP requests on its IP address with a particular port. As HTTP is the foundation of the World Wide Web and is used to load any web pages, every software developer comes across the situation where it is required to implement an HTTP Server to respond an HTTP request.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">This article covers the HTTP server implementation in Go programming language. There is a go package <strong>net<\/strong>, that contains the utility packages to handle networking functions.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>net<\/strong> package contains http package that provides both HTTP client (to make http requests) and HTTP server (listens to http requests) implementations. In this article, we will learn about HTTP server. Below is the statement to import the http package:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import \"net\/http\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The crux to understanding the http server implementation is understanding below things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Request<\/strong> &#8211; it defines the request parameters i.e, Method, Api Signature, request headers, body, query params etc<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Response<\/strong> &#8211; defines the response parameters i.e, Status code, response body, headers<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Pair of API signature and its handler <\/strong>&#8211; Each API signature corresponds to a handler. You can think of handler as a function which is invoked when a request is made for that particular API signature. The <strong>mux<\/strong> registers these pairs of API signature and its handler<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Mux<\/strong>&#8211; It acts as a router. Depending upon API signature of the request, it routes the request to the registered handler for that API signature. The handler will handle that incoming request and provide the response . For eg an API call with <strong>&#8220;\/v2\/teachers&#8221;<\/strong> might be handled by a different function and&nbsp; API call with <strong>&#8220;\/v2\/students&#8221;<\/strong> might be handled by some other function. So basically based upon API signature( and also request method sometimes) , it decides which handler to invoke.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Listener<\/strong> &#8211; It runs on the machine, which listens to a particular port. Whenever it receives the request on that port it forwards the request to the <strong>mux<\/strong>. It also handles other functionalities as well but we will not discuss those it in this article.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">There is more when it comes to HTTP, but for simplicity, we talked about only the above five things. The diagram below shows the interaction for an API request originating from the client.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example. Below two pairs of API Signature and handlers are registered with the <strong>mux.<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>&#8220;\/v1\/abc&#8221;<\/strong>&nbsp; and <strong>handlerfunc_1<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>&#8220;\/v1\/xyz&#8221; <\/strong>and <strong>handlerfunc_2<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Client calling<strong> &#8220;\/v1\/abc&#8221;<\/strong> API. Listener forwards it to the <strong>mux<\/strong> and the <strong>mux<\/strong> routes it to the appropriate handler <strong>handlerfunc_1<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"218\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg?resize=640%2C218&#038;ssl=1\" alt=\"\" class=\"wp-image-2415\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg?w=712&amp;ssl=1 712w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg?resize=300%2C102&amp;ssl=1 300w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Client calling <strong>&#8220;\/v1\/xyz&#8221;<\/strong> API. Listener forwards it to the <strong>mux<\/strong> and the <strong>mux<\/strong> routes it to the appropriate handler <strong>handlerfunc_2<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"199\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http2.jpg?resize=640%2C199&#038;ssl=1\" alt=\"\" class=\"wp-image-2416\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http2.jpg?w=713&amp;ssl=1 713w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http2.jpg?resize=300%2C93&amp;ssl=1 300w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Now we have understood the above parts so let&#8217;s move on to see how each of the above is implemented in GO and then in the end we will see a complete program with the entire end to end flow<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Request\"><\/span><strong>Request<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In GO a request is represented by the <strong>Request<\/strong> Struct.\u00a0 Here is the link to the struct &#8211; <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#Request\">https:\/\/golang.org\/pkg\/net\/http\/#Request<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It contains the request method, Api Signature, request headers, body, query params, etc.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Response\"><\/span><strong>Response<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In GO a response is represented by the <strong>ResponseWriter<\/strong> Interface.\u00a0 Here is the link to the interface &#8211; <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#ResponseWriter\">https:\/\/golang.org\/pkg\/net\/http\/#ResponseWriter<\/a>ResponseWriter interface is used by an HTTP handler to construct an HTTP response. It provides three functions to set the response parameters<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Header &#8211; For writing response header<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Write([]byte) &#8211; For writing response body<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>WriteHeader(statusCode int) &#8211; For writing the http status code<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Pair_of_API_signature_and_its_handler\"><\/span><strong>Pair of API signature and its handler<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">An API signature and its handler are paired. Then handler is called by the mux when it receives an API call matching the API signature. A golang handler can be either a <strong>function<\/strong> or a <strong>type<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Function<\/strong> &#8211; the function should have below signature<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func(ResponseWriter, *Request)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Type<\/strong> &#8211; the type should implement the the <strong>Handler<\/strong> interface<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Handler interface {\n   ServeHTTP(ResponseWriter, *Request)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at each one by one<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Function &#8211; <\/strong>A handler can just be a simple function having below signature.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func(ResponseWriter, *Request)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It takes input has two arguments. The first one is ResponseWriter and the second one is a pointer to the Request struct. We discussed both of these earlier as well.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">If an API signature and a function having signature as above are registered as a pair in the <strong>mux<\/strong>, then this function will be called when an API call is made matching the API signature.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Type &#8211; <\/strong>the type should implement the <strong>Handler<\/strong> Interface &#8211; <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#Handler\">https:\/\/golang.org\/pkg\/net\/http\/#Handler<\/a><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Handler interface {\n   ServeHTTP(ResponseWriter, *Request)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>Handler<\/strong> interface defines a <strong>ServeHttp<\/strong> function. If an API signature and a type that implements the <strong>Handler<\/strong> interface are registered as a pair in the mux, then the <strong>ServeHTTP<\/strong> method for this type will be invoked when an API call is made matching the API signature.<br><\/p>\n\n\n\n<p class=\"has-medium-font-size\">If you will notice the API signature of the<strong> function <\/strong>used as a handler and <strong>ListenAndServe<\/strong> function is the same which is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func(ResponseWriter, *Request)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">These functions will be called by mux depending upon the type of handler. Also to note that two different API Signature can have the same handler<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Mux\"><\/span><strong>Mux<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The job of mux or multiplexer is to route request to the registered handler based upon API signature (and also request Method sometimes). If the signature and its handler is not registered with the mux, it raises a 404<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Go provides a default mux built in the language &#8211; <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#ServeMux\">https:\/\/golang.org\/pkg\/net\/http\/#ServeMux<\/a>. There are also other mux available in the market for golang. Different web frameworks such as gin provide there own mux<\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is how we create a mux<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">mux := http.NewServeMux()<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see how we register a pair of API Signature and its handler with the mux. There are two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the handler is a <strong>function <\/strong>. It registers the pattern which is API signature and the function as a handler<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">mux.HandleFunc(pattern, handlerFunc)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the handler is a <strong>type<\/strong> implementing the <strong>Handler<\/strong> interface<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">mux.Handle(pattern, handler)<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Listener\"><\/span><strong>Listener<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The listener listens to a port and the forwards the request to the <strong>mux<\/strong> and then waits for response. Once it receives the response it sends it back to the client. A listener in golang can be implemented using the server struct &#8211; <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#Server\">https:\/\/golang.org\/pkg\/net\/http\/#Server<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is how we create a server. There are also some other parameters that we can specify while creating a server such as ReadTimeout, WriteTimeout etc., but that is out of scope for this tutorial. All parameters which are not provided take the default zero value.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := &http.Server{\n  Addr:    \":8080\",\n  Handler: mux,\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>Addr<\/strong> attribute of type string is the address of the machine on which the HTTP server will be launched.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">This address is in the form of<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{ip_address}:{port}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp;If only :{port} is used as <strong>addr <\/strong>argument then that means HTTP server is reachable from all the ip addresses (loopback, public ip, internal ip) of the machine.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">One can also use&nbsp;<strong>&#8220;:http&#8221;<\/strong>&nbsp;as the&nbsp;<strong>addr<\/strong>&nbsp;argument value for address port&nbsp;<strong>&#8220;:80&#8221;<\/strong>&nbsp;and&nbsp;<strong>&#8220;:https&#8221;&nbsp;<\/strong>for address port&nbsp;<strong>&#8220;:443&#8221;<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">A very important thing to note here is that <strong>ServerMux <\/strong>which is default mux built in the language also has a <strong>ServeHttp <\/strong>method&nbsp; <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#ServeMux.ServeHTTP\">https:\/\/golang.org\/pkg\/net\/http\/#ServeMux.ServeHTTP<\/a>. So <strong>ServerMux<\/strong> also implements the <strong>Handler<\/strong> interface since it defines the <strong>ServeHttp<\/strong> method. While creating server as you might have noticed we have to provide a handler which is of type <strong>Handler<\/strong> interface. This is where <strong>ServerMux <\/strong>implementing the <strong>Handler<\/strong> interface comes in handy as we can pass the instance of <strong>ServerMux<\/strong> while creating server. This is important to understand that <strong>ServerMux <\/strong>is of type <strong>Handler<\/strong> interface apart from registering different pairs of API signatures and their handlers.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">After the server is created we call the <strong>ListenAndServe<\/strong> method of the <strong>server<\/strong> . The server then starts listening to the provided port and upon receiving any api call on that port it calls the <strong>ServeHttp <\/strong>of the <strong>mux<\/strong> which in turns routes the request to the registered handlerHope above five things are clear now. Let&#8217;s see a working program illustrating above points<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_servers_ListenAndServe_function\"><\/span><strong>Using server&#8217;s ListenAndServe function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"net\/http\"\n)\n\nfunc main() {\n\n\t\/\/Create the default mux\n\tmux := http.NewServeMux()\n\n\t\/\/Handling the \/v1\/teachers. The handler is a function here\n\tmux.HandleFunc(\"\/v1\/teachers\", teacherHandler)\n\n\t\/\/Handling the \/v1\/students. The handler is a type implementing the Handler interface here\n\tsHandler := studentHandler{}\n\tmux.Handle(\"\/v1\/students\", sHandler)\n\n\t\/\/Create the server. \n\ts := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: mux,\n\t}\n\ts.ListenAndServe()\n\n}\n\nfunc teacherHandler(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of teacher's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n\ntype studentHandler struct{}\n\nfunc (h studentHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of student's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s first understand the program before running it<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We defined a function named <strong>teacherHandler <\/strong>which has signature accepting the <strong>http.ResponseWriter <\/strong>and pointer to <strong>http.Request<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func teacherHandler(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of teacher's called\")\n\tres.Header().Set(\"Content-Type\", \"application\/text\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We define a struct named <strong>studentHandler <\/strong>which defines the <strong>ServeHTTP <\/strong>method. So <strong>studentHandler <\/strong>is a type which implements the <strong>Handler<\/strong> interface<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type studentHandler struct{}\n\nfunc (h studentHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of student's called\")\n\tres.Header().Set(\"Content-Type\", \"application\/text\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We create an instance of <strong>ServerMux<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">mux := http.NewServeMux()<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We registered the pair of API signature&nbsp; &#8220;\/v1\/teachers&#8221; and its handler <strong>teacherHandler<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">mux.HandleFunc(\"\/v1\/teachers\", teacherHandler)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We registered the pair of API signature&nbsp; &#8220;\/v1\/students&#8221; and its handler <strong>studentHandler <\/strong>which is a type implementing <strong>Handler <\/strong>interface<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sHandler := studentHandler{}\nmux.Handle(\"\/v1\/students\", sHandler)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We created the server and provided it the instance of <strong>ServerMux<\/strong> and the port to listen to which is 8080. Then the&nbsp; <strong>ListenAndServe<\/strong> method on the server&#8217;s instance was called.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">s := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: mux,\n\t}\ns.ListenAndServe()<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s run the server&nbsp; now<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go run main.go<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will start listening to port 8080. This program never exits and process remains locked until terminated forcefully, which is recommended as any HTTP server should be up and running all the time. Now make api calls<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Calling <strong>&#8220;v1\/teachers&#8221; <\/strong>api &#8211; It returns correct response &#8211; &#8216;<strong>V1 of teacher&#8217;s called&#8217;<\/strong> along with correct status code of 200<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v -X GET http:\/\/localhost:8080\/v1\/teachers\nNote: Unnecessary use of -X or --request, GET is already inferred.\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET \/v1\/teachers HTTP\/1.1\n> Host: localhost:8080\n> User-Agent: curl\/7.54.0\n> Accept: *\/*\n> \n< HTTP\/1.1 200 OK\n< Content-Type: application\/text\n< Date: Sat, 11 Jul 2020 16:03:33 GMT\n< Content-Length: 22\n< \n* Connection #0 to host localhost left intact\nV1 of teacher's called<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Calling <strong>\"v1\/students\" <\/strong>api - It returns correct response - '<strong>V1 of student's called'<\/strong> along with correct status code of 200<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v -X GET http:\/\/localhost:8080\/v1\/students\nNote: Unnecessary use of -X or --request, GET is already inferred.\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET \/v1\/students HTTP\/1.1\n> Host: localhost:8080\n> User-Agent: curl\/7.54.0\n> Accept: *\/*\n> \n< HTTP\/1.1 200 OK\n< Content-Type: application\/text\n< Date: Sat, 11 Jul 2020 16:04:27 GMT\n< Content-Length: 22\n< \n* Connection #0 to host localhost left intact\nV1 of student's called<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">You can also try these apis on the browser<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For api <strong>\"\/v1\/teachers\"<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"37\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called-1024x59.png?resize=640%2C37&#038;ssl=1\" alt=\"\" class=\"wp-image-2419\" srcset=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?resize=1024%2C59&amp;ssl=1 1024w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?resize=300%2C17&amp;ssl=1 300w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?resize=768%2C44&amp;ssl=1 768w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?resize=1536%2C88&amp;ssl=1 1536w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?resize=2048%2C118&amp;ssl=1 2048w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?resize=850%2C49&amp;ssl=1 850w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?w=1280&amp;ssl=1 1280w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/teachers_called.png?w=1920&amp;ssl=1 1920w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">For api <strong>\"\/v1\/students\"<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"31\" src=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called-1024x49.png?resize=640%2C31&#038;ssl=1\" alt=\"\" class=\"wp-image-2420\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?resize=1024%2C49&amp;ssl=1 1024w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?resize=300%2C14&amp;ssl=1 300w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?resize=768%2C37&amp;ssl=1 768w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?resize=1536%2C74&amp;ssl=1 1536w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?resize=2048%2C98&amp;ssl=1 2048w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?resize=850%2C41&amp;ssl=1 850w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?w=1280&amp;ssl=1 1280w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/student_called.png?w=1920&amp;ssl=1 1920w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_https_ListenAndServe_function\"><\/span><strong>Using http's ListenAndServe function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">So we looked at a program where we built a <strong>mux<\/strong>, then we added pairs of API signature and their handlers. Finally we created a server and started it. <strong>net\/http<\/strong> package also provides a function <strong>ListenAndServe<\/strong> which creates a default server and uses the default <strong>mux<\/strong> to achieve the same what we discussed above. It is a short way of doing starting a http server<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>ListenAndServe<\/strong> function has an <strong>addr<\/strong> and <strong>handler<\/strong> as its input arguments and it starts a HTTP server. It starts listening to incoming HTTP requests and serve the requests when received any.Below is the signature of the <strong>ListenAndServe <\/strong>function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func ListenAndServe(addr string, handler Handler) error<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below is way to call this function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">http.ListenAndServe(:8080, nil)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If you will notice above we called <strong>ListenAndServe <\/strong>function with nil value for handler<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">http.ListenAndServe(:8080, nil)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In that situation a default instance of <strong>ServeMux<\/strong> (<a href=\"https:\/\/golang.org\/pkg\/net\/http\/#ServeMux\">https:\/\/golang.org\/pkg\/net\/http\/#ServeMux<\/a> ) will be created<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"net\/http\"\n)\n\nfunc main() {\n\n\t\/\/Handling the \/v1\/teachers\n\thttp.HandleFunc(\"\/v1\/teachers\", teacherHandler)\n\n\t\/\/Handling the \/v1\/students\n\tsHandler := studentHandler{}\n\thttp.Handle(\"\/v1\/students\", sHandler)\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc teacherHandler(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of teacher's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n\ntype studentHandler struct{}\n\nfunc (h studentHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of student's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">net\/http package provides the <strong>HandleFunc <\/strong>and <strong>Handle. <\/strong>These function works in the same way as mux's methods.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Run the server<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">go run main.go<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The output will be same as we discussed above. This is all about basic HTTP server implementation in golang.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">We learned that we can create a HTTP server in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using server.ListenAndServe - <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#Server.ListenAndServe\">https:\/\/golang.org\/pkg\/net\/http\/#Server.ListenAndServe<\/a><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using http.ListenAndServe - <a href=\"https:\/\/golang.org\/pkg\/net\/http\/#ListenAndServe\">https:\/\/golang.org\/pkg\/net\/http\/#ListenAndServe<\/a><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Internally both of them are doing the same thing. The second one uses default for everything while the first one lets you create mux and server instance explicitly so that you can specify more options and hence first option is more flexible.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewRequestResponsePair of API signature and its handlerMuxListenerUsing server&#8217;s ListenAndServe functionUsing http&#8217;s ListenAndServe functionConclusion Overview HTTP (Hypertext Transfer Protocol) is an application layer protocol and works in client-server mode. HTTP&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2413","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Basic HTTP Server Implementation Using Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Basic HTTP Server Implementation Using Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewRequestResponsePair of API signature and its handlerMuxListenerUsing server&#8217;s ListenAndServe functionUsing http&#039;s ListenAndServe functionConclusion Overview HTTP (Hypertext Transfer Protocol) is an application layer protocol and works in client-server mode. HTTP...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/basic-http-server-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-07-15T14:14:55+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-07-10T07:39:08+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/\",\"name\":\"Basic HTTP Server Implementation Using Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg\",\"datePublished\":\"2020-07-15T14:14:55+00:00\",\"dateModified\":\"2021-07-10T07:39:08+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/basic-http-server-go\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/basic-http-server-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Basic HTTP Server Implementation Using Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Basic HTTP Server Implementation Using Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/basic-http-server-go\/","og_locale":"en_US","og_type":"article","og_title":"Basic HTTP Server Implementation Using Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewRequestResponsePair of API signature and its handlerMuxListenerUsing server&#8217;s ListenAndServe functionUsing http's ListenAndServe functionConclusion Overview HTTP (Hypertext Transfer Protocol) is an application layer protocol and works in client-server mode. HTTP...","og_url":"https:\/\/golangbyexamples.com\/basic-http-server-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-07-15T14:14:55+00:00","article_modified_time":"2021-07-10T07:39:08+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"11 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/basic-http-server-go\/","url":"https:\/\/golangbyexamples.com\/basic-http-server-go\/","name":"Basic HTTP Server Implementation Using Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/basic-http-server-go\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/basic-http-server-go\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg","datePublished":"2020-07-15T14:14:55+00:00","dateModified":"2021-07-10T07:39:08+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/basic-http-server-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/basic-http-server-go\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/basic-http-server-go\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/http.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/basic-http-server-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Basic HTTP Server Implementation Using Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-CV","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2413","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2413"}],"version-history":[{"count":7,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2413\/revisions"}],"predecessor-version":[{"id":5881,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2413\/revisions\/5881"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2413"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2413"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2413"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}