{"id":730,"date":"2019-11-30T14:10:45","date_gmt":"2019-11-30T14:10:45","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=730"},"modified":"2020-10-06T21:57:34","modified_gmt":"2020-10-06T16:27:34","slug":"visitor-design-pattern-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/","title":{"rendered":"Visitor Design Pattern in Go(Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference  &#8211; <a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns in Go (Golang)<\/a><\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#Introduction\" title=\"Introduction:\">Introduction:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#UML_Diagram\" title=\"UML Diagram:\">UML Diagram:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#Mapping\" title=\"Mapping&nbsp;\">Mapping&nbsp;<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#Example\" title=\"Example\">Example<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#Full_Working_Code\" title=\"Full Working Code:\">Full Working Code:<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Visitor Design Pattern is a Behavioural design pattern that lets you add behaviour to a struct without actually modifying the struct.<br>Let&#8217;s understand the visitor pattern with an example. Let&#8217;s say you are the maintainer of a lib which has different shape structs such as <\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>Square<\/li><li>Circle<\/li><li>Triangle<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Each of the above shape structs implements a common interface <strong>shape. <\/strong>There are many teams in your company which are using your lib. Now let&#8217;s say one of the team wants you to add one more behaviour (<strong>getArea()<\/strong>) to the Shape structs. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">There are many options to solve this problem<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>First Option<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The first option that comes to the mind is to add <strong>getArea()<\/strong> method in the <strong>shape<\/strong> interface and then each shape struct can implement the getArea() method. This seems trivial but there are some problems:<br><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>As a maintainer of the library, you don&#8217;t want to alter a highly tested code of your library by adding additional behaviours.<\/li><li>There might be more request by the teams using your library for more behaviours such as<strong> getNumSides()<\/strong>, <strong>getMiddleCoordinates()<\/strong>. Then, in this case, you don&#8217;t want to keep modifying your library. But you do want other teams to extend your library without actual modification of the code much.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Second Option<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The second option is that the team requesting the feature can write the logic for behaviour themselves. So based upon the shape struct type they like below code<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">if shape.type == square {\n   \/\/Calculate area for squre\n} elseif shape.type == circle {\n    \/\/Calculate area of triangle \n} elseif shape.type == \"triangle\" {\n    \/\/Calculate area of triangle\n} else {\n   \/\/Raise error\n} <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Above code is also problematic as you are not able to take the full advantage of interfaces and instead do an explicit type checking which is fragile. Second, getting the type at run time may have a performance impact or maybe even not possible in some languages.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Third Option<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The third option is to solve the above problem using the visitor pattern. We define a visitor interface like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type visitor interface {\n   visitForSquare(square)\n   visitForCircle(circle)\n   visitForTriangle(triangle)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The functions <strong>visitforSquare(square), visitForCircle(circle), visitForTriangle<\/strong>(<strong>triangle<\/strong>) allows us to add functionality to Square, Circle and Triangle respectively.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now the question which comes to mind is why can&#8217;t we have a single method visit<strong>(shape)<\/strong> in the visitor interface. The reason we don&#8217;t have it because GO and also some other languages support method overloading. So a different method for each of the struct.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">We add an <strong>accept <\/strong>method to the shape interface with below signature and each of the shape struct needs to define this method.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func accept(v visitor)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But wait for a second, we just mentioned that we don&#8217;t want to modify our existing shape structs. But when using Visitor Pattern we do have to modify our shape structs but this modification will only be done once. In case adding any additional behaviour such as <strong>getNumSides()<\/strong>, <strong>getMiddleCoordinates() <\/strong>will use the same above <strong>accept(v visitor)<\/strong> function without any further change to the shape structs. Basically the shape structs just need to be modified once and all future request of additional behaviours will be handled using the same accept function. Let&#8217;s see how.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The square struct will implement an accept method like below: <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (obj *squre) accept(v visitor){\n    v.visitForSquare(obj)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and similarly, circle and triangle will also define an accept function as above.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now the team requesting for the <strong>getArea()<\/strong> behaviour can simply define the concrete implementation of visitor interface and write the area calculation logic in that concrete implementation.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>areaCalculator.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type areaCalculator struct{\n    area int\n}\n\nfunc (a *areaCalculator) visitForSquare(s *square){\n    \/\/Calculate are for square\n}\nfunc (a *areaCalculator) visitForCircle(s *square){\n    \/\/Calculate are for circle\n}\nfunc (a *areaCalculator) visitForTriangle(s *square){\n    \/\/Calculate are for triangle\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">To calculate the area of a square we first create an instance of the square they can simply call.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">sq := &square{}\nac := &areaCalculator{}\nsq.accept(ac)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Similarly, other team requesting for <strong>getMiddleCoordinates() <\/strong>behaviour can define another concrete implementation of the visitor interface similar to above.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>middleCoordinates.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type middleCoordinates struct {\n    x int\n    y int\n}\n\nfunc (a *middleCoordinates) visitForSquare(s *square) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n}\n\nfunc (a *middleCoordinates) visitForCircle(c *circle) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n}\n\nfunc (a *middleCoordinates) visitForTriangle(t *triangle) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n}<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"UML_Diagram\"><\/span><strong>UML Diagram:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"323\" src=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg?resize=640%2C323&#038;ssl=1\" alt=\"\" class=\"wp-image-734\" srcset=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg?w=779&amp;ssl=1 779w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg?resize=300%2C151&amp;ssl=1 300w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg?resize=768%2C387&amp;ssl=1 768w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Below is the corresponding mapping UML diagram with the practical example of shape struct and areaCalculator we gave above<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"323\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-2.jpg?resize=640%2C323&#038;ssl=1\" alt=\"\" class=\"wp-image-735\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-2.jpg?w=779&amp;ssl=1 779w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-2.jpg?resize=300%2C151&amp;ssl=1 300w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-2.jpg?resize=768%2C387&amp;ssl=1 768w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Mapping\"><\/span><strong>Mapping&nbsp;<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The below table represents the mapping from the UML diagram actors to actual implementation actors in <strong>&#8220;Example&#8221;<\/strong> below<\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>element<\/td><td>shape.go<\/td><\/tr><tr><td>Concrete Element A<\/td><td>square.go<\/td><\/tr><tr><td>Concrete Element B<\/td><td>circle.go<\/td><\/tr><tr><td>Concrete Element C<\/td><td>rectangle.go<\/td><\/tr><tr><td>Visitor<\/td><td>visitor.go<\/td><\/tr><tr><td>Concrete Visitor 1<\/td><td>areaCalculator.go<\/td><\/tr><tr><td>Concrete Visitor 2<\/td><td>middleCoordinates.go<\/td><\/tr><tr><td>Client<\/td><td>main.go<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Example\"><\/span><strong>Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>shape.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype shape interface {\n    getType() string\n    accept(visitor)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>square.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype square struct {\n    side int\n}\n\nfunc (s *square) accept(v visitor) {\n    v.visitForSquare(s)\n}\n\nfunc (s *square) getType() string {\n    return \"Square\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>circle.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype circle struct {\n    radius int\n}\n\nfunc (c *circle) accept(v visitor) {\n    v.visitForCircle(c)\n}\n\nfunc (c *circle) getType() string {\n    return \"Circle\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>rectangle.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype rectangle struct {\n    l int\n    b int\n}\n\nfunc (t *rectangle) accept(v visitor) {\n    v.visitForrectangle(t)\n}\n\nfunc (t *rectangle) getType() string {\n    return \"rectangle\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>visitor.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype visitor interface {\n    visitForSquare(*square)\n    visitForCircle(*circle)\n    visitForrectangle(*rectangle)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>areaCalculator.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n)\n\ntype areaCalculator struct {\n    area int\n}\n\nfunc (a *areaCalculator) visitForSquare(s *square) {\n    \/\/Calculate area for square. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for square\")\n}\n\nfunc (a *areaCalculator) visitForCircle(s *circle) {\n    \/\/Calculate are for circle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for circle\")\n}\n\nfunc (a *areaCalculator) visitForrectangle(s *rectangle) {\n    \/\/Calculate are for rectangle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for rectangle\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>middleCoordinates.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype middleCoordinates struct {\n    x int\n    y int\n}\n\nfunc (a *middleCoordinates) visitForSquare(s *square) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for square\")\n}\n\nfunc (a *middleCoordinates) visitForCircle(c *circle) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for circle\")\n}\n\nfunc (a *middleCoordinates) visitForrectangle(t *rectangle) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for rectangle\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    square := &square{side: 2}\n    circle := &circle{radius: 3}\n    rectangle := &rectangle{l: 2, b: 3}\n   \n    areaCalculator := &areaCalculator{}\n    square.accept(areaCalculator)\n    circle.accept(areaCalculator)\n    rectangle.accept(areaCalculator)\n   \n    fmt.Println()\n    middleCoordinates := &middleCoordinates{}\n    square.accept(middleCoordinates)\n    circle.accept(middleCoordinates)\n    rectangle.accept(middleCoordinates)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Calculating area for square\nCalculating area for circle\nCalculating area for rectangle\n\nCalculating middle point coordinates for square\nCalculating middle point coordinates for circle\nCalculating middle point coordinates for rectangle<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype shape interface {\n    getType() string\n    accept(visitor)\n}\n\ntype square struct {\n    side int\n}\n\nfunc (s *square) accept(v visitor) {\n    v.visitForSquare(s)\n}\n\nfunc (s *square) getType() string {\n    return \"Square\"\n}\n\ntype circle struct {\n    radius int\n}\n\nfunc (c *circle) accept(v visitor) {\n    v.visitForCircle(c)\n}\n\nfunc (c *circle) getType() string {\n    return \"Circle\"\n}\n\ntype rectangle struct {\n    l int\n    b int\n}\n\nfunc (t *rectangle) accept(v visitor) {\n    v.visitForrectangle(t)\n}\n\nfunc (t *rectangle) getType() string {\n    return \"rectangle\"\n}\n\ntype visitor interface {\n    visitForSquare(*square)\n    visitForCircle(*circle)\n    visitForrectangle(*rectangle)\n}\n\ntype areaCalculator struct {\n    area int\n}\n\nfunc (a *areaCalculator) visitForSquare(s *square) {\n    \/\/Calculate area for square. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for square\")\n}\n\nfunc (a *areaCalculator) visitForCircle(s *circle) {\n    \/\/Calculate are for circle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for circle\")\n}\n\nfunc (a *areaCalculator) visitForrectangle(s *rectangle) {\n    \/\/Calculate are for rectangle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for rectangle\")\n}\n\ntype middleCoordinates struct {\n    x int\n    y int\n}\n\nfunc (a *middleCoordinates) visitForSquare(s *square) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for square\")\n}\n\nfunc (a *middleCoordinates) visitForCircle(c *circle) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for circle\")\n}\n\nfunc (a *middleCoordinates) visitForrectangle(t *rectangle) {\n    \/\/Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for rectangle\")\n}\n\nfunc main() {\n    square := &square{side: 2}\n    circle := &circle{radius: 3}\n    rectangle := &rectangle{l: 2, b: 3}\n    areaCalculator := &areaCalculator{}\n    square.accept(areaCalculator)\n    circle.accept(areaCalculator)\n    rectangle.accept(areaCalculator)\n    \n    fmt.Println()\n    middleCoordinates := &middleCoordinates{}\n    square.accept(middleCoordinates)\n    circle.accept(middleCoordinates)\n    rectangle.accept(middleCoordinates)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Calculating area for square\nCalculating area for circle\nCalculating area for rectangle\n\nCalculating middle point coordinates for square\nCalculating middle point coordinates for circle\nCalculating middle point coordinates for rectangle<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping&nbsp;ExampleFull Working&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[26,3,94],"class_list":["post-730","post","type-post","status-publish","format-standard","hentry","category-tech","tag-design","tag-go","tag-visitor"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Visitor Design Pattern in Go(Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Visitor Design Pattern in Go(Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping&nbsp;ExampleFull Working...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-11-30T14:10:45+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-10-06T16:27:34+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/\",\"name\":\"Visitor Design Pattern in Go(Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg\",\"datePublished\":\"2019-11-30T14:10:45+00:00\",\"dateModified\":\"2020-10-06T16:27:34+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Visitor Design Pattern in Go(Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Visitor Design Pattern in Go(Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/","og_locale":"en_US","og_type":"article","og_title":"Visitor Design Pattern in Go(Golang) - Welcome To Golang By Example","og_description":"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping&nbsp;ExampleFull Working...","og_url":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-11-30T14:10:45+00:00","article_modified_time":"2020-10-06T16:27:34+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/","url":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/","name":"Visitor Design Pattern in Go(Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg","datePublished":"2019-11-30T14:10:45+00:00","dateModified":"2020-10-06T16:27:34+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Visitor-Design-Pattern-1.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/visitor-design-pattern-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Visitor Design Pattern in Go(Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-bM","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/730","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=730"}],"version-history":[{"count":8,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/730\/revisions"}],"predecessor-version":[{"id":4181,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/730\/revisions\/4181"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=730"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=730"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=730"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}