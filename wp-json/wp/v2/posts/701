{"id":701,"date":"2019-11-30T05:51:52","date_gmt":"2019-11-30T05:51:52","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=701"},"modified":"2019-12-27T16:38:33","modified_gmt":"2019-12-27T16:38:33","slug":"golang-object-pool","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/golang-object-pool\/","title":{"rendered":"Object Pool Design Pattern in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference  &#8211; <a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns in Go (Golang)<\/a><\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/golang-object-pool\/#Introduction\" title=\"Introduction:&nbsp; \">Introduction:&nbsp; <\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/golang-object-pool\/#When_to_Use\" title=\"When to Use:\">When to Use:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/golang-object-pool\/#Example\" title=\"Example:\">Example:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/golang-object-pool\/#Full_Working_Code\" title=\"Full Working Code:\">Full Working Code:<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction:&nbsp; <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The Object Pool Design Pattern is a creational design pattern in which a pool of objects is initialized and created beforehand and kept in a pool. As and when needed, a client can request an object from the pool, use it, and return it to the pool. The object in the pool is never destroyed.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"When_to_Use\"><\/span><strong>When to Use:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the cost to create the object of the class is high and the number of such objects that will be needed at a particular time is not much. <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">          -Let&#8217;s take the example of DB connections. Each of the connection object creation is cost is high as there is network calls involved and also at a time not more than a certain connection might be needed. The object pool design pattern is perfectly suitable for such cases.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the pool object is the immutable object <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; -Again take the example of DB connection again. A DB connection is an immutable object. Almost none of its property needs to be changed<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For performance reasons. It will boost the application performance significantly since the pool is already created<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Example\"><\/span><strong>Example:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>iPoolObject.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype iPoolObject interface {\n    getID() string \/\/This is any id which can be used to compare two different pool objects\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>pool.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\ntype pool struct {\n    idle   []iPoolObject\n    active []iPoolObject\n    capacity int\n    mulock   *sync.Mutex\n}\n\n\/\/InitPool Initialize the pool\nfunc initPool(poolObjects []iPoolObject) (*pool, error) {\n    if len(poolObjects) == 0 {\n        return nil, fmt.Errorf(\"Cannot craete a pool of 0 length\")\n    }\n    active := make([]iPoolObject, 0)\n    pool := &pool{\n        idle:     poolObjects,\n        active:   active,\n        capacity: len(poolObjects),\n        mulock:   new(sync.Mutex),\n    }\n    return pool, nil\n}\n\nfunc (p *pool) loan() (iPoolObject, error) {\n    p.mulock.Lock()\n    defer p.mulock.Unlock()\n    if len(p.idle) == 0 {\n        return nil, fmt.Errorf(\"No pool object free. Please request after sometime\")\n    }\n    obj := p.idle[0]\n    p.idle = p.idle[1:]\n    p.active = append(p.active, obj)\n    fmt.Printf(\"Loan Pool Object with ID: %s\\n\", obj.getID())\n    return obj, nil\n}\n\nfunc (p *pool) receive(target iPoolObject) error {\n    p.mulock.Lock()\n    defer p.mulock.Unlock()\n    err := p.remove(target)\n    if err != nil {\n        return err\n    }\n    p.idle = append(p.idle, target)\n    fmt.Printf(\"Return Pool Object with ID: %s\\n\", target.getID())\n    return nil\n}\n\nfunc (p *pool) remove(target iPoolObject) error {\n    currentActiveLength := len(p.active)\n    for i, obj := range p.active {\n        if obj.getID() == target.getID() {\n            p.active[currentActiveLength-1], p.active[i] = p.active[i], p.active[currentActiveLength-1]\n            p.active = p.active[:currentActiveLength-1]\n            return nil\n        }\n    }\n    return fmt.Errorf(\"Targe pool object doesn't belong to the pool\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>connection.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype connection struct {\n    id string\n}\n\nfunc (c *connection) getID() string {\n    return c.id\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"log\"\n    \"strconv\"\n)\n\nfunc main() {\n    connections := make([]iPoolObject, 0)\n    for i := 0; i < 3; i++ {\n        c := &#038;connection{id: strconv.Itoa(i)}\n        connections = append(connections, c)\n    }\n    pool, err := initPool(connections)\n    if err != nil {\n        log.Fatalf(\"Init Pool Error: %s\", err)\n    }\n    conn1, err := pool.loan()\n    if err != nil {\n        log.Fatalf(\"Pool Loan Error: %s\", err)\n    }\n    conn2, err := pool.loan()\n    if err != nil {\n        log.Fatalf(\"Pool Loan Error: %s\", err)\n    }\n    pool.receive(conn1)\n    pool.receive(conn2)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Loan Pool Object with ID: 0\nLoan Pool Object with ID: 1\nReturn Pool Object with ID: 0\nReturn Pool Object with ID: 1<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"strconv\"\n    \"sync\"\n)\n\ntype iPoolObject interface {\n    getID() string \/\/This is any id which can be used to compare two different pool objects\n}\n\ntype pool struct {\n    idle   []iPoolObject\n    active []iPoolObject\n    capacity int\n    mulock   *sync.Mutex\n}\n\n\/\/InitPool Initialize the pool\nfunc initPool(poolObjects []iPoolObject) (*pool, error) {\n    if len(poolObjects) == 0 {\n        return nil, fmt.Errorf(\"Cannot craete a pool of 0 length\")\n    }\n    active := make([]iPoolObject, 0)\n    pool := &pool{\n        idle:     poolObjects,\n        active:   active,\n        capacity: len(poolObjects),\n        mulock:   new(sync.Mutex),\n    }\n    return pool, nil\n}\n\nfunc (p *pool) loan() (iPoolObject, error) {\n    p.mulock.Lock()\n    defer p.mulock.Unlock()\n    if len(p.idle) == 0 {\n        return nil, fmt.Errorf(\"No pool object free. Please request after sometime\")\n    }\n    obj := p.idle[0]\n    p.idle = p.idle[1:]\n    p.active = append(p.active, obj)\n    fmt.Printf(\"Loan Pool Object with ID: %s\\n\", obj.getID())\n    return obj, nil\n}\n\nfunc (p *pool) receive(target iPoolObject) error {\n    p.mulock.Lock()\n    defer p.mulock.Unlock()\n    err := p.remove(target)\n    if err != nil {\n        return err\n    }\n    p.idle = append(p.idle, target)\n    fmt.Printf(\"Return Pool Object with ID: %s\\n\", target.getID())\n    return nil\n}\n\nfunc (p *pool) remove(target iPoolObject) error {\n    currentActiveLength := len(p.active)\n    for i, obj := range p.active {\n        if obj.getID() == target.getID() {\n            p.active[currentActiveLength-1], p.active[i] = p.active[i], p.active[currentActiveLength-1]\n            p.active = p.active[:currentActiveLength-1]\n            return nil\n        }\n    }\n    return fmt.Errorf(\"Targe pool object doesn't belong to the pool\")\n}\n\ntype connection struct {\n    id string\n}\n\nfunc (c *connection) getID() string {\n    return c.id\n}\n\nfunc main() {\n    connections := make([]iPoolObject, 0)\n    for i := 0; i < 3; i++ {\n        c := &#038;connection{id: strconv.Itoa(i)}\n        connections = append(connections, c)\n    }\n    pool, err := initPool(connections)\n    if err != nil {\n        log.Fatalf(\"Init Pool Error: %s\", err)\n    }\n    conn1, err := pool.loan()\n    if err != nil {\n        log.Fatalf(\"Pool Loan Error: %s\", err)\n    }\n    conn2, err := pool.loan()\n    if err != nil {\n        log.Fatalf(\"Pool Loan Error: %s\", err)\n    }\n    pool.receive(conn1)\n    pool.receive(conn2)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Loan Pool Object with ID: 0\nLoan Pool Object with ID: 1\nReturn Pool Object with ID: 0\nReturn Pool Object with ID: 1<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:&nbsp; When to&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[],"class_list":["post-701","post","type-post","status-publish","format-standard","hentry","category-tech"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Object Pool Design Pattern in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/golang-object-pool\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Object Pool Design Pattern in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:&nbsp; When to...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/golang-object-pool\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-11-30T05:51:52+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-12-27T16:38:33+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-object-pool\/\",\"url\":\"https:\/\/golangbyexamples.com\/golang-object-pool\/\",\"name\":\"Object Pool Design Pattern in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2019-11-30T05:51:52+00:00\",\"dateModified\":\"2019-12-27T16:38:33+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-object-pool\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/golang-object-pool\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-object-pool\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Object Pool Design Pattern in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Object Pool Design Pattern in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/golang-object-pool\/","og_locale":"en_US","og_type":"article","og_title":"Object Pool Design Pattern in Go (Golang) - Welcome To Golang By Example","og_description":"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:&nbsp; When to...","og_url":"https:\/\/golangbyexamples.com\/golang-object-pool\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-11-30T05:51:52+00:00","article_modified_time":"2019-12-27T16:38:33+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/golang-object-pool\/","url":"https:\/\/golangbyexamples.com\/golang-object-pool\/","name":"Object Pool Design Pattern in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2019-11-30T05:51:52+00:00","dateModified":"2019-12-27T16:38:33+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/golang-object-pool\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/golang-object-pool\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/golang-object-pool\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Object Pool Design Pattern in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-bj","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/701","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=701"}],"version-history":[{"count":5,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/701\/revisions"}],"predecessor-version":[{"id":1032,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/701\/revisions\/1032"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=701"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=701"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=701"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}