{"id":2643,"date":"2020-07-18T23:04:24","date_gmt":"2020-07-18T17:34:24","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2643"},"modified":"2020-07-18T23:04:38","modified_gmt":"2020-07-18T17:34:38","slug":"access-underlying-type-interface-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/","title":{"rendered":"Access Underlying Variable of Interface in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#Type_Assertion\" title=\"Type Assertion\">Type Assertion<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#Type_Switch\" title=\"Type Switch\">Type Switch<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Like any other variable, an interface variable is represented by a type and value. Interface value, in turn under the hood, consists of two tuple<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Underlying Type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Underlying Value<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">See below diagram which illustrates what we mentioned above<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"351\" height=\"201\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg?resize=351%2C201&#038;ssl=1\" alt=\"\" class=\"wp-image-2526\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg?w=351&amp;ssl=1 351w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg?resize=300%2C172&amp;ssl=1 300w\" sizes=\"auto, (max-width: 351px) 100vw, 351px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The underlying variable of an interface can be accessed in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Type Assertion<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Type Switch<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Type_Assertion\"><\/span><strong>Type Assertion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Type assertion provides a way to access the underlying variable inside the interface value of the interface by asserting the correct type of underlying value. Below is the syntax for that where i is an interface.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">val := i.({type})<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above statement is asserting that the type of underlying value in the interface is of type {type}. If this is true then the underlying value is assigned to <strong>val. <\/strong>If not then the above statement panics.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Assume we have an interface <strong>animal<\/strong> as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">type animal interface {\n    breathe()\n    walk()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We also have a <strong>lion<\/strong> struct implementing this <strong>animal<\/strong> interface<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type lion struct {\n    age int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n\tage int\n}\n\nfunc (d dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\ta = lion{age: 10}\n\tprint(a)\n\n}\n\nfunc print(a animal) {\n\tl := a.(lion)\n\tfmt.Printf(\"Age: %d\\n\", l.age)\n\n\t\/\/d := a.(dog)\n\t\/\/fmt.Printf(\"Age: %d\\n\", d.age)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Age: 10<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is how we assert the variable <strong>a<\/strong> of type <strong>animal<\/strong> to have underlying type as <strong>lion<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">l := a.(lion)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below line will create a panic as underlying type is <strong>lion<\/strong> and not <strong>dog<\/strong>. Uncomment the line to check it out<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\/\/d := a.(dog)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Type assertion provides another way to get the underlying value and which also prevents a panic. The syntax for that is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">val, ok := i.(<type>)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In this case type assertion returns two values, first value is same as discussed above , the other value is a boolean indicating weather the type assertion was correct or not. This value is<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>true if the type assertion is correct meaning the type asserted is same as underlying type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>false if the type assertion fails.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So the second is a good way of doing type assertion since it prevents a panic. Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n\tage int\n}\n\nfunc (d dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\ta = lion{age: 10}\n\tprint(a)\n\n}\n\nfunc print(a animal) {\n\tl, ok := a.(lion)\n\tif ok {\n\t\tfmt.Println(l)\n\t} else {\n\t\tfmt.Println(\"a is not of type lion\")\n\t}\n\n\td, ok := a.(dog)\n\tif ok {\n\t\tfmt.Println(d)\n\t} else {\n\t\tfmt.Println(\"a is not of type lion\")\n\t}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{10}\na is not of type lion<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s move on to type switch now.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Type_Switch\"><\/span><strong>Type Switch<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Type switch enables us to do above type assertion in series. See below code example for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n\tage int\n}\n\nfunc (d dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\ta = lion{age: 10}\n\tprint(a)\n\n}\n\nfunc print(a animal) {\n\tswitch v := a.(type) {\n\tcase lion:\n\t\tfmt.Println(\"Type: lion\")\n\tcase dog:\n\t\tfmt.Println(\"Type: dog\")\n\tdefault:\n\t\tfmt.Printf(\"Unknown Type %T\", v)\n\t}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: lion<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the code above, using the type switch we determine the type of value contained in\u00a0 interface variable <strong>a<\/strong> is <strong>lion<\/strong> or <strong>dog<\/strong> or some other type. It is also ok to add more different types in case statement<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewType AssertionType Switch Overview Like any other variable, an interface variable is represented by a type and value. Interface value, in turn under the hood, consists of two tuple&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2643","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Access Underlying Variable of Interface in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Access Underlying Variable of Interface in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewType AssertionType Switch Overview Like any other variable, an interface variable is represented by a type and value. Interface value, in turn under the hood, consists of two tuple...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-07-18T17:34:24+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-07-18T17:34:38+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/\",\"name\":\"Access Underlying Variable of Interface in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg\",\"datePublished\":\"2020-07-18T17:34:24+00:00\",\"dateModified\":\"2020-07-18T17:34:38+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Access Underlying Variable of Interface in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Access Underlying Variable of Interface in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/","og_locale":"en_US","og_type":"article","og_title":"Access Underlying Variable of Interface in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewType AssertionType Switch Overview Like any other variable, an interface variable is represented by a type and value. Interface value, in turn under the hood, consists of two tuple...","og_url":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-07-18T17:34:24+00:00","article_modified_time":"2020-07-18T17:34:38+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/","url":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/","name":"Access Underlying Variable of Interface in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg","datePublished":"2020-07-18T17:34:24+00:00","dateModified":"2020-07-18T17:34:38+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/07\/interface_1.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/access-underlying-type-interface-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Access Underlying Variable of Interface in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-GD","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2643","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2643"}],"version-history":[{"count":4,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2643\/revisions"}],"predecessor-version":[{"id":2647,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2643\/revisions\/2647"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2643"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2643"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2643"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}