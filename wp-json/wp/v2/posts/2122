{"id":2122,"date":"2020-05-09T23:54:11","date_gmt":"2020-05-09T18:24:11","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2122"},"modified":"2020-11-25T00:44:02","modified_gmt":"2020-11-24T19:14:02","slug":"understand-for-range-loop-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/","title":{"rendered":"Understand for-range Loop in go (golang) &#8211; Complete Guide"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 11 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/understand-if-else-statement-golang\/\">If Else<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/for-loop-in-golang\/\">For Loop<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Overview<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">When it comes to loop, golang has:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>for loop<\/li><li>for-range loop<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">We saw for loop in the last tutorial. In this tutorial, we will be learning about the <strong>for-range<\/strong> loop only. <\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>for-range<\/strong> loop is used to iterate over different collection data structures in golang such as<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>array or slice<\/li><li>string<\/li><li>maps<\/li><li>channel<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see some examples now<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Examples<\/strong><\/h1>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>for-range loop for array\/slice<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Here is the format of <strong>for-range<\/strong> when used with array\/slice<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for index, value := range array\/slice {\n    \/\/Do something with index and value\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is how <strong>for-range <\/strong>loop works in case of array\/slice. It iterates over the given array\/slice starting from index zero and the body of the for range loop is executed for every value present at the index. Both index and value are optional in for-range when using with array\/slice. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below example shows how to use a <strong>for-range<\/strong> loop for a slice<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>With index and value<\/li><li>With value only<\/li><li>With index only<\/li><li>Without index and value<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    letters := []string{\"a\", \"b\", \"c\"}\n\n    \/\/With index and value\n    fmt.Println(\"Both Index and Value\")\n    for i, letter := range letters {\n        fmt.Printf(\"Index: %d Value:%s\\n\", i, letter)\n    }\n\n    \/\/Only value\n    fmt.Println(\"\\nOnly value\")\n    for _, letter := range letters {\n        fmt.Printf(\"Value: %s\\n\", letter)\n    }\n\n    \/\/Only index\n    fmt.Println(\"\\nOnly Index\")\n    for i := range letters {\n        fmt.Printf(\"Index: %d\\n\", i)\n    }\n\n    \/\/Without index and value. Just print array values\n    fmt.Println(\"\\nWithout Index and Value\")\n    i := 0\n    for range letters {\n        fmt.Printf(\"Index: %d Value: %s\\n\", i, letters[i])\n        i++\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both Index and Value\nIndex: 0 Value:a\nIndex: 1 Value:b\nIndex: 2 Value:c\n\nOnly value\nValue: a\nValue: b\nValue: c\n\nOnly Index\nIndex: 0\nIndex: 1\nIndex: 2\n\nWithout Index and Value\nIndex: 0 Value: a\nIndex: 1 Value: b\nIndex: 2 Value: c<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>for-range loop with a string<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In Golang string is a sequence of bytes. A string literal actually represents a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding to the first 128 Unicode characters.&nbsp;All other characters are between 1 -4 bytes. To understand it more consider the below string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample := \"a\u00a3c\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above string<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>&#8216;a&#8217; takes one byte as per UTF-8<\/li><li>&#8216;\u00a3&#8217; takes two bytes as per UTF-8<\/li><li>&#8216;b&#8217; takes one byte as per UTF-8<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The above string has 1+2+1 = 4 bytes altogether. Therefore when we try to print the length of the string using the standard <strong>len()<\/strong> function it will output 4 and not 3 as <strong>len()<\/strong> function returns the number of bytes in the string.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Length is %d\\n\", len(sample))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Hence <strong>standalone for<\/strong> loop cannot be used to iterate over all characters of a string as it will iterate over bytes and not character. So below <strong>for<\/strong> loop will instead iterate four times and the print value corresponding to the byte present at that index.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> for i := 0; i < len(sample); i++ {\n    fmt.Printf(\"%c\\n\", sample[i])\n }<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will output below string which is not same as <strong>\"a\u00a3c\" <\/strong>string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\u00c2\u00a3b<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above output is not what we want. This is where <strong>for-range<\/strong> loop comes into picture for a string. It iterates over the Unicode points( also referred to as rune in golang) in a string and will correctly output&nbsp; a, \u00a3, b.&nbsp; Here is the format when using <strong>for-range<\/strong> with string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for index, character := range string {\n    \/\/Do something with index and character\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some point to note before we move to a code example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>index is the starting point of the Unicode character in the string. For example in string \"a\u00a3c\" character \"a\" starts at index 0 , character \"\u00a3\" starts at index 1 while character \"b\" starts at index 3.<\/li><li>value is the Unicode point or basically each character in the string instead of bytes. It is also called rune. A rune in golang represents a Unicode Code Point<\/li><li>Both index and value are optional<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Now let's see a code example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := \"a\u00a3b\"\n\n    \/\/With index and value\n    fmt.Println(\"Both Index and Value\")\n    for i, letter := range sample {\n        fmt.Printf(\"Start Index: %d Value:%s\\n\", i, string(letter))\n    }\n\n    \/\/Only value\n    fmt.Println(\"\\nOnly value\")\n    for _, letter := range sample {\n        fmt.Printf(\"Value:%s\\n\", string(letter))\n    }\n\n    \/\/Only index\n    fmt.Println(\"\\nOnly Index\")\n    for i := range sample {\n        fmt.Printf(\"Start Index: %d\\n\", i)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both Index and Value\nStart Index: 0 Value:a\nStart Index: 1 Value:\u00a3\nStart Index: 3 Value:b\n\nOnly value\nValue:a\nValue:\u00a3\nValue:b\n\nOnly Index\nStart Index: 0\nStart Index: 1\nStart Index: 3<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>for-range loop with a map<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In case of map <strong>for-range<\/strong> iterates over key and values of a map. Below is the format for <strong>for-range<\/strong> when using with a map<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for key, value := range map {\n    \/\/Do something with key and value\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A point to be noted that both key and value are optional to be used while using <strong>for-range<\/strong> with maps. Let's see a simple code example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := map[string]string{\n        \"a\": \"x\",\n        \"b\": \"y\",\n    }\n\n    \/\/Iterating over all keys and values\n    fmt.Println(\"Both Key and Value\")\n    for k, v := range sample {\n        fmt.Printf(\"key :%s value: %s\\n\", k, v)\n    }\n\n    \/\/Iterating over only keys\n    fmt.Println(\"\\nOnly keys\")\n    for k := range sample {\n        fmt.Printf(\"key :%s\\n\", k)\n    }\n\n    \/\/Iterating over only values\n    fmt.Println(\"\\nOnly values\")\n    for _, v := range sample {\n        fmt.Printf(\"value :%s\\n\", v)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both Key and Value\nkey :a value: x\nkey :b value: y\n\nOnly keys\nkey :a\nkey :b\n\nOnly values\nvalue :x\nvalue :y<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>for-range loop with a channel<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>for-range <\/strong>loop works differently too for a channel. For a channel, an index doesn't make any sense as the channel is similar to a pipeline where values enter from one and exit from the other end. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">So in case of channel, the <strong>for-range<\/strong> loop will iterate over values currently present in the channel. After it has iterated over all the values currently present (if any), the <strong>for-range<\/strong> loop will not exit but instead wait for next value that might be pushed to the channel and it will exit only when the channel is closed<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format when using <strong>for-range <\/strong>with channel<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for value := range channel {\n    \/\/Do something value\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let's see a code example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan string)\n    go pushToChannel(ch)\n    for val := range ch {\n        fmt.Println(val)\n    }\n}\nfunc pushToChannel(ch chan<- string) {\n    ch <- \"a\"\n    ch <- \"b\"\n    ch <- \"c\"\n    close(ch)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\nc<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Conclusion<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about <strong>for-range<\/strong> loop in golang. Hope you like it. Please share feedback\/improvements\/mistakes in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/understand-if-else-statement-golang\/\">If Else<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/for-loop-in-golang\/\">For Loop<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 11 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0If ElsePrevious Tutorial\u00a0\u2013 For Loop Now&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2122","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understand for-range Loop in go (golang) - Complete Guide - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understand for-range Loop in go (golang) - Complete Guide - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 11 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0If ElsePrevious Tutorial\u00a0\u2013 For Loop Now...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-05-09T18:24:11+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-24T19:14:02+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/\",\"name\":\"Understand for-range Loop in go (golang) - Complete Guide - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-05-09T18:24:11+00:00\",\"dateModified\":\"2020-11-24T19:14:02+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understand for-range Loop in go (golang) &#8211; Complete Guide\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understand for-range Loop in go (golang) - Complete Guide - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/","og_locale":"en_US","og_type":"article","og_title":"Understand for-range Loop in go (golang) - Complete Guide - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 11 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0If ElsePrevious Tutorial\u00a0\u2013 For Loop Now...","og_url":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-05-09T18:24:11+00:00","article_modified_time":"2020-11-24T19:14:02+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/","url":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/","name":"Understand for-range Loop in go (golang) - Complete Guide - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-05-09T18:24:11+00:00","dateModified":"2020-11-24T19:14:02+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/understand-for-range-loop-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understand for-range Loop in go (golang) &#8211; Complete Guide"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-ye","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2122","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2122"}],"version-history":[{"count":11,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2122\/revisions"}],"predecessor-version":[{"id":4545,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2122\/revisions\/4545"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2122"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2122"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2122"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}