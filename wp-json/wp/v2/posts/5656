{"id":5656,"date":"2021-05-20T21:12:01","date_gmt":"2021-05-20T15:42:01","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5656"},"modified":"2021-05-20T21:15:15","modified_gmt":"2021-05-20T15:45:15","slug":"regex-prefix-suffix-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/","title":{"rendered":"Golang Regex: Match prefix or suffix of a string"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#Prefix_Matching\" title=\"Prefix Matching\">Prefix Matching<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#Suffix_Matching\" title=\"Suffix Matching\">Suffix Matching<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Golang regex contains two anchor characters that can be used to match the prefix and suffix of a string given a regular expression. These two characters are<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Caret Character &#8216;^&#8217; &#8211; <\/strong>It is an anchor character that can be used to match the prefix of a string.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Dollar Character &#8216;$&#8217; &#8211;\u00a0 <\/strong>It is an anchor character that can be used to match the suffix of a string.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at prefix and suffix matching one by one<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Prefix_Matching\"><\/span><strong>Prefix Matching<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">It is an anchor character that can be used to match the prefix of a string.\u00a0 It is used at the start of the regex to make sure that the given input string is matched with the regex from the start.\u00a0 Basically, matches the beginning of the input string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n\nfunc main() {\n    sampleRegex := regexp.MustCompile(\"^abc\")\n\n    match := sampleRegex.Match([]byte(\"abcd\"))\n    fmt.Printf(\"For abcd: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"abc\"))\n    fmt.Printf(\"For abc: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"1abc23\"))\n    fmt.Printf(\"For 1abc23: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"ab\"))\n    fmt.Printf(\"For ab: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: true\nFor abc: true\nFor 1abc23: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we used below regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">^abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice the caret character at the start. It will match any string which starts with <strong>&#8220;abc&#8221;<\/strong>. The trailing character doesn&#8217;t matter.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It gives matches for all the string which start with <strong>&#8220;abc&#8221;. <\/strong>That is why it gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: true\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and does not give a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1abc23: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p>  <\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Suffix_Matching\"><\/span><strong>Suffix Matching<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">It is an anchor character that can be used to match the suffix of a string. It is used at the end of the regex to make sure that the given input string is matched with the regex at the end.\u00a0It matches the end of the input string.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegex := regexp.MustCompile(\"abc$\")\n\n\tmatch := sampleRegex.Match([]byte(\"1abc\"))\n\tfmt.Printf(\"For 1abc: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"abcd\"))\n\tfmt.Printf(\"For abcd: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"ab\"))\n\tfmt.Printf(\"For ab: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1abc: true\nFor abc: true\nFor abcd: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we used below regex<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc$<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice the dollar character at the end. It will match any string which ends with <strong>&#8220;abc&#8221;<\/strong>. The starting characters doesn&#8217;t matter.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It gives matches for all the string which end with <strong>&#8220;abc&#8221;. <\/strong>That is why it gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1abc: true\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and does not give a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If we only want to match the complete string then we need to anchor the string with the <strong>caret<\/strong> character at the start and the <strong>dollar<\/strong> character at the end. This will enable us to do a full-string match. See the below example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"regexp\"\n)\nfunc main() {\n    sampleRegex := regexp.MustCompile(\"^abc$\")\n    match := sampleRegex.Match([]byte(\"abcd\"))\n\n    fmt.Printf(\"For abcd: %t\\n\", match)\n    match = sampleRegex.Match([]byte(\"1abc23\"))\n    fmt.Printf(\"For 1abc23: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"abc\"))\n    fmt.Printf(\"For abc: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: false\nFor 1abc23: false\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, the regex is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">^abc$<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But doesn&#8217;t give a match for below as it only matches the full string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abcd\n1abc23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewPrefix MatchingSuffix Matching Overview Golang regex contains two anchor characters that can be used to match the prefix and suffix of a string given a regular expression. These two&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-5656","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang Regex: Match prefix or suffix of a string - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"This article contains details about how to match prefix and suffix of a string. The caret and dollar character are used to that.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang Regex: Match prefix or suffix of a string - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This article contains details about how to match prefix and suffix of a string. The caret and dollar character are used to that.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-05-20T15:42:01+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-20T15:45:15+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/\",\"name\":\"Golang Regex: Match prefix or suffix of a string - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-05-20T15:42:01+00:00\",\"dateModified\":\"2021-05-20T15:45:15+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"This article contains details about how to match prefix and suffix of a string. The caret and dollar character are used to that.\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang Regex: Match prefix or suffix of a string\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang Regex: Match prefix or suffix of a string - Welcome To Golang By Example","description":"This article contains details about how to match prefix and suffix of a string. The caret and dollar character are used to that.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/","og_locale":"en_US","og_type":"article","og_title":"Golang Regex: Match prefix or suffix of a string - Welcome To Golang By Example","og_description":"This article contains details about how to match prefix and suffix of a string. The caret and dollar character are used to that.","og_url":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-05-20T15:42:01+00:00","article_modified_time":"2021-05-20T15:45:15+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/","url":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/","name":"Golang Regex: Match prefix or suffix of a string - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-05-20T15:42:01+00:00","dateModified":"2021-05-20T15:45:15+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"This article contains details about how to match prefix and suffix of a string. The caret and dollar character are used to that.","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/regex-prefix-suffix-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang Regex: Match prefix or suffix of a string"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1te","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5656","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5656"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5656\/revisions"}],"predecessor-version":[{"id":5661,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5656\/revisions\/5661"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5656"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5656"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5656"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}