{"id":2347,"date":"2020-06-21T00:36:40","date_gmt":"2020-06-20T19:06:40","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2347"},"modified":"2020-06-21T00:52:55","modified_gmt":"2020-06-20T19:22:55","slug":"understanding-var-keyword-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/","title":{"rendered":"Understanding var keyword in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\"><strong>var<\/strong> keyword is a reserved keyword in golang which is used to declare variables in go .variables are declared using the <strong>var<\/strong> keyword but there are other ways of declaring a variable too such as using <strong>:=<\/strong> operator<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below are different ways of declaring a variable using the var keyword.<\/p>\n\n\n\n<p class=\"has-large-font-size\"><strong>Single variable declaration without an initial value<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a single variable declaration without the initial value being assigned. First is the var keyword, second is the variable name and third is the variable type.\u00a0 Also note when the value is not provided, then the variable is initialized with the default value of that type which is also known as zero value of that type. In Go default value or zero value of <strong>int<\/strong> is zero<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var <variable_name> <type><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">See below example, it declares a var named <strong>aaa<\/strong> of type <strong>int<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa int\n    fmt.Println(aaa)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output: <\/strong>It will print the default value of int which is zero<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0<\/code><\/pre>\n\n\n\n<p class=\"has-large-font-size\"><strong>Single variable declaration with initial value<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a single variable declaration with initial\u00a0value being assigned. Everything is same as above, only thing additional is that we assign value to the variable at the end<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var <variable_name> <type> = <value><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">See below example, it declares a var named <strong>aaa<\/strong> of type <strong>int <\/strong>and gives a value <strong>8<\/strong> to it<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa int = 8\n    fmt.Println(aaa)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8<\/code><\/pre>\n\n\n\n<p class=\"has-large-font-size\"><strong>Multiple variable declaration without initial value<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a multiple variable declaration without initial value being assigned. Please note only variables of same type can be declared together. The type comes at the end<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var <name1> <name2> etc <type><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa, bbb int\n    fmt.Println(aaa)\n    fmt.Println(bbb)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output: <\/strong>It will print the default or zero value of <strong>int<\/strong> which is zero for both <strong>aaa<\/strong> and <strong>bbb<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0\n0<\/code><\/pre>\n\n\n\n<p class=\"has-large-font-size\"><strong>Multiple variable declaration with initial value<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a multiple variable declaration with initial value being assigned. Please note only variables of same type can be declared together. The type comes at the end<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var <name1> <name2> etc <type> = <value1> <value2> etc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">See below code example. Variable <strong>aaa<\/strong> and <strong>bbb<\/strong> are given a value of 8 and 9 respectively in a single declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa, bbb int = 8, 9\n    fmt.Println(aaa)\n    fmt.Println(bbb)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8\n9<\/code><\/pre>\n\n\n\n<p class=\"has-large-font-size\"><strong>Declare variables of different types<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for declaring multiple variables with different types. Value can or cannot be assigned to the variable at that time. Variables for which value is not assigned will get default value of that type. In below example we see three declarations.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var (\n        aaa int\n        bbb int    = 8\n        ccc string = \"a\"\n    )\n\n    fmt.Println(aaa)\n    fmt.Println(bbb)\n    fmt.Println(ccc)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0\n8\na<\/code><\/pre>\n\n\n\n<p class=\"has-large-font-size\"><strong>Variable Declaration with no type or Type Inference<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Variables can also be declared without specifying the type.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The GO compiler based upon the value assigned to it will figure out the type. So if the variable has an initial value, then type can be omitted.\u00a0 This is also called <strong>Type Inference<\/strong>. Below is the format for such declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var <varialbe_name> = value<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below is the type inference table for basic types <strong>int<\/strong>, <strong>float<\/strong>, <strong>complex numbers<\/strong>, <strong>string<\/strong>, <strong>boolean<\/strong>, <strong>characters<\/strong>. It basically means that if the value is an integer the type of the variable inferred will be <strong>int<\/strong>, if the value is a float then type of the variable inferred will be <strong>float64<\/strong> and so on based upon below table.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>Integers<\/td><td>int<\/td><\/tr><tr><td>Floats<\/td><td>float64<\/td><\/tr><tr><td>Complex Numbers<\/td><td>complex128<\/td><\/tr><tr><td>Strings<\/td><td>string<\/td><\/tr><tr><td>Booleans<\/td><td>bool<\/td><\/tr><tr><td>Characters<\/td><td>int32 or rune<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">For other types such as <strong>Array<\/strong>, <strong>Pointer<\/strong>, <strong>Structure,<\/strong> etc, type Inference will happen based on the value. Let&#8217;s see a working example of the above point.\u00a0 Notice that type of t is correctly inferred as int as the value assigned to it is 123 which is int. Similarly type of u is also correctly inferred as string as the value assigned to it is a <strong>string<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also notice that the type of variable <strong>z<\/strong> is inferred correctly as a struct <strong>a<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var t = 123      \/\/Type Inferred will be int\n    var u = \"circle\" \/\/Type Inferred will be string\n    var v = 5.6      \/\/Type Inferred will be float64\n    var w = true     \/\/Type Inferred will be bool\n    var x = 'a'      \/\/Type Inferred will be rune\n    var y = 3 + 5i   \/\/Type Inferred will be complex128\n    var z = &a{name: \"test\"}\n\n    fmt.Printf(\"Type: %T Value: %v\\n\", t, t)\n    fmt.Printf(\"Type: %T Value: %v\\n\", u, u)\n    fmt.Printf(\"Type: %T Value: %v\\n\", v, v)\n    fmt.Printf(\"Type: %T Value: %v\\n\", w, w)\n    fmt.Printf(\"Type: %T Value: %v\\n\", x, x)\n    fmt.Printf(\"Type: %T Value: %v\\n\", y, y)\n    fmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}\n\ntype a struct {\n    name string\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\nType: *main.a Value: &{test}<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>var keyword is a reserved keyword in golang which is used to declare variables in go .variables are declared using the var keyword but there are other ways of declaring a variable&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2347","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understanding var keyword in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understanding var keyword in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"var keyword is a reserved keyword in golang which is used to declare variables in go .variables are declared using the var keyword but there are other ways of declaring a variable...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-20T19:06:40+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-06-20T19:22:55+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/\",\"name\":\"Understanding var keyword in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-06-20T19:06:40+00:00\",\"dateModified\":\"2020-06-20T19:22:55+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understanding var keyword in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understanding var keyword in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/","og_locale":"en_US","og_type":"article","og_title":"Understanding var keyword in Go (Golang) - Welcome To Golang By Example","og_description":"var keyword is a reserved keyword in golang which is used to declare variables in go .variables are declared using the var keyword but there are other ways of declaring a variable...","og_url":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-06-20T19:06:40+00:00","article_modified_time":"2020-06-20T19:22:55+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/","url":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/","name":"Understanding var keyword in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-06-20T19:06:40+00:00","dateModified":"2020-06-20T19:22:55+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/understanding-var-keyword-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understanding var keyword in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-BR","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2347","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2347"}],"version-history":[{"count":4,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2347\/revisions"}],"predecessor-version":[{"id":2352,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2347\/revisions\/2352"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2347"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2347"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2347"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}