{"id":6299,"date":"2021-08-30T19:30:11","date_gmt":"2021-08-30T14:00:11","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6299"},"modified":"2022-01-26T21:07:16","modified_gmt":"2022-01-26T15:37:16","slug":"group-anagrams-together-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/","title":{"rendered":"Group anagrams together program in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\" id=\"overview\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Given an array of strings, write a program to group all anagrams together.&nbsp; From Wikipedia<\/p>\n\n\n\n<p class=\"has-medium-font-size\">An\u00a0<strong>anagram<\/strong>\u00a0is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\u00a0For example, the word\u00a0<em>anagram<\/em>\u00a0itself can be rearranged into\u00a0<em>nagaram<\/em>, also the word\u00a0<em>binary<\/em>\u00a0into\u00a0<em>brainy<\/em><sup>,<\/sup>\u00a0and the word\u00a0<em>adobe<\/em>\u00a0into\u00a0the <em>abode<\/em>.<br>For eg<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Input: [\"art\", \"tap\", \"rat\", \"pat\", \"tar\",\"arm\"]\nOutput: [[\"art\", \"rat\", \"tar\"], [\"tap\", \"pat\"], [\"arm\"]]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below will the strategy.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Duplicate the original array. Sort each string in the duplicate array. After sorting the duplicate array will look like this<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[\"art\", \"apt\", \"art\", \"apt\", \"art\", \"arm\"]<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Create a map to store the output<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var output map[string][]int<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Build a trie for the above duplicate array with all strings sorted. Update the map above after inserting each element. Map should look like as below for &#8220;art&#8221; as art has its anagrams at 0,2 and 5 positions in the original array.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[\"art\"] = [0,2,4]<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Iterate over the map and print the output by indexing in the input array of strings<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\" id=\"program\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\tstrs := []string{\"art\", \"tap\", \"rat\", \"pat\", \"tar\", \"arm\"}\n\toutput := groupAnagrams(strs)\n\tfmt.Println(output)\n\n\tstrs = []string{\"\"}\n\toutput = groupAnagrams(strs)\n\tfmt.Println(output)\n\n\tstrs = []string{\"a\"}\n\toutput = groupAnagrams(strs)\n\tfmt.Println(output)\n}\n\ntype sortRune []rune\n\nfunc (s sortRune) Swap(i, j int) {\n\ts[i], s[j] = s[j], s[i]\n}\n\nfunc (s sortRune) Less(i, j int) bool {\n\treturn s[i] < s[j]\n}\n\nfunc (s sortRune) Len() int {\n\treturn len(s)\n}\n\nfunc groupAnagrams(strs []string) [][]string {\n\n\tanagramMap := make(map[string][]int)\n\tvar anagrams [][]string\n\ttrie := &#038;trie{root: &#038;trieNode{}}\n\n\tlenStrs := len(strs)\n\n\tvar strsDup []string\n\n\tfor i := 0; i < lenStrs; i++ {\n\t\truneCurrent := []rune(strs[i])\n\t\tsort.Sort(sortRune(runeCurrent))\n\t\tstrsDup = append(strsDup, string(runeCurrent))\n\t}\n\n\tfor i := 0; i < lenStrs; i++ {\n\t\tanagramMap = trie.insert(strsDup[i], i, anagramMap)\n\t}\n\n\tfor _, value := range anagramMap {\n\t\tvar combinedTemp []string\n\t\tfor i := 0; i < len(value); i++ {\n\t\t\tcombinedTemp = append(combinedTemp, strs[value[i]])\n\t\t}\n\t\tanagrams = append(anagrams, combinedTemp)\n\t}\n\n\treturn anagrams\n}\n\ntype trieNode struct {\n\tisWord    bool\n\tchildrens [26]*trieNode\n}\n\ntype trie struct {\n\troot *trieNode\n}\n\nfunc (t *trie) insert(input string, wordIndex int, anagramMap map[string][]int) map[string][]int {\n\tinputLen := len(input)\n\tcurrent := t.root\n\n\tfor i := 0; i < inputLen; i++ {\n\t\tindex := input[i] - 'a'\n\t\tif current.childrens[index] == nil {\n\t\t\tcurrent.childrens[index] = &#038;trieNode{}\n\t\t}\n\t\tcurrent = current.childrens[index]\n\t}\n\tcurrent.isWord = true\n\tif anagramMap[input] == nil {\n\t\tanagramMap[input] = []int{wordIndex}\n\t} else {\n\t\tanagramMap[input] = append(anagramMap[input], wordIndex)\n\t}\n\treturn anagramMap\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[[art rat tar] [tap pat] [arm]]\n[[]]\n[[a]]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Note: <\/strong>Check out our Golang Advanced Tutorial. The tutorials in this series are elaborative and we have tried to cover all concepts with examples. This tutorial is for those who are looking to gain expertise and a solid understanding of golang - <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also if you are interested in understanding how all design patterns can be implemented in Golang. If yes, then this post is for you -<a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns Golang<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview Given an array of strings, write a program to group all anagrams together.&nbsp; From Wikipedia An\u00a0anagram\u00a0is a word or phrase formed by rearranging the letters of a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6299","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Group anagrams together program in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Group anagrams together program in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgram Overview Given an array of strings, write a program to group all anagrams together.&nbsp; From Wikipedia An\u00a0anagram\u00a0is a word or phrase formed by rearranging the letters of a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-08-30T14:00:11+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-26T15:37:16+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/\",\"name\":\"Group anagrams together program in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-08-30T14:00:11+00:00\",\"dateModified\":\"2022-01-26T15:37:16+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Group anagrams together program in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Group anagrams together program in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/","og_locale":"en_US","og_type":"article","og_title":"Group anagrams together program in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgram Overview Given an array of strings, write a program to group all anagrams together.&nbsp; From Wikipedia An\u00a0anagram\u00a0is a word or phrase formed by rearranging the letters of a...","og_url":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-08-30T14:00:11+00:00","article_modified_time":"2022-01-26T15:37:16+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/","url":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/","name":"Group anagrams together program in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-08-30T14:00:11+00:00","dateModified":"2022-01-26T15:37:16+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/group-anagrams-together-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/group-anagrams-together-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Group anagrams together program in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1DB","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6299","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6299"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6299\/revisions"}],"predecessor-version":[{"id":6559,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6299\/revisions\/6559"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6299"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6299"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6299"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}