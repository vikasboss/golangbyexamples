{"id":687,"date":"2019-11-29T18:10:48","date_gmt":"2019-11-29T18:10:48","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=687"},"modified":"2019-12-27T16:38:38","modified_gmt":"2019-12-27T16:38:38","slug":"observer-design-pattern-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/","title":{"rendered":"Observer Design Pattern in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference  &#8211; <a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns in Go (Golang)<\/a><\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#Introduction\" title=\"Introduction:\">Introduction:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#UML_Diagram\" title=\"UML Diagram:\">UML Diagram:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#Mapping\" title=\"Mapping:\">Mapping:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#Practical_Example\" title=\"Practical Example:\">Practical Example:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#Full_Working_Code\" title=\"Full Working Code:\">Full Working Code:<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Observer Design Pattern is a behavioral design pattern. This pattern allows an instance <strong>(called subject)<\/strong> to publish events to other multiple instances <strong>(called observers).<\/strong>&nbsp; These <strong>observers<\/strong> subscribe to the <strong>subject<\/strong> and hence get notified by events in case of any change happening in the <strong>subject. <\/strong><br><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s take an example. In the E-Commerce website, many items go out of stock. There can be customers, who are interested in a particular item that went out of stock. There are three solutions to this problem<br><\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>The customer keeps checking the availability of the item at some frequency.<\/li><li>E-Commerce bombard customers with all new items available which are in stock<\/li><li>The customer subscribes only to the particular item he is interested in&nbsp;and gets notified in the case that item is available. Also, multiple customers can subscribe to the same product<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Option 3 is most viable, and this is what Observer Patter is all about. The major components of the observer pattern are:<br><\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li><strong>Subject<\/strong> &#8211; It is the instance to which publishes an event when anything changes.&nbsp;<\/li><li><strong>Observer<\/strong> &#8211; It subscribes to the subject and gets notified by the events.<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Generally,  <strong>Subject<\/strong> and <strong>Observer<\/strong> are implemented as an interface. Concrete implementation of both are used<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"UML_Diagram\"><\/span><strong>UML Diagram:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"440\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg?resize=640%2C440&#038;ssl=1\" alt=\"\" class=\"wp-image-688\" srcset=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg?w=671&amp;ssl=1 671w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg?resize=300%2C206&amp;ssl=1 300w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Mapping\"><\/span><strong>Mapping:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The below table represents the mapping from the UML diagram actors to actual implementation actors in <strong>&#8220;Practical Example&#8221;<\/strong> below<br><\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>Subject<\/td><td>subject.go<\/td><\/tr><tr><td>Concrete Subject<\/td><td>item.go<\/td><\/tr><tr><td>observer<\/td><td>observer.go<\/td><\/tr><tr><td>Concrete Observer 1<\/td><td>customer.go<\/td><\/tr><tr><td>Client<\/td><td>main.go<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Practical_Example\"><\/span><strong>Practical Example:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>subject.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype subject interface {\n    register(Observer observer)\n    deregister(Observer observer)\n    notifyAll()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>item.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype item struct {\n    observerList []observer\n    name         string\n    inStock      bool\n}\n\nfunc newItem(name string) *item {\n    return &item{\n        name: name,\n    }\n}\n\nfunc (i *item) updateAvailability() {\n    fmt.Printf(\"Item %s is now in stock\\n\", i.name)\n    i.inStock = true\n    i.notifyAll()\n}\n\nfunc (i *item) register(o observer) {\n    i.observerList = append(i.observerList, o)\n}\n\nfunc (i *item) deregister(o observer) {\n    i.observerList = removeFromslice(i.observerList, o)\n}\n\nfunc (i *item) notifyAll() {\n    for _, observer := range i.observerList {\n        observer.update(i.name)\n    }\n}\n\nfunc removeFromslice(observerList []observer, observerToRemove observer) []observer {\n    observerListLength := len(observerList)\n    for i, observer := range observerList {\n        if observerToRemove.getID() == observer.getID() {\n            observerList[observerListLength-1], observerList[i] = observerList[i], observerList[observerListLength-1]\n            return observerList[:observerListLength-1]\n        }\n    }\n    return observerList\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>observer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype observer interface {\n    update(string)\n    getID() string\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>customer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype customer struct {\n    id string\n}\n\nfunc (c *customer) update(itemName string) {\n    fmt.Printf(\"Sending email to customer %s for item %s\\n\", c.id, itemName)\n}\n\nfunc (c *customer) getID() string {\n    return c.id\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    shirtItem := newItem(\"Nike Shirt\")\n    observerFirst := &customer{id: \"abc@gmail.com\"}\n    observerSecond := &customer{id: \"xyz@gmail.com\"}\n    shirtItem.register(observerFirst)\n    shirtItem.register(observerSecond)\n    shirtItem.updateAvailability()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Item Nike Shirt is now in stock\nSending email to customer abc@gmail.com for item Nike Shirt\nSending email to customer xyz@gmail.com for item Nike Shirt<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype subject interface {\n    register(Observer observer)\n    deregister(Observer observer)\n    notifyAll()\n}\n\ntype item struct {\n    observerList []observer\n    name         string\n    inStock      bool\n}\n\nfunc newItem(name string) *item {\n    return &item{\n        name: name,\n    }\n}\n\nfunc (i *item) updateAvailability() {\n    fmt.Printf(\"Item %s is now in stock\\n\", i.name)\n    i.inStock = true\n    i.notifyAll()\n}\n\nfunc (i *item) register(o observer) {\n    i.observerList = append(i.observerList, o)\n}\n\nfunc (i *item) deregister(o observer) {\n    i.observerList = removeFromslice(i.observerList, o)\n}\n\nfunc (i *item) notifyAll() {\n    for _, observer := range i.observerList {\n        observer.update(i.name)\n    }\n}\n\nfunc removeFromslice(observerList []observer, observerToRemove observer) []observer {\n    observerListLength := len(observerList)\n    for i, observer := range observerList {\n        if observerToRemove.getID() == observer.getID() {\n            observerList[observerListLength-1], observerList[i] = observerList[i], observerList[observerListLength-1]\n            return observerList[:observerListLength-1]\n        }\n    }\n    return observerList\n}\n\ntype observer interface {\n    update(string)\n    getID() string\n}\n\ntype customer struct {\n    id string\n}\n\nfunc (c *customer) update(itemName string) {\n    fmt.Printf(\"Sending email to customer %s for item %s\\n\", c.id, itemName)\n}\n\nfunc (c *customer) getID() string {\n    return c.id\n}\n\nfunc main() {\n    shirtItem := newItem(\"Nike Shirt\")\n    observerFirst := &customer{id: \"abc@gmail.com\"}\n    observerSecond := &customer{id: \"xyz@gmail.com\"}\n    shirtItem.register(observerFirst)\n    shirtItem.register(observerSecond)\n    shirtItem.updateAvailability()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">Item Nike Shirt is now in stock\nSending email to customer abc@gmail.com for item Nike Shirt\nSending email to customer xyz@gmail.com for item Nike Shirt<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping:Practical Example:Full&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[26,4,87,86,27],"class_list":["post-687","post","type-post","status-publish","format-standard","hentry","category-tech","tag-design","tag-golang","tag-observer","tag-observer-design-pattern-in-go","tag-pattern"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Observer Design Pattern in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Observer Design Pattern in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping:Practical Example:Full...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-11-29T18:10:48+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-12-27T16:38:38+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/\",\"name\":\"Observer Design Pattern in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg\",\"datePublished\":\"2019-11-29T18:10:48+00:00\",\"dateModified\":\"2019-12-27T16:38:38+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Observer Design Pattern in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Observer Design Pattern in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/","og_locale":"en_US","og_type":"article","og_title":"Observer Design Pattern in Go (Golang) - Welcome To Golang By Example","og_description":"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping:Practical Example:Full...","og_url":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-11-29T18:10:48+00:00","article_modified_time":"2019-12-27T16:38:38+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/","url":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/","name":"Observer Design Pattern in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg","datePublished":"2019-11-29T18:10:48+00:00","dateModified":"2019-12-27T16:38:38+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Observer-Design-Pattern-1.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/observer-design-pattern-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Observer Design Pattern in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-b5","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/687","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=687"}],"version-history":[{"count":5,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/687\/revisions"}],"predecessor-version":[{"id":1030,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/687\/revisions\/1030"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=687"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=687"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=687"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}