{"id":839,"date":"2019-12-18T15:40:07","date_gmt":"2019-12-18T15:40:07","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=839"},"modified":"2022-04-04T23:35:43","modified_gmt":"2022-04-04T18:05:43","slug":"minheap-in-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/minheap-in-golang\/","title":{"rendered":"MinHeap in Golang"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#Introduction\" title=\"Introduction\">Introduction<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#Operations_on_Minheap\" title=\"Operations on Minheap\">Operations on Minheap<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#Implementation\" title=\"Implementation\">Implementation<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A MinHeap is a complete binary tree in which the value of the parent node is less than or equal to the value of its left and right child. A complete binary tree is a binary tree in which all levels are full except the last level.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">We use an array to represent a minheap. The root element is arr[0]. For an index i we have<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Left Child &#8211; 2*i + 1<\/li><li>Right Child &#8211; 2*i + 2<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below is a representation of a minheap<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"201\" height=\"191\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png?resize=201%2C191&#038;ssl=1\" alt=\"\" class=\"wp-image-840\" data-recalc-dims=\"1\"\/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The corresponding array would be [2, 3, 5, 7, 6, 8]<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For 0 index we have <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Left Child &#8211; 2*0 + 1 = 1<\/li><li>Right Child &#8211; 2*0 + 2 = 2<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Thus arr[0] i.e 2 has left child as arr[1] i.e, 3 and right child as arr[2] i.e 5<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Since each node value is less or equal to the value of its children, therefore, value at the root is the smallest value.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Operations_on_Minheap\"><\/span><strong>Operations on Minheap<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Insert an Element<\/strong>&#8211; takes O(log n) time. If the inserted value is smaller than its parent, then we need to traverse up to fix. This traversal continues up till the inserted value is greater than its parent or the inserted value becomes the root itself. The second case will happen when the inserted value is the smallest.<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Remove Minimum Element <\/strong>&#8211; takes O(log n) time. It saves the root value and then replaces it with the last value in the array. It then minheapifies the root which takes O(log n) time as it traverses down until it is less than its parent.<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Get Minimum<\/strong> &#8211; takes O(1) times. Returns the root value<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Implementation\"><\/span><strong>Implementation<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype minheap struct {\n    heapArray []int\n    size      int\n    maxsize   int\n}\n\nfunc newMinHeap(maxsize int) *minheap {\n    minheap := &minheap{\n        heapArray: []int{},\n        size:      0,\n        maxsize:   maxsize,\n    }\n    return minheap\n}\n\nfunc (m *minheap) leaf(index int) bool {\n    if index >= (m.size\/2) && index <= m.size {\n        return true\n    }\n    return false\n}\n\nfunc (m *minheap) parent(index int) int {\n    return (index - 1) \/ 2\n}\n\nfunc (m *minheap) leftchild(index int) int {\n    return 2*index + 1\n}\n\nfunc (m *minheap) rightchild(index int) int {\n    return 2*index + 2\n}\n\nfunc (m *minheap) insert(item int) error {\n    if m.size >= m.maxsize {\n        return fmt.Errorf(\"Heap is full\")\n    }\n    m.heapArray = append(m.heapArray, item)\n    m.size++\n    m.upHeapify(m.size - 1)\n    return nil\n}\n\nfunc (m *minheap) swap(first, second int) {\n    temp := m.heapArray[first]\n    m.heapArray[first] = m.heapArray[second]\n    m.heapArray[second] = temp\n}\n\nfunc (m *minheap) upHeapify(index int) {\n    for m.heapArray[index] < m.heapArray[m.parent(index)] {\n        m.swap(index, m.parent(index))\n        index = m.parent(index)\n    }\n}\n\nfunc (m *minheap) downHeapify(current int) {\n    if m.leaf(current) {\n        return\n    }\n    smallest := current\n    leftChildIndex := m.leftchild(current)\n    rightRightIndex := m.rightchild(current)\n    \/\/If current is smallest then return\n    if leftChildIndex < m.size &#038;&#038; m.heapArray[leftChildIndex] < m.heapArray[smallest] {\n        smallest = leftChildIndex\n    }\n    if rightRightIndex < m.size &#038;&#038; m.heapArray[rightRightIndex] < m.heapArray[smallest] {\n        smallest = rightRightIndex\n    }\n    if smallest != current {\n        m.swap(current, smallest)\n        m.downHeapify(smallest)\n    }\n    return\n}\nfunc (m *minheap) buildMinHeap() {\n    for index := ((m.size \/ 2) - 1); index >= 0; index-- {\n        m.downHeapify(index)\n    }\n}\n\nfunc (m *minheap) remove() int {\n    top := m.heapArray[0]\n    m.heapArray[0] = m.heapArray[m.size-1]\n    m.heapArray = m.heapArray[:(m.size)-1]\n    m.size--\n    m.downHeapify(0)\n    return top\n}\n\nfunc main() {\n    inputArray := []int{6, 5, 3, 7, 2, 8}\n    minHeap := newMinHeap(len(inputArray))\n    for i := 0; i < len(inputArray); i++ {\n        minHeap.insert(inputArray[i])\n    }\n    minHeap.buildMinHeap()\n    for i := 0; i < len(inputArray); i++ {\n        fmt.Println(minHeap.remove())\n    }\n    fmt.Scanln()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">2\n3\n5\n6\n7\n8<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents IntroductionOperations on MinheapImplementation Introduction A MinHeap is a complete binary tree in which the value of the parent node is less than or equal to the value of its&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,108],"class_list":["post-839","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-meanheap-in-go"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>MinHeap in Golang - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/minheap-in-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"MinHeap in Golang - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents IntroductionOperations on MinheapImplementation Introduction A MinHeap is a complete binary tree in which the value of the parent node is less than or equal to the value of its...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/minheap-in-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-12-18T15:40:07+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-04T18:05:43+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/\",\"name\":\"MinHeap in Golang - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png\",\"datePublished\":\"2019-12-18T15:40:07+00:00\",\"dateModified\":\"2022-04-04T18:05:43+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/minheap-in-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/minheap-in-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"MinHeap in Golang\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"MinHeap in Golang - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/minheap-in-golang\/","og_locale":"en_US","og_type":"article","og_title":"MinHeap in Golang - Welcome To Golang By Example","og_description":"Table of Contents IntroductionOperations on MinheapImplementation Introduction A MinHeap is a complete binary tree in which the value of the parent node is less than or equal to the value of its...","og_url":"https:\/\/golangbyexamples.com\/minheap-in-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-12-18T15:40:07+00:00","article_modified_time":"2022-04-04T18:05:43+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/minheap-in-golang\/","url":"https:\/\/golangbyexamples.com\/minheap-in-golang\/","name":"MinHeap in Golang - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/minheap-in-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/minheap-in-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png","datePublished":"2019-12-18T15:40:07+00:00","dateModified":"2022-04-04T18:05:43+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/minheap-in-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/minheap-in-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/minheap-in-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/12\/MinHeap-Example.png"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/minheap-in-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"MinHeap in Golang"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-dx","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/839","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=839"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/839\/revisions"}],"predecessor-version":[{"id":6913,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/839\/revisions\/6913"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=839"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=839"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=839"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}