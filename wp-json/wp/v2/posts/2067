{"id":2067,"date":"2020-04-30T14:42:27","date_gmt":"2020-04-30T14:42:27","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2067"},"modified":"2021-03-04T00:10:31","modified_gmt":"2021-03-03T18:40:31","slug":"variables-in-golang-complete-guide","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/","title":{"rendered":"Variables in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the chapter 6 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Comprehensive Tutorial Series<\/u><\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\">All basic data types<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\">Packages and Modules \u2013 Part 2<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for the current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#What_is_variable\" title=\"What is variable\">What is variable<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Naming_Conventions\" title=\"Naming Conventions\">Naming Conventions<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Declaring_a_variable\" title=\"Declaring a variable\">Declaring a variable<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Single_variable_declaration_without_initial_value\" title=\"Single variable declaration without initial value\">Single variable declaration without initial value<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Single_variable_declaration_with_initial_value\" title=\"Single variable declaration with initial value\">Single variable declaration with initial value<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Multiple_variable_declaration_without_initial_value\" title=\"Multiple variable declaration without initial value\">Multiple variable declaration without initial value<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Multiple_variable_declaration_with_initial_value\" title=\"Multiple variable declaration with initial value\">Multiple variable declaration with initial value<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Declare_variables_of_different_types\" title=\"Declare variables of different types\">Declare variables of different types<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Variable_Declaration_with_no_type_or_Type_Inference\" title=\"Variable Declaration with no type or Type Inference\">Variable Declaration with no type or Type Inference<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Short_variable_declaration\" title=\"Short variable declaration\">Short variable declaration<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Important_Points\" title=\"Important Points\">Important Points<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Scope_of_a_Variable_Local_and_Global_Variable\" title=\"Scope of a Variable (Local and Global Variable)\">Scope of a Variable (Local and Global Variable)<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Local_Variable\" title=\"Local Variable\">Local Variable<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Global_Variable\" title=\"Global Variable\">Global Variable<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"What_is_variable\"><\/span><strong>What is variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A variable is the name of a memory location. That memory location may store a value of any type. So each variable has a type associated with it which determines the size and range of that variable and also the operations defined on that variable.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Naming_Conventions\"><\/span><strong>Naming Conventions<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A variable name can only start with a letter or an underscore.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It can be followed by any number of letters, numbers or underscores after that<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Go is case sensitive so uppercase and lowercase letters are treated differently.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The variable name cannot be any keyword name in Go<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>There is no limit on the length of the variable name. <\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>But it is advisable to have the variable name of optimum length.<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Declaring_a_variable\"><\/span><strong>Declaring a variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In GO variables are declared using the <strong>var<\/strong> keyword but there are other ways of declaring a variable too as we will see later in this tutorial. Let&#8217;s explore different ways of declaring a variable<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Single_variable_declaration_without_initial_value\"><\/span><strong>Single variable declaration without initial value<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a single variable declaration without initial value being assigned. First is the <strong>var<\/strong> keyword, second is the <strong>variable name<\/strong> and third is the <strong>variable type<\/strong>.&nbsp; Also note when the value is not provided , then the variable is initialised with the default value of that type which is also known as zero value of that type. In Go default value or zero value of <strong>int<\/strong> is zero<\/p>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color has-medium-font-size\"><strong>var &lt;variable_name&gt; &lt;type&gt;<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">See the below example, it declares a var named <strong>aaa<\/strong> of type <strong>int<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa int\n    fmt.Println(aaa)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output: <\/strong>It will print the default value of int which is zero<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Single_variable_declaration_with_initial_value\"><\/span><strong>Single variable declaration with initial value<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a single variable declaration with initial&nbsp;value being assigned. Everything is same as above, only thing additional is that we assign value to the variable at the end<\/p>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color has-medium-font-size\"><strong>var &lt;variable_name&gt; &lt;type&gt; = &lt;value&gt;<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">See below example, it declares a var named <strong>aaa<\/strong> of type <strong>int <\/strong>and gives a value <strong>8<\/strong> to it<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa int = 8\n    fmt.Println(aaa)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Multiple_variable_declaration_without_initial_value\"><\/span><strong>Multiple variable declaration without initial value<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a multiple variable declaration without initial value being assigned. Please note only variables of same type can be declared together. The type comes at the end<\/p>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color has-medium-font-size\"><strong>var &lt;name1>, &lt;name2><\/strong>,&#8230;.<strong>&lt;nameN> &lt;type><\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa, bbb int\n    fmt.Println(aaa)\n    fmt.Println(bbb)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output: <\/strong>It will print the default or zero value of <strong>int<\/strong> which is zero for both <strong>aaa<\/strong> and <strong>bbb<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0\n0<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Multiple_variable_declaration_with_initial_value\"><\/span><strong>Multiple variable declaration with initial value<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format of a multiple variable declaration with initial value being assigned. Please note only variables of same type can be declared together. The type comes at the end<\/p>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color has-medium-font-size\"><strong>var &lt;name1>, &lt;name2>, \u2026..,&lt;nameN> &lt;type> = &lt;value1>, &lt;value2>, \u2026..,&lt;valueN><\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">See below code example. Variable <strong>aaa<\/strong> and <strong>bbb<\/strong> are given a value of 8 and 9 respectively in a single declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa, bbb int = 8, 9\n    fmt.Println(aaa)\n    fmt.Println(bbb)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8\n9<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Declare_variables_of_different_types\"><\/span><strong>Declare variables of different types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the format for declaring multiple variables with different types. Value can or cannot be assigned to the variable at that time. Variables for which value is not assigned will get default value of that type. In below example we see three declarations.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var (\n        aaa int\n        bbb int    = 8\n        ccc string = \"a\"\n    )\n\n    fmt.Println(aaa)\n    fmt.Println(bbb)\n    fmt.Println(ccc)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0\n8\na<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Variable_Declaration_with_no_type_or_Type_Inference\"><\/span><strong>Variable Declaration with no type or Type Inference<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Variables can also be declared without specifying the type.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The GO compiler based upon the value assigned to the variable will figure out the type. So if the variable has an initial value, then the type can be omitted.&nbsp; This is also called <strong>Type Inference<\/strong>. Below is the format for such declaration<\/p>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color has-medium-font-size\"><strong>var &lt;varialbe_name&gt; = &lt;value&gt;<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the type inference table for basic types <strong>int<\/strong>, <strong>float<\/strong>, <strong>complex numbers<\/strong>, <strong>string<\/strong>, <strong>boolean<\/strong>, <strong>characters<\/strong>. It basically means that if the value is an integer the type of the variable inferred will be <strong>int<\/strong>, if the value is a float then type of the variable inferred will be <strong>float64<\/strong> and so on based upon below table.<\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>Integers<\/td><td>int<\/td><\/tr><tr><td>Floats<\/td><td>float64<\/td><\/tr><tr><td>Complex Numbers<\/td><td>complex128<\/td><\/tr><tr><td>Strings<\/td><td>string<\/td><\/tr><tr><td>Booleans<\/td><td>bool<\/td><\/tr><tr><td>Characters<\/td><td>int32 or rune<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">For other types such as <strong>Array<\/strong>, <strong>Pointer<\/strong>, <strong>Structure,<\/strong> etc, type Inference will happen based on the value. Let&#8217;s see a working example of the above point.&nbsp; Notice that type of t is correctly inferred as int as the value assigned to it is 123 which is int. Similarly type of u is also correctly inferred as <strong>string<\/strong> as the value assigned to it is a <strong>string<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also notice that the type of variable <strong>z<\/strong> is inferred correctly as a struct <strong>main.sample<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var t = 123      \/\/Type Inferred will be int\n    var u = \"circle\" \/\/Type Inferred will be string\n    var v = 5.6      \/\/Type Inferred will be float64\n    var w = true     \/\/Type Inferred will be bool\n    var x = 'a'      \/\/Type Inferred will be rune\n    var y = 3 + 5i   \/\/Type Inferred will be complex128\n    var z = sample{name: \"test\"}  \/\/Type Inferred will be main.Sample\n\n    fmt.Printf(\"Type: %T Value: %v\\n\", t, t)\n    fmt.Printf(\"Type: %T Value: %v\\n\", u, u)\n    fmt.Printf(\"Type: %T Value: %v\\n\", v, v)\n    fmt.Printf(\"Type: %T Value: %v\\n\", w, w)\n    fmt.Printf(\"Type: %T Value: %v\\n\", x, x)\n    fmt.Printf(\"Type: %T Value: %v\\n\", y, y)\n    fmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}\n\ntype sample struct {\n    name string\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\nType: main.sample Value: &{test}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Short_variable_declaration\"><\/span><strong>Short variable declaration<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Go provides another way of declaring variables which is using the <strong>:=<\/strong> operator. When <strong>:=<\/strong> operator is used both <strong>var <\/strong>keyword and type info can be omitted. Below is the format for such declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"><variable_name> := <value><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Type inference will happen as explained above. Let&#8217;s see a working example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    t := 123      \/\/Type Inferred will be int\n    u := \"circle\" \/\/Type Inferred will be string\n    v := 5.6      \/\/Type Inferred will be float64\n    w := true     \/\/Type Inferred will be bool\n    x := 'a'      \/\/Type Inferred will be rune\n    y := 3 + 5i   \/\/Type Inferred will be complex128\n    z := sample{name: \"test\"}  \/\/Type Inferred will be main.Sample\n\n    fmt.Printf(\"Type: %T Value: %v\\n\", t, t)\n    fmt.Printf(\"Type: %T Value: %v\\n\", u, u)\n    fmt.Printf(\"Type: %T Value: %v\\n\", v, v)\n    fmt.Printf(\"Type: %T Value: %v\\n\", w, w)\n    fmt.Printf(\"Type: %T Value: %v\\n\", x, x)\n    fmt.Printf(\"Type: %T Value: %v\\n\", y, y)\n    fmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}\n\ntype sample struct {\n    name string\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\nType: main.sample Value: &{test}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some points to be noted about the := operator<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>:= operator is only available within a function. It is not allowed outside the function.<\/li><li>A variable once declared using := cannot be redeclared using the := operator. So below statement will raise a compiler error &nbsp;&#8220;<strong>no new variables in the left side of&nbsp;:=&#8221;<\/strong> .<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a := 8\na := 16<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>:= operator can also be used to declare multiple variables in a single line. See below example<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a,b := 1, 2<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>In case of multiple declaration, := can also be used again for a particular variable if atleast one of the variables on left hand side is new. See below example. Notice that b is again declared using := This is only possible if atleast one of the variable is new which is variable <strong>c<\/strong> here. In this case it acts as a assignment for variable <strong>b<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    a, b := 1, 2\n    b, c := 3, 4\n    fmt.Println(a, b, c)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1, 3, 4<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Important_Points\"><\/span><strong>Important Points<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A unused variable will be reported as a compiler error. GO compiler doesn&#8217;t allow any unused variable. This is an optimization in GO. Same is applicable for constant too as we will see later. For eg below program will raise a compiler error<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a declared but not used<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    var a = 1\n}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A variable declared within an inner scope having the same name as variable declared in the outer scope will shadow the variable in the outer scope.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nvar a = 123\n\nfunc main() {\n    var a = 456\n    fmt.Println(a)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">456<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Variable Expression &#8211; While the declaration variable can also be assigned an expression or a function call. See the below example.<ul><li>Variable <strong>a<\/strong> is declared with expression 5 +3<\/li><li>Variable <strong>b<\/strong> is declared with a function call&nbsp; math.Max(4, 5), whose result will be assigned to b at run time.<\/li><\/ul><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc main() {\n    a := 5 + 3\n    b := math.Max(4, 5)\n    fmt.Println(a)\n    fmt.Println(b)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8\n5<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A variable once intialized with a particular type, cannot be assigned a value of different type later. This is applicable for short hand declaration is well. See below example<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    var aaa int = 1\n    aaa = \"atest\"\n\n    bbb := 1\n    bbb = \"btest\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">cannot use \"atest\" (type untyped string) as type int in assignment\ncannot use \"btest\" (type untyped string) as type int in assignment<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Variable <strong>aaa<\/strong> has been assigned a type of <strong>int<\/strong>, hence compiler raises error on assigning a value of type string to it. For variable <strong>bbb<\/strong>, the type inferred is <strong>int, <\/strong>hence it also raises a compiler error on assigning a value of type string to it.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Scope_of_a_Variable_Local_and_Global_Variable\"><\/span><strong>Scope of a Variable (Local and Global Variable)<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A variable declaration can be done at the package level or a function level or a block level. Scope of a variable defines where that variable is accessible and also the life of the variable. Golang variables can be divided into two categories based on scope<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Local Variable<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Global Variable<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Local_Variable\"><\/span><strong>Local Variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Local variables are variables which are defined within a block or a function level<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>An example of the block is a for loop or a range loop etc.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>These variables are only be accessed from within their block or function<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>These variables only live till the end of the block or a function in which they are declared. After that, they are Garbage Collected.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">See below example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>i is not available after the for loop<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Similarly aaa is not available outside the function in which it is declared.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Hence below program will raise compiler error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">undefined: i\nundefined: aaa<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aaa = \"test\"\n    fmt.Println(aaa)\n    for i := 0; i < 3; i++ {\n        fmt.Println(i)\n    }\n    fmt.Println(i)\n}\n\nfunc testLocal() {\n    fmt.Println(aaa)\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Global_Variable\"><\/span><strong>Global Variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A variable will be global within a package if it is declared at the top of a file outside the scope of any function or block.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If this variable name starts with a lowercase letter then it can be accessed from within the the package which contains this variable definition.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the variable name stats with a uppercase letter then it can be accessed from outside different package other than which it is declared.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Global variable are available throughout the lifetime of a program<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">For example in below program variable <strong>aaa<\/strong> will be a global variable available throughout <strong>main<\/strong> package. It will be available in any function inside <strong>main<\/strong> package. Do note that variable name will not be available outside <strong>main<\/strong> package as its name starts with a lowercase letter.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nvar aaa = \"test\"\n\nfunc main() {\n    testGlobal()\n}\n\nfunc testGlobal() {\n    fmt.Println(aaa)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">test<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about variables&nbsp; in golang. Hope you have liked this article. Please share feedback or improvements or mistakes in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\">All basic data types<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/packages-modules-go-second\/\">Packages and Modules \u2013 Part 2<\/a><\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the chapter 6 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;All basic data typesPrevious Tutorial&nbsp;\u2013&nbsp;Packages and&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[4,289,290],"class_list":["post-2067","post","type-post","status-publish","format-standard","hentry","category-tech","tag-golang","tag-understanding-variables-in-go","tag-using-variables-in-go"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Variables in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Variables in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the chapter 6 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;All basic data typesPrevious Tutorial&nbsp;\u2013&nbsp;Packages and...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-04-30T14:42:27+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-03-03T18:40:31+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\",\"url\":\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\",\"name\":\"Variables in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-04-30T14:42:27+00:00\",\"dateModified\":\"2021-03-03T18:40:31+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Variables in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Variables in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/","og_locale":"en_US","og_type":"article","og_title":"Variables in Go (Golang) - Welcome To Golang By Example","og_description":"This is the chapter 6 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;All basic data typesPrevious Tutorial&nbsp;\u2013&nbsp;Packages and...","og_url":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-04-30T14:42:27+00:00","article_modified_time":"2021-03-03T18:40:31+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/","url":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/","name":"Variables in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-04-30T14:42:27+00:00","dateModified":"2021-03-03T18:40:31+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Variables in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-xl","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2067","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2067"}],"version-history":[{"count":22,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2067\/revisions"}],"predecessor-version":[{"id":5214,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2067\/revisions\/5214"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2067"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2067"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2067"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}