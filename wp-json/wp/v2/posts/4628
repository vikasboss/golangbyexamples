{"id":4628,"date":"2020-12-05T12:50:06","date_gmt":"2020-12-05T07:20:06","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4628"},"modified":"2020-12-05T12:50:16","modified_gmt":"2020-12-05T07:20:16","slug":"json-request-body-golang-http","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/","title":{"rendered":"Get JSON request body from a HTTP request in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/#Example\" title=\"Example\">Example<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>json\/encoding<\/strong> package contains methods that can be used to convert a\u00a0 request body of an incoming HTTP request into a golang struct. Before we start just a word about the request body. The request body of an HTTP request is a sequence of bytes. It is the content-type of the HTTP request which denotes the format in which those bytes are represented and meant to be read back.\u00a0 For a JSON request body, the content-type is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">application\/json<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also two things about golang struct that you need to know<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only exported fields of the struct are visible to the external library. Hence only exported fields of the struct can be parsed into from an incoming HTTP request. Also to note that capitalized fields of a struct are exported in go.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Struct fields have a meta section that contains additional information about that field. These meta fields are used while parsing an incoming JSON request body into a struct. For eg let&#8217;s say we have the below struct<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice meta tags associated with each of the fields annotated with name as &#8216;json&#8217;. These meta fields are used to map keys in the JSON to the fields of the struct. For eg if we have JSON as<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\n  \"name\" : \"John\",\n  \"age\"  : 21\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then <strong>name <\/strong>key of the above JSON will map to the <strong>Name<\/strong> field of the <strong>employee<\/strong> struct and the <strong>age<\/strong> key in JSON will map to the <strong>Age<\/strong> field of the struct. Let&#8217;s say we have below struct and JSON<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n\tName string `json:\"n\"`\n\tAge  int    `json:\"ag\"`\n}\n\n{\n  \"n\" : \"John\",\n  \"age\"  : 21\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then <strong>&#8216;n&#8217;<\/strong> key of the JSON will map to the <strong>Name<\/strong> field of the struct and <strong>&#8216;ag&#8217; <\/strong>key of the JSON will map to the <strong>Age<\/strong> field of the struct.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below two methods of the <strong>json\/encoding<\/strong> package can be used to get the JSON request body of an incoming request.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>json.Unmarshal([]bye)<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>json.NewDecoder(io.Reader).Decode(interface{})<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The second method is a preferred way to get the json request body for two reasons.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The request body of an incoming HTTP request is an io stream. <strong>json.Unmarshal<\/strong> will read the entire contents of the body first and then do an Unmarshal. It does no validation on the request body as it comes along. As compared Decode method will give an early parse error if the JSON is not valid. This comes in handy for a large invalid body being sent by the client. Unmarshal will detect that when the entire large body has been read while Decode will raise at the start only.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>json.Decode<\/strong> contains the <strong>DisallowUnknownFields<\/strong> method which raises an error if the incoming JSON contains keys which do not match any<\/li><\/ul>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>Exported and<\/li><li>Non-ignored fields of the struct.<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">There might be several issues that need to be taken care of when parsing the incoming JSON request body.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The body might not be a valid JSON<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is a valid JSON but contains extra fields or none of the fields expected in the struct.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The JSON request body is too large.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The field is expected but it contains a different type. For example for the Name field above the incoming HTTP request JSON body has a number while the expectation is a string.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The req body contains extra fields.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>Decode<\/strong> method can capture all of those issues and can return appropriate error messages as well except in one case when there is an unmarshaling error. Let&#8217;s see the error returned by the decode method in all cases<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Imaging the incoming JSON need to converted into the <strong>employee<\/strong> struct we mentioned above<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Issues<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>There is an extra field in the incoming JSON. For example, let&#8217;s say we have an additional <strong>Gender<\/strong> field present.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">'{\"Name\":\"John\", \"Age\": 21, \"Gender\": \"M\"}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The error returned by decode function will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">unknown field \"Gender\"<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The body is not a valid JSON<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">'{\"Name\": \"John\", \"Age\":}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The error returned by the decode function will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">invalid character '}' looking for beginning of value<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The body is empty<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">''<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The error returned by decode function will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">EOF<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The type of one of the field is different than expected. For example, sending a string value of age where int is expected<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">'{\"Name\":\"John\", \"Age\": \"21\"}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The error returned by decode function will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">json: cannot unmarshal string into Go struct field employee.age of type int<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In this case, the error returned by the decode function is returning internal information which is not an appropriate error to be returned back to the client. It is also possible to catch such type of error and return an appropriate error to the client. And that is what we are doing in the below program as well. Just\u00a0 checking if it is an unmarshaling and returning custom error message after that<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also in the code below we are setting the disallow unknown fields option on the <strong>decoder<\/strong> so that any extra fields in the incoming JSON body results in an error.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">decore.DisallowUnknownFields()<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Example\"><\/span><strong>Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is full program for the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"encoding\/json\"\n\t\"errors\"\n\t\"net\/http\"\n)\n\ntype employee struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tcreateEmployeeHanlder := http.HandlerFunc(createEmployee)\n\thttp.Handle(\"\/employee\", createEmployeeHanlder)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc createEmployee(w http.ResponseWriter, r *http.Request) {\n\theaderContentTtype := r.Header.Get(\"Content-Type\")\n\tif headerContentTtype != \"application\/json\" {\n\t\terrorResponse(w, \"Content Type is not application\/json\", http.StatusUnsupportedMediaType)\n\t\treturn\n\t}\n\tvar e employee\n\tvar unmarshalErr *json.UnmarshalTypeError\n\n\tdecoder := json.NewDecoder(r.Body)\n\tdecoder.DisallowUnknownFields()\n\terr := decoder.Decode(&e)\n\tif err != nil {\n\t\tif errors.As(err, &unmarshalErr) {\n\t\t\terrorResponse(w, \"Bad Request. Wrong Type provided for field \"+unmarshalErr.Field, http.StatusBadRequest)\n\t\t} else {\n\t\t\terrorResponse(w, \"Bad Request \"+err.Error(), http.StatusBadRequest)\n\t\t}\n\t\treturn\n\t}\n\terrorResponse(w, \"Success\", http.StatusOK)\n\treturn\n}\n\nfunc errorResponse(w http.ResponseWriter, message string, httpStatusCode int) {\n\tw.Header().Set(\"Content-Type\", \"application\/json\")\n\tw.WriteHeader(httpStatusCode)\n\tresp := make(map[string]string)\n\tresp[\"message\"] = message\n\tjsonResp, _ := json.Marshal(resp)\n\tw.Write(jsonResp)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Run the above file. It will trigger a server that will listen to port 8080. After the server is running, let&#8217;s make the API calls for some of the scenarios we have discussed above.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Correct Request<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -X POST -H \"content-type: application\/json\" http:\/\/localhost:8080\/employee -d '{\"Name\":\"John\", \"Age\": 21}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Response Code: 200\nResponse Body: {\"message\":\"Success\"}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>There is an extra field in the incoming JSON<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v -X POST -H \"content-type: application\/json\" http:\/\/localhost:8080\/employee -d '{\"Name\":\"John\", \"Age\": 21, \"Gender\": \"M\"}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Response Code: 400\nResponse Body: {\"message\":\"Bad Request json: unknown field \\\"Gender\\\"\"}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>The body is not a valid JSON<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v -X POST -H \"content-type: application\/json\" http:\/\/localhost:8080\/employee -d '{\"Name\": \"John\", \"Age\":}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Response Code: 400\nResponse Body: {\"message\":\"Bad Request invalid character '}' looking for beginning of value\"}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>The body is empty<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v -X POST -H \"content-type: application\/json\" http:\/\/localhost:8080\/employee<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Response Code: 400\nResponse Body: {\"message\":\"Bad Request EOF\"}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>The type of one of the field is different than expected. For example, sending a string value of age where int is expected<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v -X POST -H \"content-type: application\/json\" http:\/\/localhost:8080\/employee -d '{\"Name\":\"John\", \"Age\": \"21\"}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Response Code: 400\nResponse Body: {\"message\":\"Bad Request. Wrong Type provided for field age\"}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Content-type is not provided or not application\/json<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -X POST -H \"content-type: application\/json\" http:\/\/localhost:8080\/employee -d '{\"Name\":\"John\", \"Age\": 21}'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Response Code: 415 Unsupported Media Type\nResponse Body: {\"message\":\"Content Type is not application\/json\"}<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewExample Overview json\/encoding package contains methods that can be used to convert a\u00a0 request body of an incoming HTTP request into a golang struct. Before we start just a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4,57,310],"class_list":["post-4628","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang","tag-http","tag-json"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Get JSON request body from a HTTP request in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Get JSON request body from a HTTP request in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewExample Overview json\/encoding package contains methods that can be used to convert a\u00a0 request body of an incoming HTTP request into a golang struct. Before we start just a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-12-05T07:20:06+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-12-05T07:20:16+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/\",\"url\":\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/\",\"name\":\"Get JSON request body from a HTTP request in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-12-05T07:20:06+00:00\",\"dateModified\":\"2020-12-05T07:20:16+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Get JSON request body from a HTTP request in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Get JSON request body from a HTTP request in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/","og_locale":"en_US","og_type":"article","og_title":"Get JSON request body from a HTTP request in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewExample Overview json\/encoding package contains methods that can be used to convert a\u00a0 request body of an incoming HTTP request into a golang struct. Before we start just a...","og_url":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-12-05T07:20:06+00:00","article_modified_time":"2020-12-05T07:20:16+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/","url":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/","name":"Get JSON request body from a HTTP request in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-12-05T07:20:06+00:00","dateModified":"2020-12-05T07:20:16+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/json-request-body-golang-http\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/json-request-body-golang-http\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Get JSON request body from a HTTP request in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1cE","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4628","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4628"}],"version-history":[{"count":4,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4628\/revisions"}],"predecessor-version":[{"id":4632,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4628\/revisions\/4632"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4628"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4628"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4628"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}