{"id":802,"date":"2019-12-09T17:17:19","date_gmt":"2019-12-09T17:17:19","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=802"},"modified":"2020-02-15T06:54:19","modified_gmt":"2020-02-15T06:54:19","slug":"inner-working-of-channels-in-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/","title":{"rendered":"Inner working of Channels in Golang"},"content":{"rendered":"\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Introduction<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The purpose of this article is to give an idea of the inner working of channels. Golang has two&nbsp; concurrency primitives:<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li><strong>Goroutine<\/strong>&nbsp;&#8211; lightweight independent execution to achieve concurrency\/parallelism.<\/li><li><strong>Channels<\/strong> &#8211;&nbsp;provides synchronization and communication between goroutines.<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Channels are goroutine safe and manage communication between goroutine in a FIFO way. A goroutine can block on a channel while doing send or receive of some data and it is the responsibility of the channel to wake up blocked goroutine <\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Types of Channels<\/strong><\/h1>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>Buffered Channel<\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Send on a buffer channel only blocks if the buffer is full.<\/li><li>Receive is blocked if the channel is empty.<\/li><\/ul>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>Unbuffered Channel<\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Send on a channel is block unless there is another goroutine to receive.<\/li><li>Receive is block until there is another goroutine on the other side to send.<\/li><\/ul>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>HCHAN struct<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand what happens internally when you make channels. A channel is internally represented by a <strong>hchan<\/strong> struct whose main elements are:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type hchan struct {\n    qcount   uint           \/\/ total data in the queue\n    dataqsiz uint           \/\/ size of the circular queue\n    buf      unsafe.Pointer \/\/ points to an array of dataqsiz elements\n    elemsize uint16\n    closed   uint32         \/\/ denotes weather channel is closed or not\n    elemtype *_type         \/\/ element type\n    sendx    uint           \/\/ send index\n    recvx    uint           \/\/ receive index\n    recvq    waitq          \/\/ list of recv waiters\n    sendq    waitq          \/\/ list of send waiters\n    lock     mutex\n}\n     \ntype waitq struct {\n   first *sudog\n   last  *sudog\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The struct <strong>sudog<\/strong> main elements are represented as below:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type sudog struct {\n   g     *g             \/\/goroutine\n   elem  unsafe.Pointer \/\/ data element \n   ...\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand what happens during send and receive of a channel<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Send on a channel<\/strong><\/h1>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li><strong>No receiver\/receivers waitin<\/strong>g: Unbuffered Channel or the Buffer is Full in case of Buffered Channel.<\/li><li><strong>Receiver\/receivers waiting<\/strong>: Unbuffered Channel or the Buffer is empty in case of Buffered Channel<\/li><li><strong>Buffer empty<\/strong>: In case of buffered channel<\/li><li><strong>Channel closed <\/strong><\/li><\/ol>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>1. No Receiver\/Receivers Waiting:<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">For below two scenarios the behavior will be the same when there are no receivers waiting.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Buffered Channel: Buffer is Full<\/li><li>Unbuffered Channel<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The goroutine <strong>G1<\/strong> which is trying to send to the channel, its execution is paused and is resumed only after a receive. Let&#8217;s see how that happens. <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It creates a <strong>sudog<\/strong> object with <strong>g<\/strong> i.e, goroutine as itself and <strong>elem<\/strong> pointing to the data it wants to put into the buffer<\/li><li>It then adds that sudog struct to the sending queue sendq .<\/li><li>The goroutine calls &#8220;GOPARK&#8221; to the Go RunTime. In response, the Go RunTime changes the status of that G1 to WAITING.<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>2. Receivers waiting <\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">For below two scenarios the behavior will be the same when there are receivers waiting<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Buffered Channel: Buffer is Empty<\/li><li>Unbuffered Channel<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see how that happens. <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The goroutine G1 dequeues from the <strong>receq<\/strong> and then pass the data directly to the receiver goroutine.<\/li><li>Set the status of the receiver goroutine to <strong>RUNNABLE<\/strong><\/li><\/ul>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>3. Buffer not full: <\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Only applicable for buffered channels: Buffer has at least one empty space<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Writes the data to the buffer<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>4. Channel closed: <\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Panics<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Receive From a channel<\/strong><\/h1>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li><strong>No sender\/senders waiting:<\/strong> Unbuffered Channel or buffer is empty in case of Buffered Channel <\/li><li><strong>Sender\/senders waiting:<\/strong> Unbuffered Channel or the Buffer is empty in case of Buffered Channel.<\/li><li><strong>Non-empty Buffer:<\/strong> In case of buffered channel. Channel has at least 1 item.<\/li><li><strong>Channel closed<\/strong><\/li><\/ol>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>1. No sender\/senders waiting: <\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">For below two scenarios, the behavior will be the same when there are no receivers waiting.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Buffered Channel: Buffer is Empty<\/li><li>Unbuffered Channel<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The goroutine G1 which is trying to receive, its execution is paused and is resumed only after a send. Let&#8217;s see how that happens.<br><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The goroutine creates a <strong>sudog<\/strong> object with goroutine as itself and element being empty<\/li><li>It then adds that <strong>sudog<\/strong> struct to the waiting sending queue recvq<strong> .<\/strong><\/li><li>The gorutine calls &#8220;GOPARK&#8221; to the Go RunTime. In response, the Go RunTime changes the status of that Goroutine to <strong>WAITING<\/strong>.<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>2. Sender\/Senders waiting:<\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It dequeues the element from the buffer and copies to it to itself<\/li><li>Dequeues from the <strong>sendq<\/strong> and then copy the data directly to the buffer.<\/li><li>Set the status of the sender goroutine to <strong>RUNNABLE<\/strong><\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>3. Non-Empty Buffer:<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Only applicable for buffered channels:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The goroutine reads the data from the buffer<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>4. Channel closed: <\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Receives the default value of data type from the channel<\/li><\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Introduction The purpose of this article is to give an idea of the inner working of channels. Golang has two&nbsp; concurrency primitives: Goroutine&nbsp;&#8211; lightweight independent execution to achieve concurrency\/parallelism. Channels &#8211;&nbsp;provides synchronization&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[117],"class_list":["post-802","post","type-post","status-publish","format-standard","hentry","category-tech","tag-sidetoc"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Inner working of Channels in Golang - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Inner working of Channels in Golang - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Introduction The purpose of this article is to give an idea of the inner working of channels. Golang has two&nbsp; concurrency primitives: Goroutine&nbsp;&#8211; lightweight independent execution to achieve concurrency\/parallelism. Channels &#8211;&nbsp;provides synchronization...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-12-09T17:17:19+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-02-15T06:54:19+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/\",\"name\":\"Inner working of Channels in Golang - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2019-12-09T17:17:19+00:00\",\"dateModified\":\"2020-02-15T06:54:19+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Inner working of Channels in Golang\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Inner working of Channels in Golang - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/","og_locale":"en_US","og_type":"article","og_title":"Inner working of Channels in Golang - Welcome To Golang By Example","og_description":"Introduction The purpose of this article is to give an idea of the inner working of channels. Golang has two&nbsp; concurrency primitives: Goroutine&nbsp;&#8211; lightweight independent execution to achieve concurrency\/parallelism. Channels &#8211;&nbsp;provides synchronization...","og_url":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-12-09T17:17:19+00:00","article_modified_time":"2020-02-15T06:54:19+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/","url":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/","name":"Inner working of Channels in Golang - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2019-12-09T17:17:19+00:00","dateModified":"2020-02-15T06:54:19+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/inner-working-of-channels-in-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Inner working of Channels in Golang"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-cW","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/802","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=802"}],"version-history":[{"count":19,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/802\/revisions"}],"predecessor-version":[{"id":1399,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/802\/revisions\/1399"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=802"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=802"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=802"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}