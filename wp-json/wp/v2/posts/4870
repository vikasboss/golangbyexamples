{"id":4870,"date":"2021-01-07T20:43:19","date_gmt":"2021-01-07T15:13:19","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4870"},"modified":"2021-01-07T23:33:34","modified_gmt":"2021-01-07T18:03:34","slug":"jpeg-post-http-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/","title":{"rendered":"HTTP send\/receive jpeg file in request body example in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#HTTP_Server\" title=\"HTTP Server\">HTTP Server<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#HTTP_Client\" title=\"HTTP Client\">HTTP Client<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>multipart\/form-data <\/strong>content-type can be used to send the jpeg files in an HTTP POST call. The form-data will contain<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>jpeg filename- <strong>test.jpeg <\/strong>in the example that we will see in this tutorial<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>key that will contain the jpeg file content &#8211; <strong>photo<\/strong> in the example in the tutorial<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of both HTTP <strong>client<\/strong> and <strong>server<\/strong><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"HTTP_Server\"><\/span><strong>HTTP Server<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is the program for the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"io\"\n\t\"net\/http\"\n\t\"os\"\n)\n\nfunc main() {\n\tcreateImageHandler := http.HandlerFunc(createImage)\n\thttp.Handle(\"\/image\", createImageHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc createImage(w http.ResponseWriter, request *http.Request) {\n\terr := request.ParseMultipartForm(32 << 20) \/\/ maxMemory 32MB\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\t\/\/Access the photo key - First Approach\n\tfile, h, err := request.FormFile(\"photo\")\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\ttmpfile, err := os.Create(\".\/\" + h.Filename)\n\tdefer tmpfile.Close()\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\t_, err = io.Copy(tmpfile, file)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.WriteHeader(200)\n\treturn\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let's understand the program also. The first thing we need to do is to call <strong>ParseMultipartForm<\/strong> function on the <strong>request<\/strong> object<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">request.ParseMultipartForm()<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will parse the form data request body. After that, we can call the <strong>FormFile<\/strong> function on the request object passing the key as an argument. It will return the <strong>multipart.File<\/strong> object for the given key which is <strong>\"photo\"<\/strong> here. This object is an interface to access the file part of a multipart message for that key. The program uses it to save the file to the disk.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">_, err = io.Copy(tmpfile, file)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This was the HTTP server example. Run the server. It will listen on <strong>8080<\/strong> port. Let's create an HTTP client to test the above server as well. Below is the code for that.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"HTTP_Client\"><\/span><strong>HTTP Client<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"log\"\n\t\"mime\/multipart\"\n\t\"net\/http\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\tcall(\"http:\/\/localhost:8080\/image\", \"POST\")\n}\n\nfunc call(urlPath, method string) error {\n\tclient := &http.Client{\n\t\tTimeout: time.Second * 10,\n\t}\n\n\t\/\/ New multipart writer.\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\tfw, err := writer.CreateFormFile(\"photo\", \"test.jpg\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tfile, err := os.Open(\"test.jpg\")\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = io.Copy(fw, file)\n\tif err != nil {\n\t\treturn err\n\t}\n\twriter.Close()\n\treq, err := http.NewRequest(method, urlPath, bytes.NewReader(body.Bytes()))\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\trsp, _ := client.Do(req)\n\tif rsp.StatusCode != http.StatusOK {\n\t\tlog.Printf(\"Request failed with response code: %d\", rsp.StatusCode)\n\t}\n\treturn nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below is the code for an example of an HTTP client for the same. It is sending the <strong>multipart\/form-data<\/strong> request body in an HTTP request to the server created in the above example.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">First, we have to create a multipart Writer <a href=\"https:\/\/golang.org\/pkg\/mime\/multipart\/#Writer\">https:\/\/golang.org\/pkg\/mime\/multipart\/#Writer<\/a><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">writer := multipart.NewWriter(body)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The multipart writer provides the <strong>CreateFormFile<\/strong> method which can be used to create a file field to be sent in the multipart request body. The <strong>filename<\/strong> is <strong>test.jpg<\/strong> and the <strong>key<\/strong> name is <strong>\"photo\".<\/strong>Run the above file.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"> It will send the <strong>test.jpg<\/strong> to the server created above. You can check at the server end after the request finishes. The server will parse the form-data request body and then save the file contents to a file with the same name.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewHTTP ServerHTTP Client Overview multipart\/form-data content-type can be used to send the jpeg files in an HTTP POST call. The form-data will contain jpeg filename- test.jpeg in the example&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4870","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>HTTP send\/receive jpeg file in request body example in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"HTTP send\/receive jpeg file in request body example in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewHTTP ServerHTTP Client Overview multipart\/form-data content-type can be used to send the jpeg files in an HTTP POST call. The form-data will contain jpeg filename- test.jpeg in the example...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-01-07T15:13:19+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-01-07T18:03:34+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/\",\"name\":\"HTTP send\/receive jpeg file in request body example in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-01-07T15:13:19+00:00\",\"dateModified\":\"2021-01-07T18:03:34+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"HTTP send\/receive jpeg file in request body example in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"HTTP send\/receive jpeg file in request body example in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/","og_locale":"en_US","og_type":"article","og_title":"HTTP send\/receive jpeg file in request body example in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewHTTP ServerHTTP Client Overview multipart\/form-data content-type can be used to send the jpeg files in an HTTP POST call. The form-data will contain jpeg filename- test.jpeg in the example...","og_url":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-01-07T15:13:19+00:00","article_modified_time":"2021-01-07T18:03:34+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/","url":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/","name":"HTTP send\/receive jpeg file in request body example in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-01-07T15:13:19+00:00","dateModified":"2021-01-07T18:03:34+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/jpeg-post-http-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/jpeg-post-http-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"HTTP send\/receive jpeg file in request body example in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1gy","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4870","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4870"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4870\/revisions"}],"predecessor-version":[{"id":4876,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4870\/revisions\/4876"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4870"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4870"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4870"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}