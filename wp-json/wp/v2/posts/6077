{"id":6077,"date":"2021-08-12T01:31:04","date_gmt":"2021-08-11T20:01:04","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6077"},"modified":"2021-08-12T01:32:30","modified_gmt":"2021-08-11T20:02:30","slug":"golang-regex-match-any-character","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/","title":{"rendered":"Golang regex match any character"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Dot &#8216;.&#8217; character is one of the most commonly used metacharacters in the regular expression. It is used to match any character. By default, it doesn&#8217;t match a new line.<\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s see a simple program for Dot &#8216;.&#8217; character<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\".\")\n\n\tmatch := sampleRegexp.Match([]byte(\"a\"))\n\tfmt.Printf(\"For a: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"b\"))\n\tfmt.Printf(\"For b: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"ab\"))\n\tfmt.Printf(\"For ab: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"\"))\n\tfmt.Printf(\"For empty string: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For a: true\nFor b: true\nFor ab: true\nFor empty string: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a simple regex containing only one dot character.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\".\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches below characters and string.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\nab<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It matches <strong>ab <\/strong>because by default the regex doesn&#8217;t do the match the full string unless we use the anchor characters (Caret and Dollar character). That is why it matches the first character &#8216;a&#8217; in &#8216;ab&#8217; and reports a match.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It doesn&#8217;t match an empty string.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see another example where we have two dots in the regex.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\"..\")\n\tmatch := sampleRegexp.Match([]byte(\"ab\"))\n\tfmt.Printf(\"For ab: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"ba\"))\n\tfmt.Printf(\"For ba: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegexp.Match([]byte(\"a\"))\n\tfmt.Printf(\"For a: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For ab: true\nFor ba: true\nFor abc: true\nFor a: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a simple regex containing two dots.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\"..\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will match any given string which has at least two characters as a substring.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">That is why it gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">ab\nba\nabc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and doesn&#8217;t give a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The dot <strong>&#8216;.&#8217;<\/strong> as we mentioned before as well doesn&#8217;t match the new line. But the default behavior can be changed by adding a set of flags to the beginning of the regular expression. The flag we need to add to the beginning of regex is:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(?s)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegexp := regexp.MustCompile(\".\")\n\n\tmatch := sampleRegexp.Match([]byte(\"\\n\"))\n\tfmt.Printf(\"For \\\\n: %t\\n\", match)\n\n\tsampleRegexp = regexp.MustCompile(\"(?s).\")\n\n\tmatch = sampleRegexp.Match([]byte(\"\\n\"))\n\tfmt.Printf(\"For \\\\n: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For \\n: false\nFor \\n: true<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp := regexp.MustCompile(\".\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sampleRegexp = regexp.MustCompile(\"(?s).\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the second regex, we have added the additional flag. That is why it gives a match for a new line while the first regex without a flag doesn&#8217;t give a match.&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview Dot &#8216;.&#8217; character is one of the most commonly used metacharacters in the regular expression. It is used to match any character. By default, it doesn&#8217;t match&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6077","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang regex match any character - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang regex match any character - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewProgram Overview Dot &#8216;.&#8217; character is one of the most commonly used metacharacters in the regular expression. It is used to match any character. By default, it doesn&#8217;t match...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-08-11T20:01:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-08-11T20:02:30+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/\",\"url\":\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/\",\"name\":\"Golang regex match any character - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-08-11T20:01:04+00:00\",\"dateModified\":\"2021-08-11T20:02:30+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang regex match any character\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang regex match any character - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/","og_locale":"en_US","og_type":"article","og_title":"Golang regex match any character - Welcome To Golang By Example","og_description":"Table of Contents OverviewProgram Overview Dot &#8216;.&#8217; character is one of the most commonly used metacharacters in the regular expression. It is used to match any character. By default, it doesn&#8217;t match...","og_url":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-08-11T20:01:04+00:00","article_modified_time":"2021-08-11T20:02:30+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/","url":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/","name":"Golang regex match any character - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-08-11T20:01:04+00:00","dateModified":"2021-08-11T20:02:30+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/golang-regex-match-any-character\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang regex match any character"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1A1","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6077","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6077"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6077\/revisions"}],"predecessor-version":[{"id":6081,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6077\/revisions\/6081"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6077"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6077"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6077"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}