{"id":4619,"date":"2020-12-03T22:37:48","date_gmt":"2020-12-03T17:07:48","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4619"},"modified":"2021-04-26T19:53:17","modified_gmt":"2021-04-26T14:23:17","slug":"decorator-pattern-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/","title":{"rendered":"Decorator design pattern in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#UML_Diagram\" title=\"UML Diagram\">UML Diagram<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#Code\" title=\"Code\">Code<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#Full_Working_Code\" title=\"Full Working Code\">Full Working Code<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Decorator design pattern is a structural design pattern. It lets you provide additional functionality or decorates an object without altering that object.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is better understood with an example. Imagine you are opening a pizza chain. You started with two kinds of pizzas<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Veggie Mania Pizza<\/li><li>Peppy Tofu pizza<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Each of the above pizza had its price. So you would create a pizza interface as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype pizza interface {\n\tgetPrice() int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">You need to also create two pizza struct with a <strong>getPrice<\/strong> function which will return the price. These two pizza structs implement the pizza interface as they define the getPrice() method<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Later on, you started to offer toppings along with the pizza with some additional price for each of the topping. So the original base pizza now needs to be decorated with a topping. Imaging you added below two toppings to the menu<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Tomato Topping<\/li><li>Cheese Topping<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Also, remember that pizza along with the topping is also a pizza. Customer can choose their pizza in different ways. For eg<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Veggie mania with tomato topping<\/li><li>Veggie main with tomato and cheese topping<\/li><li>Peppy Paneer pizza without any topping<\/li><li>Peppy Paneer pizza with cheese topping<\/li><li>&#8230;<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So how would you design now given that you now have the toppings as well. Decorator pattern will come into picture. It can help additional functionality without actually modifying any of the existing structs.&nbsp; Decorator pattern recommends in this case to create separate structs for each of the topping available.&nbsp; Each topping struct will implement the pizza interface above and also have an embed and instance of pizza.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">We now have separate structs for different types of pizza and separate struct for the types of topping available. Each of the pizza and topping has its own price. And whenever you add any topping to a pizza then price of that topping is added to the price of base pizza and that is how you get a resultant price.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So the decorator pattern let&#8217;s you decorate the original base pizza object without altering that pizza object. The pizza object knows nothing about toppings. It just knows its price and nothing else.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"UML_Diagram\"><\/span><strong>UML Diagram<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Below is UML diagram for the decorator design pattern<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"356\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg?resize=640%2C356&#038;ssl=1\" alt=\"\" class=\"wp-image-5506\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg?w=781&amp;ssl=1 781w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg?resize=300%2C167&amp;ssl=1 300w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg?resize=768%2C427&amp;ssl=1 768w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The concrete component (<strong>Veggie Mania <\/strong>and <strong>Peppy Tofu<\/strong> here) and concrete decorator (<strong>Toppings<\/strong> here)&nbsp;implement the component&nbsp; interface (<strong>Pizza<\/strong> here). Also&nbsp; concrete decorator&nbsp; would embed an instance of component as well.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">As in below example we have<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The component is represented by pizza interface<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The concrete component is represented by <strong>veggieMania<\/strong> and <strong>peppyPanner<\/strong> <strong>struct<\/strong>. They both implement the pizza interface<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Concrete decorators are represented by cheeseTopping and tomatoTopping struct. They both implement the pizza interface.&nbsp; Also, they embed an instance of type <strong>pizza<\/strong> as well<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Code\"><\/span><strong>Code<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>pizza.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype pizza interface {\n\tgetPrice() int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>peppyPaneer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype peppyPaneer struct {\n}\n\nfunc (p *peppyPaneer) getPrice() int {\n\treturn 20\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>veggeMania.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype veggeMania struct {\n}\n\nfunc (p *veggeMania) getPrice() int {\n\treturn 15\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>cheeseTopping.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype cheeseTopping struct {\n\tpizza pizza\n}\n\nfunc (c *cheeseTopping) getPrice() int {\n\tpizzaPrice := c.pizza.getPrice()\n\treturn pizzaPrice + 10\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>tomatoTopping.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\ntype tomatoTopping struct {\n    pizza pizza\n}\nfunc (c *tomatoTopping) getPrice() int {\n    pizzaPrice := c.pizza.getPrice()\n    return pizzaPrice + 7\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tveggiePizza := &veggeMania{}\n\n\t\/\/Add cheese topping\n\tveggiePizzaWithCheese := &cheeseTopping{\n\t\tpizza: veggiePizza,\n\t}\n\n\t\/\/Add tomato topping\n\tveggiePizzaWithCheeseAndTomato := &tomatoTopping{\n\t\tpizza: veggiePizzaWithCheese,\n\t}\n\n\tfmt.Printf(\"Price of veggieMania pizza with tomato and cheese topping is %d\\n\", veggiePizzaWithCheeseAndTomato.getPrice())\n\n\tpeppyPaneerPizza := &peppyPaneer{}\n\n\t\/\/Add cheese topping\n\tpeppyPaneerPizzaWithCheese := &cheeseTopping{\n\t\tpizza: peppyPaneerPizza,\n\t}\n\n\tfmt.Printf(\"Price of peppyPaneer with tomato and cheese topping is %d\\n\", peppyPaneerPizzaWithCheese.getPrice())\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Price of veggieMania pizza with tomato and cheese topping is 32\nPrice of peppyPaneer with tomato and cheese topping is 30<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype pizza interface {\n\tgetPrice() int\n}\n\ntype peppyPaneer struct {\n}\n\nfunc (p *peppyPaneer) getPrice() int {\n\treturn 20\n}\n\ntype veggeMania struct {\n}\n\nfunc (p *veggeMania) getPrice() int {\n\treturn 15\n}\n\ntype tomatoTopping struct {\n\tpizza pizza\n}\n\nfunc (c *tomatoTopping) getPrice() int {\n\tpizzaPrice := c.pizza.getPrice()\n\treturn pizzaPrice + 7\n}\n\ntype cheeseTopping struct {\n\tpizza pizza\n}\n\nfunc (c *cheeseTopping) getPrice() int {\n\tpizzaPrice := c.pizza.getPrice()\n\treturn pizzaPrice + 10\n}\n\nfunc main() {\n\n\tveggiePizza := &veggeMania{}\n\n\t\/\/Add cheese topping\n\tveggiePizzaWithCheese := &cheeseTopping{\n\t\tpizza: veggiePizza,\n\t}\n\n\t\/\/Add tomato topping\n\tveggiePizzaWithCheeseAndTomato := &tomatoTopping{\n\t\tpizza: veggiePizzaWithCheese,\n\t}\n\n\tfmt.Printf(\"Price of veggieMania pizza with tomato and cheese topping is %d\\n\", veggiePizzaWithCheeseAndTomato.getPrice())\n\n\tpeppyPaneerPizza := &peppyPaneer{}\n\n\t\/\/Add cheese topping\n\tpeppyPaneerPizzaWithCheese := &cheeseTopping{\n\t\tpizza: peppyPaneerPizza,\n\t}\n\n\tfmt.Printf(\"Price of peppyPaneer with tomato and cheese topping is %d\\n\", peppyPaneerPizzaWithCheese.getPrice())\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Price of veggieMania pizza with tomato and cheese topping is 32\nPrice of peppyPaneer with tomato and cheese topping is 30<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewUML DiagramCodeFull Working Code Overview Decorator design pattern is a structural design pattern. It lets you provide additional functionality or decorates an object without altering that object. It is&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[309,3,4],"class_list":["post-4619","post","type-post","status-publish","format-standard","hentry","category-tech","tag-decorator","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Decorator design pattern in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Decorator design pattern in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewUML DiagramCodeFull Working Code Overview Decorator design pattern is a structural design pattern. It lets you provide additional functionality or decorates an object without altering that object. It is...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-12-03T17:07:48+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-04-26T14:23:17+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/\",\"name\":\"Decorator design pattern in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg\",\"datePublished\":\"2020-12-03T17:07:48+00:00\",\"dateModified\":\"2021-04-26T14:23:17+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Decorator design pattern in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Decorator design pattern in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/","og_locale":"en_US","og_type":"article","og_title":"Decorator design pattern in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewUML DiagramCodeFull Working Code Overview Decorator design pattern is a structural design pattern. It lets you provide additional functionality or decorates an object without altering that object. It is...","og_url":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-12-03T17:07:48+00:00","article_modified_time":"2021-04-26T14:23:17+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/","url":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/","name":"Decorator design pattern in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg","datePublished":"2020-12-03T17:07:48+00:00","dateModified":"2021-04-26T14:23:17+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/decorator-pattern-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2021\/04\/Decorator-Design-Patter-min.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/decorator-pattern-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Decorator design pattern in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1cv","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4619","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4619"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4619\/revisions"}],"predecessor-version":[{"id":5507,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4619\/revisions\/5507"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4619"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4619"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4619"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}