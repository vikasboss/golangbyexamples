{"id":603,"date":"2019-11-16T17:42:45","date_gmt":"2019-11-16T17:42:45","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=603"},"modified":"2020-02-01T16:44:46","modified_gmt":"2020-02-01T16:44:46","slug":"bridge-design-pattern-in-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/","title":{"rendered":"Bridge Design Pattern in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference  &#8211; <a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns in Go (Golang)<\/a><\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#Introduction\" title=\"Introduction:\">Introduction:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#UML_Diagram\" title=\"UML Diagram:\">UML Diagram:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#Mapping\" title=\"Mapping&nbsp;\">Mapping&nbsp;<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#Practical_Example\" title=\"Practical Example\">Practical Example<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#Full_Working_Code\" title=\"Full Working Code:\">Full Working Code:<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Bridge design pattern is a structural design pattern that allows the separation of abstraction from its implementation. Sounds confusing?  Don&#8217;t worry, it will be more clear as we go along.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">This pattern suggests dividing a large class into two separate hierarchy<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Abstraction &#8211; It is an interface and children of the <strong>Abstraction<\/strong> are referred to as <strong>Refined Abstraction. <\/strong>The abstraction contains a reference to the implementation.<\/li><li>Implementation &#8211; It is also an interface and children&#8217;s of the <strong>Implementation<\/strong> are referred to as <strong>Concrete Implementation<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Abstraction hierarchy is being referred to by clients without worrying about the implementation. Let&#8217;s take an example. Assume you have two types of computer <strong>mac<\/strong> and <strong>windows. <\/strong>Also, let&#8217;s say two types of printer <strong>epson<\/strong> and <strong>hp<\/strong> . Both computers and printers needs to work with each other in any combination.&nbsp; The client will only access the computer without worrying about how print is happening. Instead of creating four structs for the 2*2 combination, we create two hierarchies<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Abstraction Hierarchy<\/li><li>Implementation Hierarchy<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">See the below figure. These two hierarchies communicate with each other via a bridge where <strong>Abstraction<\/strong> (computer here) contains a reference to the <strong>Implementation<\/strong>(printer here). Both the abstraction and implementation can continue to develop independently without affecting each other.&nbsp; Notice how <strong>win<\/strong> and <strong>mac<\/strong> embed the reference to <strong>printer<\/strong>. We can change the <strong>Abstraction&#8217;sImplementation<\/strong> (i.e., computer&#8217;s printer) at run time as abstraction refers to implementation via the interface. On calling <strong>mac.print() or windows.print()<\/strong> it dispatches the request to <strong>printer.printFile()<\/strong>. This acts as a bridge and provides a loose coupling between the two.<\/p>\n\n\n\n<figure class=\"wp-block-gallery columns-1 is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"344\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg?resize=640%2C344&#038;ssl=1\" alt=\"\" data-id=\"625\" data-full-url=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg?fit=821%2C441&amp;ssl=1\" data-link=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/bridge-design-pattern-2\/\" class=\"wp-image-625\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg?w=821&amp;ssl=1 821w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg?resize=300%2C161&amp;ssl=1 300w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg?resize=768%2C413&amp;ssl=1 768w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><\/ul><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"UML_Diagram\"><\/span><strong>UML Diagram:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<figure class=\"wp-block-gallery columns-1 is-cropped wp-block-gallery-2 is-layout-flex wp-block-gallery-is-layout-flex\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" decoding=\"async\" width=\"640\" height=\"407\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-1.jpg?resize=640%2C407&#038;ssl=1\" alt=\"\" data-id=\"624\" data-full-url=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-1.jpg?fit=803%2C511&amp;ssl=1\" data-link=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/bridge-design-pattern-1\/\" class=\"wp-image-624\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-1.jpg?w=803&amp;ssl=1 803w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-1.jpg?resize=300%2C191&amp;ssl=1 300w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-1.jpg?resize=768%2C489&amp;ssl=1 768w\" sizes=\"auto, (max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/figure><\/li><\/ul><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Mapping\"><\/span><strong>Mapping&nbsp;<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The below table represents the mapping from the UML diagram actors to actual implementation actors in <strong>&#8220;Practical Example&#8221;<\/strong> below<br><\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-blue-background-color has-background\"><tbody><tr><td>Abstraction<\/td><td>computer.go<\/td><\/tr><tr><td>Refined Abstraction 1<\/td><td>win.go<\/td><\/tr><tr><td>Refined Abstraction 2<\/td><td>mac.go<\/td><\/tr><tr><td>Implementation<\/td><td>printer.go<\/td><\/tr><tr><td>Concrete Implementation 1<\/td><td>epson.go<\/td><\/tr><tr><td>Concrete Implementation 2<\/td><td>hp.go<\/td><\/tr><tr><td>Client<\/td><td>main.go<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Practical_Example\"><\/span><strong>Practical Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>computer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype computer interface {\n    print()\n    setPrinter(printer)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>mac.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype mac struct {\n    printer printer\n}\n\nfunc (m *mac) print() {\n    fmt.Println(\"Print request for mac\")\n    m.printer.printFile()\n}\n\nfunc (m *mac) setPrinter(p printer) {\n    m.printer = p\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>windows.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype windows struct {\n    printer printer\n}\n\nfunc (w *windows) print() {\n    fmt.Println(\"Print request for windows\")\n    w.printer.printFile()\n}\n\nfunc (w *windows) setPrinter(p printer) {\n    w.printer = p\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>printer.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype printer interface {\n    printFile()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>epson.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype epson struct {\n}\n\nfunc (p *epson) printFile() {\n    fmt.Println(\"Printing by a EPSON Printer\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>hp.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype hp struct {\n}\n\nfunc (p *hp) printFile() {\n    fmt.Println(\"Printing by a HP Printer\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    hpPrinter := &hp{}\n    epsonPrinter := &epson{}\n    macComputer := &mac{}\n    macComputer.setPrinter(hpPrinter)\n    macComputer.print()\n    fmt.Println()\n    macComputer.setPrinter(epsonPrinter)\n    macComputer.print()\n    fmt.Println()\n    winComputer := &windows{}\n    winComputer.setPrinter(hpPrinter)\n    winComputer.print()\n    fmt.Println()\n    winComputer.setPrinter(epsonPrinter)\n    winComputer.print()\n    fmt.Println()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Print request for mac\nPrinting by a HP Printer\n\nPrint request for mac\nPrinting by a EPSON Printer\n\nPrint request for windows\nPrinting by a HP Printer\n\nPrint request for windows<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype computer interface {\n    print()\n    setPrinter(printer)\n}\n\ntype mac struct {\n    printer printer\n}\n\nfunc (m *mac) print() {\n    fmt.Println(\"Print request for mac\")\n    m.printer.printFile()\n}\n\nfunc (m *mac) setPrinter(p printer) {\n    m.printer = p\n}\n\ntype windows struct {\n    printer printer\n}\n\nfunc (w *windows) print() {\n    fmt.Println(\"Print request for windows\")\n    w.printer.printFile()\n}\n\nfunc (w *windows) setPrinter(p printer) {\n    w.printer = p\n}\n\ntype printer interface {\n    printFile()\n}\n\ntype epson struct {\n}\n\nfunc (p *epson) printFile() {\n    fmt.Println(\"Printing by a EPSON Printer\")\n}\n\ntype hp struct {\n}\n\nfunc (p *hp) printFile() {\n    fmt.Println(\"Printing by a HP Printer\")\n}\n\nfunc main() {\n    hpPrinter := &hp{}\n    epsonPrinter := &epson{}\n    macComputer := &mac{}\n    macComputer.setPrinter(hpPrinter)\n    macComputer.print()\n    fmt.Println()\n    macComputer.setPrinter(epsonPrinter)\n    macComputer.print()\n    fmt.Println()\n    winComputer := &windows{}\n    winComputer.setPrinter(hpPrinter)\n    winComputer.print()\n    fmt.Println()\n    winComputer.setPrinter(epsonPrinter)\n    winComputer.print()\n    fmt.Println()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Print request for mac\nPrinting by a HP Printer\n\nPrint request for mac\nPrinting by a EPSON Printer\n\nPrint request for windows\nPrinting by a HP Printer\n\nPrint request for windows<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping&nbsp;Practical ExampleFull&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[73,25,3,4],"class_list":["post-603","post","type-post","status-publish","format-standard","hentry","category-tech","tag-bridge-design-pattern","tag-design-pattern","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Bridge Design Pattern in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Bridge Design Pattern in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping&nbsp;Practical ExampleFull...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-11-16T17:42:45+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-02-01T16:44:46+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/\",\"name\":\"Bridge Design Pattern in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg\",\"datePublished\":\"2019-11-16T17:42:45+00:00\",\"dateModified\":\"2020-02-01T16:44:46+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Bridge Design Pattern in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Bridge Design Pattern in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/","og_locale":"en_US","og_type":"article","og_title":"Bridge Design Pattern in Go (Golang) - Welcome To Golang By Example","og_description":"Note: Interested in understanding how all other design patterns can be implemented in GO. Please see this full reference &#8211; All Design Patterns in Go (Golang) Table of Contents Introduction:UML Diagram:Mapping&nbsp;Practical ExampleFull...","og_url":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-11-16T17:42:45+00:00","article_modified_time":"2020-02-01T16:44:46+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/","url":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/","name":"Bridge Design Pattern in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg","datePublished":"2019-11-16T17:42:45+00:00","dateModified":"2020-02-01T16:44:46+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2019\/11\/Bridge-Design-Pattern-2.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/bridge-design-pattern-in-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Bridge Design Pattern in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-9J","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/603","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=603"}],"version-history":[{"count":8,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/603\/revisions"}],"predecessor-version":[{"id":1313,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/603\/revisions\/1313"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=603"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=603"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=603"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}