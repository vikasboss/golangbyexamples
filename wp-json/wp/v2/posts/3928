{"id":3928,"date":"2020-09-04T00:59:37","date_gmt":"2020-09-03T19:29:37","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3928"},"modified":"2020-09-04T00:59:49","modified_gmt":"2020-09-03T19:29:49","slug":"wrapping-and-unwrapping-error-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/","title":{"rendered":"Wrapping and Un-wrapping of error in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/#Wrapping_of_error\" title=\"Wrapping of error\">Wrapping of error<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/#Unwrap_an_error\" title=\"Unwrap an error\">Unwrap an error<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Wrapping_of_error\"><\/span><strong>Wrapping of error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In go, error can wrap another error as well.&nbsp; What does the wrapping of error mean? It means to create a hierarchy of errors in which a&nbsp; particular instance of error wraps another error and that particular instance itself can be wrapped inside another error.&nbsp; Below is the syntax for wrapping an error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e := fmt.Errorf(\"... %w ...\", ..., err, ...)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>%w<\/strong> directive Is used for wrapping the error.&nbsp; The&nbsp;<strong>fmt.Errorf&nbsp;<\/strong>should be called with only one&nbsp;%w&nbsp;directive. Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype errorOne struct{}\n\nfunc (e errorOne) Error() string {\n\treturn \"Error One happended\"\n}\n\nfunc main() {\n\n\te1 := errorOne{}\n\n\te2 := fmt.Errorf(\"E2: %w\", e1)\n\n\te3 := fmt.Errorf(\"E3: %w\", e2)\n\n\tfmt.Println(e2)\n\n\tfmt.Println(e3)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended\nE3: E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a struct <strong>errorOne<\/strong> that has an <strong>Error<\/strong> method hence it implements the <strong>error<\/strong> interface. Then we created an instance of the\u00a0<strong>errorOne<\/strong> struct named <strong>e1<\/strong>.\u00a0Then we wrapped that instance <strong>e1<\/strong> into another error <strong>e2<\/strong> like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e2 := fmt.Errorf(\"E2: %w\", e1)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we wrapped <strong>e2<\/strong> into <strong>e3<\/strong> like below.\u00a0<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e3 := fmt.Errorf(\"E3: %w\", e2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So so we created a hierarchy of errors in which <strong>e3<\/strong> wraps <strong>e2<\/strong> and <strong>e2<\/strong> wraps <strong>e1<\/strong>.\u00a0 Thus <strong>e3<\/strong> also wraps <strong>e1<\/strong> transitively. When we print <strong>e2\u00a0<\/strong> it also prints the error from <strong>e1<\/strong> and gives the output.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">When we print <strong>e3<\/strong> it prints the error from <strong>e2<\/strong> as well as <strong>e1<\/strong> and gives the output.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E3: E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now the question which comes to the mind that whats the use case of wrapping the errors. To understand it let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype notPositive struct {\n\tnum int\n}\n\nfunc (e notPositive) Error() string {\n\treturn fmt.Sprintf(\"checkPositive: Given number %d is not a positive number\", e.num)\n}\n\ntype notEven struct {\n\tnum int\n}\n\nfunc (e notEven) Error() string {\n\treturn fmt.Sprintf(\"checkEven: Given number %d is not an even number\", e.num)\n}\n\nfunc checkPositive(num int) error {\n\tif num < 0 {\n\t\treturn notPositive{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkEven(num int) error {\n\tif num%2 == 1 {\n\t\treturn notEven{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkPostiveAndEven(num int) error {\n\tif num > 100 {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: Number %d is greater than 100\", num)\n\t}\n\n\terr := checkPositive(num)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = checkEven(num)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tnum := 3\n\terr := checkPostiveAndEven(num)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"Givennnumber is positive and even\")\n\t}\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">checkEven: Given number 3 is not an even number<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a function\u00a0<strong>checkPostiveAndEven<\/strong> that checks whether a number is even and positive. In turn, it calls the <strong>checkEven<\/strong> function to check if the number is even. And then it calls <strong>checkPositive<\/strong> function to check if the number is positive. If a number is not even\u00a0and positive it an error is raised.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><br>In the above program, it is impossible to tell stack trace of the error. We know that this error came from <strong>checkEven<\/strong> function for the above output. But which function called the <strong>checkEven<\/strong> function is not clear from the error. This is where wrapping the error comes in the picture. \u00a0This becomes more useful when the project is big and there are a lot of functions calling each other.\u00a0 Let&#8217;s rewrite the program by wrapping the error.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype notPositive struct {\n\tnum int\n}\n\nfunc (e notPositive) Error() string {\n\treturn fmt.Sprintf(\"checkPositive: Given number %d is not a positive number\", e.num)\n}\n\ntype notEven struct {\n\tnum int\n}\n\nfunc (e notEven) Error() string {\n\treturn fmt.Sprintf(\"checkEven: Given number %d is not an even number\", e.num)\n}\n\nfunc checkPositive(num int) error {\n\tif num < 0 {\n\t\treturn notPositive{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkEven(num int) error {\n\tif num%2 == 1 {\n\t\treturn notEven{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkPostiveAndEven(num int) error {\n\tif num > 100 {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: Number %d is greater than 100\", num)\n\t}\n\n\terr := checkPositive(num)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: %w\", err)\n\t}\n\n\terr = checkEven(num)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tnum := 3\n\terr := checkPostiveAndEven(num)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"Given number is positive and even\")\n\t}\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">checkPostiveAndEven: checkEven: Given number 3 is not an even number<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">\u00a0The above program is same as the previous program just that\u00a0in the <strong>checkPostiveAndEven<\/strong> function , we wrap the errors like below.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Errorf(\"checkPostiveAndEven: %w\", err)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So the output is more clear and the error is more informative. The output clearly mentions the sequence of calling as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">checkPostiveAndEven: checkEven: Given number 3 is not an even number<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Unwrap_an_error\"><\/span><strong>Unwrap an error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In the above section, we studied about wrapping the error. It is also possible to unwrap the error. <strong>Unwrap<\/strong>\u00a0function of <strong>errors<\/strong> package can be used to unwrap an error. Below is the syntax of the function.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Unwrap(err error) error<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If the <strong>err<\/strong> wraps another error, then the wrapped error will be returned otherwise\u00a0<strong>Unwrap<\/strong> function will return nil.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program to illustrate the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import (\n    \"errors\"\n    \"fmt\"\n)\ntype errorOne struct{}\nfunc (e errorOne) Error() string {\n    return \"Error One happended\"\n}\nfunc main() {\n    e1 := errorOne{}\n    e2 := fmt.Errorf(\"E2: %w\", e1)\n    e3 := fmt.Errorf(\"E3: %w\", e2)\n    fmt.Println(errors.Unwrap(e3))\n    fmt.Println(errors.Unwrap(e2))\n    fmt.Println(errors.Unwrap(e1))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended\nError One happended\n<nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a struct <strong>errorOne<\/strong> that has an <strong>Error<\/strong> method hence it implements the <strong>error<\/strong> interface. Then we created an instance of the\u00a0<strong>errorOne<\/strong> struct named <strong>e1<\/strong>.\u00a0Then we wrapped that instance <strong>e1<\/strong> into another error <strong>e2<\/strong> like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e2 := fmt.Errorf(\"E2: %w\", e1)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we wrapped <strong>e2<\/strong> into <strong>e3<\/strong> like below.\u00a0<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e3 := fmt.Errorf(\"E3: %w\", e2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Hence<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(errors.Unwrap(e3))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return wrapped error <strong>e2,<\/strong> as <strong>e3<\/strong> wraps <strong>e2<\/strong> and output will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also,<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(errors.Unwrap(e2))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return wrapped error <strong>e1<\/strong> as <strong>e2<\/strong> further wraps <strong>e1 <\/strong>and output will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Error One happened<\/code><\/pre>\n\n\n\n<p>While<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(errors.Unwrap(e1))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will output nil as <strong>e1<\/strong> does not wraps any error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{nil}<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents Wrapping of errorUnwrap an error Wrapping of error In go, error can wrap another error as well.&nbsp; What does the wrapping of error mean? It means to create a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-3928","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Wrapping and Un-wrapping of error in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Wrapping and Un-wrapping of error in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents Wrapping of errorUnwrap an error Wrapping of error In go, error can wrap another error as well.&nbsp; What does the wrapping of error mean? It means to create a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-03T19:29:37+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-09-03T19:29:49+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/\",\"name\":\"Wrapping and Un-wrapping of error in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-03T19:29:37+00:00\",\"dateModified\":\"2020-09-03T19:29:49+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Wrapping and Un-wrapping of error in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Wrapping and Un-wrapping of error in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/","og_locale":"en_US","og_type":"article","og_title":"Wrapping and Un-wrapping of error in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents Wrapping of errorUnwrap an error Wrapping of error In go, error can wrap another error as well.&nbsp; What does the wrapping of error mean? It means to create a...","og_url":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-03T19:29:37+00:00","article_modified_time":"2020-09-03T19:29:49+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/","url":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/","name":"Wrapping and Un-wrapping of error in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-03T19:29:37+00:00","dateModified":"2020-09-03T19:29:49+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Wrapping and Un-wrapping of error in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-11m","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3928","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3928"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3928\/revisions"}],"predecessor-version":[{"id":3931,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3928\/revisions\/3931"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3928"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3928"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3928"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}