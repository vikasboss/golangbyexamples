{"id":2097,"date":"2020-05-03T16:54:28","date_gmt":"2020-05-03T16:54:28","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2097"},"modified":"2020-11-25T00:55:54","modified_gmt":"2020-11-24T19:25:54","slug":"switch-statement-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/switch-statement-golang\/","title":{"rendered":"Switch Statement in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 13 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/defer-golang\">Defer keyword<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/understand-if-else-statement-golang\/\">If Else<\/a><br><br>Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Overview<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Switch statement are a perfect way to prevent a if-else ladder. Here is the format for switch statement<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">switch statement; expression {\ncase expression1:\n     \/\/Dosomething\ncase expression2:\n     \/\/Dosomething\ndefault:\n     \/\/Dosomething\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is how switch works. Give a <strong>switch expression<\/strong>, it goes through all cases and tries to find the first <strong>case expression<\/strong> that matches the <strong>switch expression<\/strong> otherwise the default case is executed if present. The order of matching is from top to bottom and then left to right (when the case contains multiple expressions as we will see later in this tutorial).<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Important Points<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Some important things to know about switch before we move to code examples<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Both <strong>switch statement<\/strong> and <strong>switch expression<\/strong> are optional statement. So four possible scenario exist for them<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Both <strong>switch statement<\/strong> and <strong>switch expression<\/strong> are present<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">switch statement; expression {\n   ... \n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Only <strong>switch statement<\/strong> is present. Notice the syntax below. Semicolon needs to be present after <strong>switch statement<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">switch statement; {\n    ...\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Only <strong>switch expression<\/strong> is present. Notice the syntax below. No semicolon after <strong>switch expression<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">switch expression {\n   ..\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Both <strong>switch statement<\/strong> and <strong>switch expression<\/strong> are absent.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">switch {\n  ... \n}<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the <strong>switch expression<\/strong> is not provided then the default type assumed by the compiler is <strong>boolean<\/strong>.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The type of <strong>switch expression<\/strong> and all of <strong>case expression*<\/strong> should match other wise there will be a compiler error raised. When <strong>switch expression<\/strong> is not provided the type of all <strong>case expression<\/strong>* needs to be a boolean too.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>switch statement<\/strong> can be any statement with a short declaration, function call or assignment. If <strong>switch statement<\/strong> has a variable declaration then the scope of that variable is limited to the switch block<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It can have any number of case statement<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>default case is optional<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>case can have multiple expression separated by comma. Then case will look like as below<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">case expression1_1, expression_2 ...:<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>case block also allows <strong>fallthrough <\/strong>keyword which transfer control to the next case even though the current case might have matched<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>break statement that is needed in switch cases in many other languages is not needed in go. Go automatically provides a break statement at the end of each case block. However, it is also correct to explicitly use the <strong>break<\/strong> keyword which terminates execution out of switch statement.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Two cases cannot have the same constant value. There will be a compiler error raised in that case.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>switch statement can also be used as a type switch, where it is used to know the type of an empty interface at run time as we will see in examples below<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Examples<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see some simple example which illustrates the points above.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Both switch statement and switch expression<\/strong><\/h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    switch ch := \"b\"; ch {\n    case \"a\":\n        fmt.Println(\"a\")\n    case \"b\", \"c\":\n        fmt.Println(\"b or c\")    \n    default:\n        fmt.Println(\"No matching character\")    \n    }\n    \n    \/\/fmt.Println(ch)\n\n}  <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">b or c<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some points to note:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>In the above example, we have switch statement having a short declaration.<\/li><li>Then the switch case matches the switch expression which is &#8220;b&#8221; here.<\/li><li>Also, there can be multiple expression in the case, as we see above that second case has two expressions<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> case \"b\", \"c\":<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>ch<\/strong> variable is only available within <strong>switch<\/strong> block. Uncomment the line <strong>fmt.Println(ch) <\/strong>which is present outside switch block and it will raise an error<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">undefined: ch<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Both switch statement and switch expression absent<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see another example where we omit the <strong>switch statement<\/strong> as well as the <strong>switch expression<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    age := 45\n    switch {\n    case age < 18:\n        fmt.Println(\"Kid\")\n    case age >= 18 && age < 40:\n        fmt.Println(\"Young\")\n    default:\n        fmt.Println(\"Old\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Old<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Couple of points to notice about above example:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Since we omitted the switch expression, the default type of switch expression is boolean. Each of the case expressions also evaluates to boolean hence the program works fine.<\/li><li>Default case is executed in the above example as none of the case expression matched.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Only switch statement<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Notice the <strong>';'<\/strong> after the statement<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\n    switch age := 29; {\n    case age < 18:\n        fmt.Println(\"Kid\")\n    case age >= 18 && age < 40:\n        fmt.Println(\"Young\")\n    default:\n        fmt.Println(\"Old\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Young<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Only switch expression<\/strong><\/h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    char := \"a\"\n    switch char {\n    case \"a\":\n        fmt.Println(\"a\")\n    case \"b\":\n        fmt.Println(\"b\")\n    default:\n        fmt.Println(\"No matching character\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Duplicate case<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Two case statement cannot have the same constant. For example in below case there will be a compiler error raised as&nbsp; \"a\"&nbsp; is present in two case<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">duplicate case \"a\" in switch<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    switch \"a\" {\n    case \"a\":\n        fmt.Println(\"a\")\n    case \"a\":\n        fmt.Println(\"Another a\")\n    case \"b\":\n        fmt.Println(\"b\")\n    default:\n        fmt.Println(\"No matching character\")\n    }\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Fallthrough keyword<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">See below code for <strong>fallthrough<\/strong> keyword example. In below example even though the second case matched it went through the third case because of <strong>fallthrough<\/strong> keyword<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    i := 45\n    switch {\n    case i < 10:\n        fmt.Println(\"i is less than 10\")\n        fallthrough\n    case i < 50:\n        fmt.Println(\"i is less than 50\")\n        fallthrough\n    case i < 100:\n        fmt.Println(\"i is less than 100\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">i is less than 50\ni is less than 100<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>fallthrough<\/strong> needs to be final statement within the switch block. If it is not then compiler raise error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fallthrough statement out of place<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Below program will raise the above error as we have <strong>fmt.Println <\/strong>after the <strong>fallthrough<\/strong> statement<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    i := 45\n    switch {\n    case i < 10:\n        fmt.Println(\"i is less than 10\")\n        fallthrough\n    case i < 50:\n        fmt.Println(\"i is less than 50\")\n        fallthrough\n        fmt.Println(\"Not allowed\")\n    case i < 100:\n        fmt.Println(\"i is less than 100\")\n    }\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Break statement<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the <strong>break<\/strong> statement example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    switch char := \"b\"; char {\n    case \"a\":\n        fmt.Println(\"a\")\n    case \"b\":\n        fmt.Println(\"b\")\n        break\n        fmt.Println(\"after b\")\n    default:\n        fmt.Println(\"No matching character\")\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">b<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>break<\/strong> statement will terminate the execution of the switch and below line below will never be executed<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(\"after b\")<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Type Switch<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Switch statement can also be used to know the type of an interface at run time as shown in below example. The type switch compare types instead of values<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    printType(\"test_string\")\n    printType(2)\n}\n\nfunc printType(t interface{}) {\n    switch v := t.(type) {\n    case string:\n        fmt.Println(\"Type: string\")\n    case int:\n        fmt.Println(\"Type: int\")\n    default:\n        fmt.Printf(\"Unknown Type %T\", v)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: string\nType: int<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><strong>Conclusion<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about switch statement in go. Hope you have liked the article. Please share feedback\/improvements\/mistakes in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/defer-golang\">Defer keyword<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/understand-if-else-statement-golang\/\">If Else<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 13 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;Defer keywordPrevious Tutorial&nbsp;\u2013 If Else Now&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4,291],"class_list":["post-2097","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang","tag-switch"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Switch Statement in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Switch Statement in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 13 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;Defer keywordPrevious Tutorial&nbsp;\u2013 If Else Now...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-05-03T16:54:28+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-24T19:25:54+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\",\"name\":\"Switch Statement in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-05-03T16:54:28+00:00\",\"dateModified\":\"2020-11-24T19:25:54+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/switch-statement-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/switch-statement-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Switch Statement in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Switch Statement in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/switch-statement-golang\/","og_locale":"en_US","og_type":"article","og_title":"Switch Statement in Go (Golang) - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 13 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;Defer keywordPrevious Tutorial&nbsp;\u2013 If Else Now...","og_url":"https:\/\/golangbyexamples.com\/switch-statement-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-05-03T16:54:28+00:00","article_modified_time":"2020-11-24T19:25:54+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/switch-statement-golang\/","url":"https:\/\/golangbyexamples.com\/switch-statement-golang\/","name":"Switch Statement in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-05-03T16:54:28+00:00","dateModified":"2020-11-24T19:25:54+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/switch-statement-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/switch-statement-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/switch-statement-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Switch Statement in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-xP","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2097","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2097"}],"version-history":[{"count":12,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2097\/revisions"}],"predecessor-version":[{"id":4550,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2097\/revisions\/4550"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2097"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2097"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2097"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}