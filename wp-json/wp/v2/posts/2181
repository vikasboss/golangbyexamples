{"id":2181,"date":"2020-05-18T22:22:20","date_gmt":"2020-05-18T16:52:20","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2181"},"modified":"2022-07-14T22:17:18","modified_gmt":"2022-07-14T16:47:18","slug":"slice-in-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/slice-in-golang\/","title":{"rendered":"Slice in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the&nbsp; chapter 18 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/maps-in-golang\">Maps<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guid\">Array<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Creating_a_slice\" title=\"Creating a slice\">Creating a slice<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Using_the_format\" title=\"Using the []&lt;type&gt;{} format\">Using the []&lt;type&gt;{} format<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Creating_a_slice_from_another_slice_or_array\" title=\"Creating a slice from another slice or array\">Creating a slice from another slice or array<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Create_a_slice_from_Array\" title=\"Create a slice from Array\">Create a slice from Array<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Create_a_slice_from_slice\" title=\"Create a slice from slice\">Create a slice from slice<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Using_the_make_function\" title=\"Using the&nbsp;make function\">Using the&nbsp;make function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Using_the_new_function\" title=\"Using the new function\">Using the new function<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Length_vs_Capacity\" title=\"Length vs Capacity\">Length vs Capacity<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Accessing_and_Modifying_Slice_Elements\" title=\"Accessing and Modifying Slice Elements\">Accessing and Modifying Slice Elements<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Different_ways_of_iterating_a_slice\" title=\"Different ways of iterating a slice\">Different ways of iterating a slice<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Appending_to_a_slice\" title=\"Appending to a slice\">Appending to a slice<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Copy_a_slice\" title=\"Copy a slice\">Copy a slice<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Nil_Slice\" title=\"Nil Slice\">Nil Slice<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Multidimensional_Slices\" title=\"Multidimensional Slices\">Multidimensional Slices<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-16\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The size of the array being part of it limits the expressiveness and power of array in go. This is where slice comes into the picture. Slice is more powerful and convenient to use than an array.&nbsp; Slice, in fact, is more analogous to arrays in another programming language.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">A slice points to an underlying array and is internally represented by a slice header.&nbsp; Unlike array, the size of a slice is flexible and can be changed. <\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Internal representation of a slice<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Internally a slice is represented by three things.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Pointer to the underlying array<\/li><li>Current length of the underlying array<\/li><li>Total Capacity which is the maximum capacity to which the underlying array can expand.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Above internal representation is described by <strong>SliceHeader<\/strong> struct which looks like&nbsp;this:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type SliceHeader struct {\n        Pointer uintptr\n        Len  int\n        Cap  int\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The<strong> Pointer<\/strong> field in the slice header is a pointer to the underlying array.&nbsp; Len is the current length of the slice and Cap is the capacity of the slice. Similar to array a slice index starts from <strong>zero<\/strong> till<strong> length_of_slice-1<\/strong>. So a slice of 3 lengths and 5 capacity will look like below<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"391\" height=\"251\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg?resize=391%2C251&#038;ssl=1\" alt=\"\" class=\"wp-image-2183\" srcset=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg?w=391&amp;ssl=1 391w, https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg?resize=300%2C193&amp;ssl=1 300w\" sizes=\"auto, (max-width: 391px) 100vw, 391px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_slice\"><\/span><strong><strong>Creating<\/strong> a slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">There are four ways of creating a slice<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the []&lt;type&gt;{} format<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Creating a slice from another slice or array<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using make<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using new<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s look at each of above method one by one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_format\"><\/span><strong>Using the []&lt;type&gt;{} format<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The most common way of declaring a slice is this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := []int<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It declares an empty of slice of 0 length and 0 capacity. We can also initialise the slice during declaration.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := []int{1,2}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It declares a slice of integers of length 2 and also the capacity of 2. The capacity will be equal to the actual slice elements specified. We also have two library functions provided by go which can be used to know the <strong>length<\/strong> and <strong>capacity<\/strong> of a slice.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>len()<\/strong> function &#8211; for&nbsp; length of the slice<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>cap()<\/strong> function &#8211; for capacity of the slice<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a small program which shows the above points<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := []int{}\n    fmt.Println(len(sample))\n    fmt.Println(cap(sample))\n    fmt.Println(sample)\n\n    letters := []string{\"a\", \"b\", \"c\"}\n    fmt.Println(len(letters))\n    fmt.Println(cap(letters))\n    fmt.Println(letters)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0\n0\n[]\n\n3\n3\n[a b c]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">When the actual elements are not specified, then both length and capacity of the slice is zero. When actual elements are specified , both length and capacity is equal to the number of actual elements specified.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Creating_a_slice_from_another_slice_or_array\"><\/span><strong>Creating a slice from another slice or array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">A slice can be created by re-slicing an exiting slice or array.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Create_a_slice_from_Array\"><\/span><strong>Create a slice from Array<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">The format for creating a new slice by re-slicing an existing array is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[n]sample[start:end]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above operation will return a new slice from the array<strong>&nbsp;<\/strong>starting from index <strong>start<\/strong> to index <strong>end-1. <\/strong>So the element at index <strong>end <\/strong>is not included in the newly created slice. While re-slicing , both start and end index is optional.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The default value of the start index is zero<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The default value of the end index is the length of the array<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := [5]int{1, 2, 3, 4, 5}\n\n    \/\/Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    \/\/Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    \/\/Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    \/\/None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above example that<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>length of newly created slice = (<strong>end<\/strong>&#8211;<strong>start<\/strong>)<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>capacity of newly created slice = (<strong>length_of_array<\/strong>&#8211;<strong>start<\/strong>)<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>num1<\/strong> slice would look like<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"391\" height=\"251\" src=\"https:\/\/i0.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg?resize=391%2C251&#038;ssl=1\" alt=\"\" class=\"wp-image-2185\" srcset=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg?w=391&amp;ssl=1 391w, https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice2.jpg?resize=300%2C193&amp;ssl=1 300w\" sizes=\"auto, (max-width: 391px) 100vw, 391px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The newly created slices still refer the original array. To check this change element at any one of the index of the array and then reprint the slice<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here is the output:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">num1=[3 8 5]\nnum3=[1 2 3 8]\nnum4=[1 2 3 8 5]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This proves that each of the new slice is still referring to the original array.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Create_a_slice_from_slice\"><\/span><strong>Create a slice from slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Whatever we discussed about re-slicing from an array also applies here as well. See below example which illustrates same thing<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5}\n\n    \/\/Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    \/\/Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    \/\/Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    \/\/None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Both start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here also the newly created slices refer to the same underlying array that was being referred to by the original slice.&nbsp; To check this change element at any one of the index of the original slice and then reprint all the newly created slices<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here is the output:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">num1=[3 8 5]\nnum3=[1 2 3 8]\nnum4=[1 2 3 8 5]<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_make_function\"><\/span><strong>Using the&nbsp;make function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>make<\/strong> is a builtin function provided by go that can also be used to create a slice. Below is the signature of make function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func make([]{type}, length, capacity int) []{type}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Capacity is an optional parameter while creating slice using the make function. When capacity is omitted, the capacity of the slice is equal length specified for the slice. When using make function, behind the scenes go allocates an array equal to the capacity. All the elements of the allocated array are initialized with default zero value of the type. Let&#8217;s see a program illustrating this point.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/With capacity ommited\n    numbers = make([]int, 3)\n    fmt.Println(\"\\nCapacity Ommited\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[0 0 0]\nlength=3\ncapacity=5\n\nCapacity Ommited\nnumbers=[0 0 0]\nlength=3\ncapacity=3<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_new_function\"><\/span><strong>Using the new function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>new<\/strong> is a builtin function provided by go that can also be used to create a slice. It is not a very popular way of creating a slice as <strong>make<\/strong> is much more flexible in terms of functionalities . It is not generally used and also using <strong>new <\/strong>function returns a pointer to nil slice. Let&#8217;s see an example. In below example we are using the dereferencing operator <strong>&#8216;*&#8217;<\/strong> as <strong>new <\/strong>function returns a pointer to the nil slice.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := new([]int)\n    fmt.Printf(\"numbers=%v\\n\", *numbers)\n    fmt.Printf(\"length=%d\\n\", len(*numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(*numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[]\nlength=0\ncapacity=0<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Length_vs_Capacity\"><\/span><strong>Length vs Capacity<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Before moving further, let&#8217;s emphasis on understanding the caveats of length and capacity. Let&#8217;s create a simple slice with capacity greater than length.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers := make([]int, 3, 5)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Accessing the slice behind its length will result in a run time error &#8220;Index out of range&#8221;. It doesn&#8217;t matter if the accessed index is within the capacity. So the below line will cause the run time error.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers[4] = 5<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The length of the slice can be increased up to its capacity by re-slicing. So below re-slice will increase the length from 3 to 5.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers = numbers[0:5]<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The length of the slice can also be decreased using re-slicing. So below re-slice will decrease the length from 3 to 2<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers = numbers[0:2]<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The advantage of having capacity is that array of size capacity can be pre-allocated during the initialization.&nbsp; This is a performance boost as if more elements are needed to include in this array then space is already allocated for them.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see the program illustrating above points<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/This line will cause a runtime error index out of range [4] with length 3\n    \/\/numbers[4] = 5\n   \n    \/\/Increasing the length from 3 to 5\n    numbers = numbers[0:5]\n    fmt.Println(\"\\nIncreasing length from 3 to 5\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/Decresing the length from 3 to 2\n    numbers = numbers[0:2]\n    fmt.Println(\"\\nDecreasing length from 3 to 2\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[0 0 0]\nlength=3\ncapacity=5\n\nIncreasing length from 3 to 5\nnumbers=[0 0 0 0 0]\nlength=5\ncapacity=5\n\nDecreasing length from 3 to 2\nnumbers=[0 0]\nlength=2\ncapacity=5<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Accessing_and_Modifying_Slice_Elements\"><\/span><strong>Accessing and Modifying Slice Elements<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A slice element can be accessed by specifying the index. Slice element can also be allotted a new value using the index. Also, note that any changes in the underlying array will reflect back in the slice as we have also seen above. Let&#8217;s see a small example of accessing and modifying<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    array := [5]int{1, 2, 3, 4, 5}\n    slice := array[:]\n\n    \/\/Modifying the slice\n    slice[1] = 7\n    fmt.Println(\"Modifying Slice\")\n    fmt.Printf(\"Array=%v\\n\", array)\n    fmt.Printf(\"Slice=%v\\n\", slice)\n\n    \/\/Modifying the array. Would reflect back in slice too\n    array[1] = 2\n    fmt.Println(\"\\nModifying Underlying Array\")\n    fmt.Printf(\"Array=%v\\n\", array)\n    fmt.Printf(\"Slice=%v\\n\", slice)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Modifying Slice\nArray=[1 7 3 4 5]\nSlice=[1 7 3 4 5]\n\nModifying Underlying Array\nArray=[1 2 3 4 5]\nSlice=[1 2 3 4 5]<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Different_ways_of_iterating_a_slice\"><\/span><strong>Different ways of iterating a slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">An array can be iterated using:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using for loop<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using for-range loop<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a code example for both<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    letters := []string{\"a\", \"b\", \"c\"}\n    \/\/Using for loop\n    fmt.Println(\"Using for loop\")\n    len := len(letters)\n    for i := 0; i < len; i++ {\n        fmt.Println(letters[i])\n    }\n\n    \/\/Using for-range operator\n    fmt.Println(\"\\nUsing for-range loop\")\n    for i, letter := range letters {\n        fmt.Printf(\"%d %s\\n\", i, letter)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Using for loop\na\nb\nc\n\nUsing for-range loop\n0 a\n1 b\n2 c<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Appending_to_a_slice\"><\/span><strong>Appending to a slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">go <strong>builtin<\/strong> package provides an <strong>append<\/strong> function that can be used to append to a slice at the end. Below is the signature of this function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func append(slice []Type, elems ...Type) []Type<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The first argument is the slice itself. The second is the variable number of arguments which is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">elems ...Type<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>'...'<\/strong> operator is the variadic syntax. So basically <strong>...Type<\/strong> means It means that the append function can accept variable number of arguments of type <strong>Type<\/strong>. Below is the way for using this function. In below code we are appending 4 to a slice which has two elements. It appends at the end and returns the original slice. That is why we are collecting result again in <strong>numbers<\/strong> variable. It is also ok to assign the result to some other variable.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers := []int{1,2}\nnumbers = append(numbers, 4) \/\/Slice will become [1, 2, 4]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It is also ok to append many number of elements because the second argument is the variadic argument.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers := []int{1,2}\nnumbers = append(numbers, 3, 4, 5) \/\/Slice will become [1, 2, 3, 4, 5]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This function in the background increases the length and capacity of the slice. There are two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When slice length is less than capacity.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In this case, on using the append function,&nbsp; the length of the slice will be increased&nbsp; by one without any change in its capacity. Let's see a example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    numbers[0] = 1\n    numbers[1] = 2\n    numbers[2] = 3\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/Append number 4\n    numbers = append(numbers, 4)\n    fmt.Println(\"\\nAppend Number 4\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/Append number 5\n    numbers = append(numbers, 4)\n    fmt.Println(\"\\nAppend Number 5\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[1 2 3]\nlength=3\ncapacity=5\n\nAppend Number 4\nnumbers=[1 2 3 4]\nlength=4\ncapacity=5\n\nAppend Number 5\nnumbers=[1 2 3 4 4]\nlength=5\ncapacity=5<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Capacity in all cases doesn't changes and it is 5 while length increases by 1.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When slice length is greater than capacity.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">In this case since there is no more capacity, so no new elements can be accommodated.&nbsp; So in this case under the hood an array of double the capacity will be allocated. The current array pointed by the&nbsp; slice will be copied to that new array. Now the slice will starting pointing to this new array. Hence the capacity will be doubled and length will be increased by 1. Let's see a example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 3)\n    numbers[0] = 1\n    numbers[1] = 2\n    numbers[2] = 3\n\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    \/\/Append number 4\n    numbers = append(numbers, 4)\n    fmt.Println(\"\\nAppend Number 4\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[1 2 3]\nlength=3\ncapacity=3\n\nAppend Number 4\nnumbers=[1 2 3 4]\nlength=4\ncapacity=6<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above example that the capacity is doubled.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is also possible to append one slice to another slice. Below is the format for that.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">res := append(slice1, slice2...)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice <strong>'...'<\/strong> after the second slice.<strong> '...' <\/strong>is the operator which means that the argument is a variadic parameter. Meaning that during run time slice2&nbsp;will be expanded to its individual elements which are passed as multiple arguments to the append function.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers1 := []int{1, 2}\n    numbers2 := []int{3, 4}\n    numbers := append(numbers1, numbers2...)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[1 2 3 4]\nlength=4\ncapacity=4<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Copy_a_slice\"><\/span><strong>Copy a slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">go <strong>builtin<\/strong> package provides <strong>copy<\/strong> function that can be used to copy a slice. Below is the signature of this function. It takes in two slices <strong>dst<\/strong> and <strong>src<\/strong>, and copies data from <strong>src<\/strong> to <strong>dst<\/strong>. It returns the number of elements copied.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func copy(dst, src []Type) int<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">There are two cases to be considered while using the copy function:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the length of <strong>src<\/strong> is greater than the length of dst, then the number of elements copied is the length of <strong>dst<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the length of <strong>dst<\/strong> is greater than the length of src, then the number of elements copied is the length of <strong>src<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Basically the number of elements copied is minimum of length of <strong>(src, dst).&nbsp;<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also to note then once the copy is done then any change in <strong>dst<\/strong> will not reflect in <strong>src<\/strong> and vice versaLet's see an example of it.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    src := []int{1, 2, 3, 4, 5}\n    dst := make([]int, 5)\n\n    numberOfElementsCopied := copy(dst, src)\n    fmt.Printf(\"Number Of Elements Copied: %d\\n\", numberOfElementsCopied)\n    fmt.Printf(\"dst: %v\\n\", dst)\n    fmt.Printf(\"src: %v\\n\", src)\n\n    \/\/After changing numbers2\n    dst[0] = 10\n    fmt.Println(\"\\nAfter changing dst\")\n    fmt.Printf(\"dst: %v\\n\", dst)\n    fmt.Printf(\"src: %v\\n\", src)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Number Of Elements Copied: 5\ndst: [1 2 3 4 5]\nsrc: [1 2 3 4 5]\n\nAfter changing dst\ndst: [10 2 3 4 5]\nsrc: [1 2 3 4 5]<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Nil_Slice\"><\/span><strong>Nil Slice<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The default zero value of a slice is nil. The length and capacity both of a nil slice is zero. Though it is possible to append to a nil slice as well. Let's see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var numbers []int\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n    numbers = append(numbers, 1)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">numbers=[]\nlength=0\ncapacity=0\nnumbers=[1]\nlength=1\ncapacity=1<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Multidimensional_Slices\"><\/span><strong>Multidimensional Slices<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">As the multi-dimensional array is an array of arrays, similarly multi-dimensional slice is a slice of slices. To understand this, let's first look at the definition of a slice.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Data<\/strong> field in the slice header is a pointer to the underlying array. For a one dimensional slice, we have below declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">oneDSlice := make([]int, 2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">To declare a two dimensional slice the declaration would be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">twoDSlice = make([][]int, 2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Above declaration means that we want to create a <strong>slice<\/strong> of 2 slices. Carefully understand this point. But wait a second here, we haven't specified the second dimension here, meaning what is the length of each of the inner 2 slices. In case of slice, each of the inner slice has to be explicitly intialized like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for i := range twoDSlice {\n    twoDSlice[i] = make([]int, 3)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So using range on the original slice, we specify the length each of 2 slices using make.&nbsp; Below is one other way of doing the same but with slice elements specified<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var twoDSlice = make([][]int, 2)\ntwoDSlice[0] = []int{1, 2, 3}\ntwoDSlice[1] = []int{4, 5, 6}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Basically, with the above declaration, we create a slice of 2*3 dimensions which is a two-dimensional slice. The same idea can be extended to two-dimension, three-dimension, and so on.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">A complete working example of above two points<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    twoDSlice1 := make([][]int, 3)\n    for i := range twoDSlice1 {\n        twoDSlice1[i] = make([]int, 3)\n    }\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice1))\n    fmt.Printf(\"Number of columns in arsliceray: %d\\n\", len(twoDSlice1[0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(twoDSlice1)*len(twoDSlice1[0]))\n    fmt.Println(\"First Slice\")\n    for _, row := range twoDSlice1 {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n    twoDSlice2 := make([][]int, 2)\n    twoDSlice2[0] = []int{1, 2, 3}\n    twoDSlice2[1] = []int{4, 5, 6}\n    fmt.Println()\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice2))\n    fmt.Printf(\"Number of columns in arsliceray: %d\\n\", len(twoDSlice2[0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(twoDSlice2)*len(twoDSlice2[0]))\n    fmt.Println(\"Second Slice\")\n    for _, row := range twoDSlice2 {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Number of rows in slice: 2\nNumber of columns in arsliceray: 3\nTotal number of elements in slice: 6\nFirst Slice\n0\n0\n0\n0\n0\n0\n\nNumber of rows in slice: 2\nNumber of columns in arsliceray: 3\nTotal number of elements in slice: 6\nSecond Slice\n1\n2\n3\n4\n5\n6<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We mentioned above that we&nbsp;are creating a two-dimensional slice of 2*3 dimensions.&nbsp; With that said the thought that might be coming to your mind is whether it is possible to have different lengths for inner slices. Yes, it is possible. Unlike arrays which have inner arrays of the same length, in case of slice since we initialize each of the inner slices individually, it is possible to have different length for inner slices<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let's see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    twoDSlice := make([][]int, 2)\n    twoDSlice[0] = []int{1, 2, 3}\n    twoDSlice[1] = []int{4, 5}\n  \n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice))\n    fmt.Printf(\"Len of first row: %d\\n\", len(twoDSlice[0]))\n    fmt.Printf(\"Len of second row: %d\\n\", len(twoDSlice[1]))\n    fmt.Println(\"Traversing slice\")\n    for _, row := range twoDSlice {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Number of rows in slice: 2\nLen of first row: 3\nLen of second row: 2\nTraversing slice\n1\n2\n3\n4\n5<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let's see a small example of a three-dimensional slice as well. In the below program, we are creating a slice of 2*2*3 dimensions.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := make([][][]int, 2)\n    for i := range sample {\n        sample[i] = make([][]int, 2)\n        for j := range sample[i] {\n            sample[i][j] = make([]int, 3)\n        }\n    }\n    \n    fmt.Printf(\"Length of first dimension: %d\\n\", len(sample))\n    fmt.Printf(\"Length of second dimension: %d\\n\", len(sample[0]))\n    fmt.Printf(\"Length of third dimension: %d\\n\", len(sample[0][0]))\n    fmt.Printf(\"Overall Dimension of the slice: %d*%d*%d\\n\", len(sample), len(sample[0]), len(sample[0][0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(sample)*len(sample[0])*len(sample[0][0]))\n    for _, first := range sample {\n        for _, second := range first {\n            for _, value := range second {\n                fmt.Println(value)\n            }\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Length of first dimension: 2\nLength of second dimension: 2\nLength of third dimension: 3\nOverall Dimension of the slice: 2*2*3\nTotal number of elements in slice: 12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about slice in golang. Hope you have liked this article. Please share feedback\/improvements\/mistakes in comments<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>&nbsp;\u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/maps-in-golang\">Maps<\/a><br><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/understanding-array-golang-complete-guid\">Array<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the&nbsp; chapter 18 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;MapsPrevious Tutorial&nbsp;\u2013 Array Now let\u2019s check&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[181,3,4,46],"class_list":["post-2181","post","type-post","status-publish","format-standard","hentry","category-tech","tag-complete-guide","tag-go","tag-golang","tag-slice"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Slice in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/slice-in-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Slice in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the&nbsp; chapter 18 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;MapsPrevious Tutorial&nbsp;\u2013 Array Now let\u2019s check...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/slice-in-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-05-18T16:52:20+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-07-14T16:47:18+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"15 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/\",\"name\":\"Slice in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg\",\"datePublished\":\"2020-05-18T16:52:20+00:00\",\"dateModified\":\"2022-07-14T16:47:18+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/slice-in-golang\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/slice-in-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Slice in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Slice in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/slice-in-golang\/","og_locale":"en_US","og_type":"article","og_title":"Slice in Go (Golang) - Welcome To Golang By Example","og_description":"This is the&nbsp; chapter 18 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series Next Tutorial&nbsp;\u2013&nbsp;MapsPrevious Tutorial&nbsp;\u2013 Array Now let\u2019s check...","og_url":"https:\/\/golangbyexamples.com\/slice-in-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-05-18T16:52:20+00:00","article_modified_time":"2022-07-14T16:47:18+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"15 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/slice-in-golang\/","url":"https:\/\/golangbyexamples.com\/slice-in-golang\/","name":"Slice in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/slice-in-golang\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/slice-in-golang\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg","datePublished":"2020-05-18T16:52:20+00:00","dateModified":"2022-07-14T16:47:18+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/slice-in-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/slice-in-golang\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/slice-in-golang\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/05\/slice.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/slice-in-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Slice in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-zb","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2181","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2181"}],"version-history":[{"count":16,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2181\/revisions"}],"predecessor-version":[{"id":8011,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2181\/revisions\/8011"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2181"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2181"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2181"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}