{"id":868,"date":"2019-12-23T17:44:28","date_gmt":"2019-12-23T17:44:28","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=868"},"modified":"2021-06-05T23:31:56","modified_gmt":"2021-06-05T18:01:56","slug":"using-context-in-golang-complete-guide","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/","title":{"rendered":"Using Context Package in GO (Golang) &#8211; Complete Guide"},"content":{"rendered":"\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Introduction<\/strong>:<\/h1>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>Definition:<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Context is a package provided by GO. Let&#8217;s first understand some problems that existed already, and which context package tries to solve.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>Problem Statement:<\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Let&#8217;s say that you started a function and you need to pass some common parameters to the downstream functions. You cannot pass these common parameters each as an argument to all the downstream functions.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>You started a goroutine which in turn start more goroutines and so on. Suppose the task that you were doing is no longer needed. Then how to inform all child goroutines to gracefully exit so that resources can be freed up<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A task should be finished within a specified timeout of say 2 seconds. If not it should gracefully exit or return.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A task should be finished within a deadline eg it should end before 5 pm . If not finished then it should gracefully exit and return<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">If you notice all the above problems are quite applicable to HTTP requests and but none the less these problems are also applicable to many different areas too.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"> For a web HTTP request, it needs to be canceled when the client has disconnected, or the request has to be finished within a specified timeout and also requests scope values such as request_id needs to be available to all downstream functions.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>When to Use (Some Use Cases):<\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>To pass data to the downstream. Eg.&nbsp; a HTTP request creates a <strong>request_id, request_user <\/strong>which needs to be passed around to all downstream functions for distributed tracing.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When you want to halt the operation in the midway &#8211; A HTTP request should be stopped because the client disconnected<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When you want to halt the operation within a specified time from start i.e with timeout &#8211; Eg- a HTTP request should be completed in 2 sec or else should be aborted.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When you want to halt an operation before a certain time &#8211; Eg. A cron is running that needs to be aborted in 5 mins if not completed.<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Context Interface<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">The core of the understanding context is knowing the <strong>Context<\/strong> interface<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type Context interface {\n    \/\/It retures a channel when a context is cancelled, timesout (either when deadline is reached or timeout time has finished)\n    Done() <-chan struct{}\n\n    \/\/Err will tell why this context was cancelled. A context is cancelled in three scenarios.\n    \/\/ 1. With explicit cancellation signal\n    \/\/ 2. Timeout is reached\n    \/\/ 3. Deadline is reached\n    Err() error\n\n    \/\/Used for handling deallines and timeouts\n    Deadline() (deadline time.Time, ok bool)\n\n    \/\/Used for passing request scope values\n    Value(key interface{}) interface{}\n}<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Creating New Context<\/strong><\/h1>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>context.Background():<\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">context package function Background() returns a empty&nbsp;Context which implements the <strong>Context<\/strong> interface<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>It has no values<\/li><li>It is never canceled<\/li><li>It has no deadline<\/li><\/ol>\n\n\n\n<p class=\"has-medium-font-size\">Then what is the use context.Background(). context.Background() serves as the root of all context which will be derived from it. It will be more clear as we go along<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>context.ToDo():<\/strong><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>context package ToDo function returns an empty Context. This context is used when the surrounding function has not been passed a context and one wants to use the context as a placeholder in the current function and plans to add actual context in the near future. One use of adding it as a placeholder is that it helps in validation in the Static Code Analysis tool. <\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is also an empty Context same as context.Background()<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">The above two methods describe a way of creating new contexts. More context can be derived from these contexts. This is where context tree comes into the picture<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Context Tree<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Before understanding Context Tree please make sure that it is implicitly created in the background when using <strong>context<\/strong>. You will find no mention of in go context package itself.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"> Whenever you use context, then the empty Context got from context.Background() is the root of all context. context.ToDo() also acts like root context but as mentioned above it is more like a context placeholder for future use. This empty context has no functionality at all and we can add functionality by deriving a new context from this. Basically a new context is created by wrapping an already existing immutable context and adding additional information. Let's see some example of a context tree which gets created<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Two level tree<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">rootCtx := context.Background()\nchildCtx := context.WithValue(rootCtx, \"msgId\", \"someMsgId\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>rootCtx<\/strong> is the empty Context with no functionality<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>childCtx<\/strong> is derived from rootCtx and has the functionality of storing request-scoped values. In above example it is storing key-value pair of&nbsp; {\"msgId\" : \"someMsgId\"}<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Three level tree<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">rootCtx := context.Background()\nchildCtx := context.WithValue(rootCtx, \"msgId\", \"someMsgId\")\nchildOfChildCtx, cancelFunc := context.WithCancel(childCtx)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>rootCtx<\/strong> is the empty Context with no functionality<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>childCtx<\/strong> is derived from rootCtx and has the functionality of storing request-scoped values. In above example it is storing key-value pair of&nbsp; {\"msgId\" : \"someMsgId\"}<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>childOfChildCtx<\/strong> is derived from childCtx . It has the functionality of storing request-scoped values and also it has the functionality of triggering cancellation signals. cancelFunc can be used to trigger cancellation signals<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Multi-level tree<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">rootCtx := context.Background()\nchildCtx1 := context.WithValue(rootCtx, \"msgId\", \"someMsgId\")\nchildCtx2, cancelFunc := context.WithCancel(childCtx1)\nchildCtx3 := context.WithValue(rootCtx, \"user_id\", \"some_user_id)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In above:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>rootCtx<\/strong> is the empty Context with no functionality<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>childCtx1<\/strong> is derived from <strong>rootCtx<\/strong> and has the functionality of storing request-scoped values. In above example it is storing key-value pair of&nbsp; {\"msgId\" : \"someMsgId\"}<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>childCtx2<\/strong> is derived from <strong>childCtx1<\/strong> . It has the functionality of triggering cancellation signals. cancelFunc can be used to trigger cancellation signals<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>childCtx3<\/strong> is derived from <strong>rootCtx<\/strong> . It has the functionality of storing the current user<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Above three-level tree would look like below<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"261\" height=\"206\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg?resize=261%2C206&#038;ssl=1\" alt=\"\" class=\"wp-image-4117\" data-recalc-dims=\"1\"\/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">As since it is a tree, it is also possible to create more childs for a particular node. For eg we can derive a new context <strong>childCtx4<\/strong> from <strong>childCtx1<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">childCtx4 := context.WithValue(childCtx1, \"current_time\", \"some_time)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Tree with above node added would like below:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"231\" height=\"206\" src=\"https:\/\/i2.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree-2-1.jpg?resize=231%2C206&#038;ssl=1\" alt=\"\" class=\"wp-image-4120\" data-recalc-dims=\"1\"\/><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">At this very moment, it might not be clear how WithValue() or WithCancel() function is used. Right now just understand that whenever using context, a context tree is created with root as the <strong>emptyCtx <\/strong>. These functions will get clear as we move on<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>Deriving From Context<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A derived context is can be created in 4 ways<br><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Passing request-scoped values&nbsp; -&nbsp; using <strong>WithValue() <\/strong>function of context package<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>With cancellation signals - using <strong>WithCancel() <\/strong>function of context package<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>With deadlines - using <strong>WithDeadine() <\/strong>function of context package<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>With timeouts - using <strong>WithTimeout() <\/strong>function of context package<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let's understand each of the above in details<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>context.WithValue() <\/strong><\/h2>\n\n\n\n<p class=\"has-very-dark-gray-color has-text-color\" style=\"font-size:22px\">Used for passing request-scoped values. The complete signature of the function is <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">withValue(parent Context, key, val interface{}) (ctx Context)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It takes in a parent context, key, value and returns a derived context&nbsp; This derived context has <strong>key<\/strong> associated with the <strong>value<\/strong>. Here the parent context can be either context.Background() or any other context. Further, any context which is derived from this context will have this value.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">#Root Context\nctxRoot := context.Background() - #Root context \n\n#Below ctxChild has acess to only one pair {\"a\":\"x\"}\nctxChild := context.WithValue(ctxRoot, \"a\", \"x\") \n\n#Below ctxChildofChild has access to both pairs {\"a\":\"x\", \"b\":\"y\"} as it is derived from ctxChild\nctxChildofChild := context.WithValue(ctxChild, \"b\", \"y\") \n<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Complete Working example of <strong>withValue(). <\/strong>In the below example, we are injecting a msgId for each incoming request. If you notice in below program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>inejctMsgID is a net HTTP middleware function that populates the <strong>\"msgID\"<\/strong> field in context<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>HelloWorld is the handler function for api \"localhost:8080\/welcome\" which gets this msgID from context and sends it back as response headers<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"context\"\n    \"net\/http\"\n    \"github.com\/google\/uuid\"\n)\n\nfunc main() {\n    helloWorldHandler := http.HandlerFunc(HelloWorld)\n    http.Handle(\"\/welcome\", inejctMsgID(helloWorldHandler))\n    http.ListenAndServe(\":8080\", nil)\n}\n\n\/\/HelloWorld hellow world handler\nfunc HelloWorld(w http.ResponseWriter, r *http.Request) {\n    msgID := \"\"\n    if m := r.Context().Value(\"msgId\"); m != nil {\n        if value, ok := m.(string); ok {\n            msgID = value\n        }\n    }\n    w.Header().Add(\"msgId\", msgID)\n    w.Write([]byte(\"Hello, world\"))\n}\n\nfunc inejctMsgID(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        msgID := uuid.New().String()\n        ctx := context.WithValue(r.Context(), \"msgId\", msgID)\n        req := r.WithContext(ctx)\n        next.ServeHTTP(w, req)\n        \n    })\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Simply do a curl call to the above request after running the above program<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">curl -v http:\/\/localhost\/welcome<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here will be the response. Notice the <strong>MsgId <\/strong>that gets populated in the response headers. The injectMsgId function acts as middleware and injects a unique msgId to the request context.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">curl -v http:\/\/localhost:8080\/welcome\n* \u00a0 Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET \/do HTTP\/1.1\n> Host: localhost:8080\n> User-Agent: curl\/7.54.0\n> Accept: *\/*\n>\u00a0\n< HTTP\/1.1 200 OK\n< Msgid: a03ff1d4-1464-42e5-a0a8-743c5af29837\n< Date: Mon, 23 Dec 2019 16:51:01 GMT\n< Content-Length: 12\n< Content-Type: text\/plain; charset=utf-8\n<\u00a0\n* Connection #0 to host localhost left intact<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>context.WithCancel() <\/strong><\/h2>\n\n\n\n<p class=\"has-very-dark-gray-color has-text-color has-medium-font-size\">Used for cancellation signals. Below is the signature of <strong>WithCancel() <\/strong>function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>context.WithCancel()<\/strong> function returns two things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Copy of the parentContext with the new done channel.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A cancel function which when called closes this done channel<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Only the creator of this context should call the cancel function. It is highly not recommended to pass around the <strong>cancel <\/strong>function. Lets understand <strong>withCancel <\/strong>with an example.<\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancelFunc := context.WithCancel(ctx)\n    go task(cancelCtx)\n    time.Sleep(time.Second * 3)\n    cancelFunc()\n    time.Sleep(time.Second * 1)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"Gracefully exit\")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1\n2\n3\nGracefully exit\ncontext canceled<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>task function will gracefully exit once the <strong>cancelFunc <\/strong>is called. Once the cancelFunc is called, the error string is set to <strong>\"context cancelled\" <\/strong>by the context package. That is why the output of <strong>ctx.Err()<\/strong> is <strong>\"context cancelled\"<\/strong><\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>context.WithTimeout() <\/strong><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Used for time-based cancellation. The signature of the function is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>context.WithTimeout()<\/strong> function&nbsp; will<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Will return a copy of the parentContext with the new done channel.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Accept a timeout duration after which this done channel will be closed and context will be canceled<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A cancel function which can be called in case the context needs to be canceled before timeout. &nbsp; <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Lets see an example<\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancel := context.WithTimeout(ctx, time.Second*3)\n    defer cancel()\n    go task1(cancelCtx)\n    time.Sleep(time.Second * 4)\n}\n\nfunc task1(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"Gracefully exit\")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1\n2\n3\nGracefully exit\ncontext deadline exceeded<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>task function will gracefully exit once the timeout of 3 seconds is completed. The error string is set to \"context deadline exceeded\" by the context package. That is why the output of ctx.Err() is \"context deadline exceeded\"<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><strong>context.WithDeadline() <\/strong><\/h2>\n\n\n\n<p class=\"has-very-dark-gray-color has-text-color has-medium-font-size\">Used for deadline-based cancellation. The signature of the function is <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>context.WithDeadline()<\/strong> function <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Will return a copy of the parentContext with the new done channel.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Accept a deadline after which this done channel will be closed and context will be canceled<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A cancel function which can be called in case the context needs to be canceled before the deadline is reached.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let's see an example<\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color\" style=\"font-size:26px\"><strong>Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancel := context.WithDeadline(ctx, time.Now().Add(time.Second*5))\n    defer cancel()\n    go task(cancelCtx)\n    time.Sleep(time.Second * 6)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"Gracefully exit\")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1\n2\n3\n4\n5\nGracefully exit\ncontext deadline exceeded<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>task function will gracefully exit once the timeout of 5 seconds is completed as we gave the deadline of Time.now() + 5 seconds. The error string is set to \"context deadline exceeded\" by the context package. That is why the output of ctx.Err() is \"context deadline exceeded\"<\/li><\/ul>\n\n\n\n<p><br><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>What We Learned<\/strong><\/h1>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color has-medium-font-size\"><strong>How to create the context<\/strong>:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using context.Backgroun()<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using context.Todo()<\/li><\/ul>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color has-medium-font-size\"><strong>Context Tree<\/strong><\/p>\n\n\n\n<p class=\"has-vivid-purple-color has-text-color has-medium-font-size\"><strong>Deriving a new context<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>context.WithValue()<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>context.WithCancel()<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>context.WithTimeout()<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>contxt.WithDeadline()<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><strong>BestPractices and Caveats<\/strong><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Following is a list of best practices that you can follow while using a context.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Do not store a context within a struct type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Context should flow through your program. For example, in case of an HTTP request, a new context can be created for each incoming request which can be used to hold a request_id or put some common information in the context like currently logged in user which might be useful for that particular request.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Always pass context as the first argument to a function.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Whenever you are not sure whether to use the context or not, it is better to use the context.ToDo() as a placeholder.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only the parent goroutine or function should the cancel context. Therefore do not pass the <strong>cancelFunc <\/strong>to downstream goroutines or functions. Golang will allow you to pass the <strong>cancelFunc<\/strong> around to child goroutines but it is not a recommended practice<\/li><\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Introduction: Definition: Context is a package provided by GO. Let&#8217;s first understand some problems that existed already, and which context package tries to solve. Problem Statement: Let&#8217;s say that you started a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":true,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[116,132,131,117],"class_list":["post-868","post","type-post","status-publish","format-standard","hentry","category-tech","tag-context-in-golang","tag-explained","tag-golang-context-explained","tag-sidetoc"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Using Context Package in GO (Golang) - Complete Guide - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Using Context Package in GO (Golang) - Complete Guide - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Introduction: Definition: Context is a package provided by GO. Let&#8217;s first understand some problems that existed already, and which context package tries to solve. Problem Statement: Let&#8217;s say that you started a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2019-12-23T17:44:28+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-06-05T18:01:56+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/\",\"url\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/\",\"name\":\"Using Context Package in GO (Golang) - Complete Guide - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg\",\"datePublished\":\"2019-12-23T17:44:28+00:00\",\"dateModified\":\"2021-06-05T18:01:56+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Using Context Package in GO (Golang) &#8211; Complete Guide\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Using Context Package in GO (Golang) - Complete Guide - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/","og_locale":"en_US","og_type":"article","og_title":"Using Context Package in GO (Golang) - Complete Guide - Welcome To Golang By Example","og_description":"Introduction: Definition: Context is a package provided by GO. Let&#8217;s first understand some problems that existed already, and which context package tries to solve. Problem Statement: Let&#8217;s say that you started a...","og_url":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2019-12-23T17:44:28+00:00","article_modified_time":"2021-06-05T18:01:56+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/","url":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/","name":"Using Context Package in GO (Golang) - Complete Guide - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg","datePublished":"2019-12-23T17:44:28+00:00","dateModified":"2021-06-05T18:01:56+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/09\/Context-Tree.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/using-context-in-golang-complete-guide\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Using Context Package in GO (Golang) &#8211; Complete Guide"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-e0","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/868","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=868"}],"version-history":[{"count":68,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/868\/revisions"}],"predecessor-version":[{"id":5798,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/868\/revisions\/5798"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=868"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=868"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=868"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}