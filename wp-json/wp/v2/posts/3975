{"id":3975,"date":"2020-09-20T21:04:38","date_gmt":"2020-09-20T15:34:38","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3975"},"modified":"2020-11-25T00:55:22","modified_gmt":"2020-11-24T19:25:22","slug":"defer-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/defer-golang\/","title":{"rendered":"Defer keyword in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 14 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/pointer-golang\/\">Pointer<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\">Switch<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Custom_Function_in_defer\" title=\"Custom Function in defer\">Custom Function in defer<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Inline_Function_in_Defer\" title=\"Inline Function in Defer\">Inline Function in Defer<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#How_does_defer_works\" title=\"How does&nbsp;defer works\">How does&nbsp;defer works<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Evaluation_of_defer_arguments\" title=\"Evaluation of defer arguments\">Evaluation of defer arguments<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Multiple_defer_functions_in_the_same_function\" title=\"Multiple defer functions in the same function\">Multiple defer functions in the same function<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Defer_function_and_Named_Return_Values\" title=\"Defer function and Named Return Values\">Defer function and Named Return Values<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Defer_and_Methods\" title=\"Defer and Methods\">Defer and Methods<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Defer_and_Panic\" title=\"Defer and Panic\">Defer and Panic<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Defer as the name suggests is used to defer the cleanup activities in a function. These cleanup activities will be performed at the end of the function. This cleanup activities will be done in a different function called by defer.&nbsp; This different function is called at the end of the surrounding function before it returns. Below is the syntax of defer function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">defer {function_or_method_call}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Things to note about defer function<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Execution of a deferred function is delayed to the moment the surrounding function returns<\/li><li>deferred function will also be executed if the&nbsp;enclosing function terminates abruptly. For example in case of a panic<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">One good example of understanding the <strong>defer<\/strong> function is to look at the use case of writing to a file. A file that is opened for writing also must be closed.&nbsp; &nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    err := writeToTempFile(\"Some text\")\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"Write to file succesful\")\n}\n\nfunc writeToTempFile(text string) error {\n    file, err := os.Open(\"temp.txt\")\n    if err != nil {\n        return err\n    }\n    n, err := file.WriteString(\"Some text\")\n    if err != nil {\n        return err\n    }\n    fmt.Printf(\"Number of bytes written: %d\", n)\n    file.Close()\n    return nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, in the <strong>writeToTempFile <\/strong>function, we are opening a file and then trying to write some content to the file. After we have written the contents of the file we close the file. It is possible that during the write operation it might result into an error and function will return without closing the file. <strong>Defer<\/strong> function helps to avoid these kinds of problems. <strong>Defer<\/strong>&nbsp;function is always executed before the surrounding function returns. Let&#8217;s rewrite the above program with a&nbsp;<strong>defer<\/strong> function here.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    err := writeToTempFile(\"Some text\")\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"Write to file succesful\")\n}\n\nfunc writeToTempFile(text string) error {\n    file, err := os.Open(\"temp.txt\")\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    n, err := file.WriteString(\"Some text\")\n    if err != nil {\n        return err\n    }\n    fmt.Printf(\"Number of bytes written: %d\", n)\n    return nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we do <strong>defer file.Close()<\/strong> after opening the file. This will make sure that closing of the file is executed even if the write to the file results into an error. Defer function makes sure that the file will be closed regardless of number of return statements in the function<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Custom_Function_in_defer\"><\/span><strong>Custom Function in defer<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">We can also call a custom function in <strong>defer<\/strong>. Let&#8217;s see an example for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    defer test()\n    fmt.Println(\"Executed in main\")\n}\nfunc test() {\n    fmt.Println(\"In Defer\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Executed in main\nIn Defer<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program there is a <strong>defer<\/strong> statement calling the custom function named <strong>test<\/strong>. As seen from the output, the <strong>test<\/strong> function is called after everything in the main is executed and before main returns. That is why<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Executed in main<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">is printed before<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">In Defer<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above function also shows that it is perfectly ok to use defer in the main function as well.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Inline_Function_in_Defer\"><\/span><strong>Inline Function in Defer<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">It is also possible to have an inline function with defer. Let&#8217;s see an example of that.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    defer func() { fmt.Println(\"In inline defer\") }()\n    fmt.Println(\"Executed\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Executed\nIn inline defer<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above code we have <strong>defer<\/strong> with a inline function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">defer func() { fmt.Println(\"In inline defer\") }()<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is allowed in go. Also note that it is mandatory to add <strong>&#8220;()&#8221;<\/strong> after the function otherwise compiler will raise error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">expression in defer must be function call<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As seen from the output, that the inline function is called after everything in the main is executed and before main returns. That is why<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Executed in main<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">is printed before<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">In inline Defer<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"How_does_defer_works\"><\/span><strong>How does&nbsp;defer works<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">When the the compiler&nbsp;encounter a defer statement in a function it pushes it onto a list. This list internally implements a stack data structure.&nbsp; All the encountered defer statement&nbsp;in the same function are&nbsp;pushed onto this list.&nbsp;When the surrounding function returns&nbsp;then all the functions in the stack starting from top to bottom are executed before&nbsp;execution can begin in the calling function. Now same thing will happen in the calling function as well.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand what happens when we have multiple defer functions in different functions. Imagine a function call from <strong>main<\/strong> function to <strong>f1<\/strong> function to <strong>f2<\/strong> function<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main<\/strong>-&gt;<strong>f1<\/strong>-&gt;<strong>f2<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the sequence that will be happening after f2 returns<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Defer functions in <strong>f2<\/strong> will be executed if present. Control will return to the caller which is a function <strong>f1<\/strong>.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Defer functions in <strong>f1<\/strong> will be executed if present. Control will return to the caller which is a function <strong>main<\/strong>. Note that if there are more functions in between then the process will continue up the stack in a similar way<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>After main returns the defer&nbsp; function if present in main will be executed<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer fmt.Println(\"Defer in main\")\n\tfmt.Println(\"Stat main\")\n\tf1()\n\tfmt.Println(\"Finish main\")\n}\n\nfunc f1() {\n\tdefer fmt.Println(\"Defer in f1\")\n\tfmt.Println(\"Start f1\")\n\tf2()\n\tfmt.Println(\"Finish f1\")\n}\n\nfunc f2() {\n\tdefer fmt.Println(\"Defer in f2\")\n\tfmt.Println(\"Start f2\")\n\tfmt.Println(\"Finish f2\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Stat main\nStart f1\nStart f2\nFinish f2\nDefer in f2\nFinish f1\nDefer in f1\nFinish main\nDefer in main<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Evaluation_of_defer_arguments\"><\/span><strong>Evaluation of defer arguments<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">defer arguments are evaluated at the time defer statement is evaluated<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\tsample := \"abc\"\n\n\tdefer fmt.Printf(\"In defer sample is: %s\\n\", sample)\n\tsample = \"xyz\"\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">In defer sample is: abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program when the defer statement was evaluated the value of the&nbsp;<strong>sample<\/strong> variable was <strong>&#8220;abc&#8221;<\/strong>. In the defer function, we print the&nbsp; sample variable. After the defer statement we change the value of the&nbsp;<strong>sample<\/strong> variable to <strong>&#8220;xyz&#8221;<\/strong>.&nbsp; But the program outputs <strong>&#8220;abc&#8221;<\/strong> instead of <strong>&#8220;xyz&#8221;<\/strong> because when the defer arguments were evaluated the value of the&nbsp; sample variable was <strong>&#8220;abc&#8221;<\/strong>.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Multiple_defer_functions_in_the_same_function\"><\/span><strong>Multiple defer functions in the same function<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp;In case we have multiple defer&nbsp;functions within a particular function, then all the&nbsp; defer functions will be executed in last in first out order<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    i := 0\n    i = 1\n    defer fmt.Println(i)\n    i = 2\n    defer fmt.Println(i)\n    i = 3\n    defer fmt.Println(i)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">3\n2\n1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have three <strong>defer<\/strong> function each printing the value of <strong>i<\/strong>. The variable <strong>i<\/strong> is incremented before each defer. The code outputs 3 first meaning that third defer function is executed first.&nbsp; Then it outputs 2 meaning that second defer is executed after that and then it outputs 1 meaning that first defer is executed last. This shows that when there are multiple defer functions within a particular function then the follow the &#8220;Last in first out&#8221; rule. And that is why program outputs&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">3\n2\n1<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Defer_function_and_Named_Return_Values\"><\/span><strong>Defer function and Named Return Values<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In case of named return value in the function, the defer function can read as well as modified those named return values. If the defer function modifies the name return value then that modified value will&nbsp; be returned<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    s := test()\n    fmt.Println(s)\n}\nfunc test() (size int) {\n    defer func() { size = 20 }()\n    size = 30\n    return\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">20<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have named return value <strong>&#8220;size&#8221;<\/strong>&nbsp; in the the test function. In the defer function we modify the name return value and we change the value to 20.&nbsp; We then set size to 30.&nbsp;In the main function we print the return value of test function&nbsp; and it outputs 20 instead of 30 because defer function has modified the value of size variable in the test function<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Defer_and_Methods\"><\/span><strong>Defer and Methods<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>defer<\/strong> statement is also applicable&nbsp; for methods in a similar way it is applicable to functions. In the first example we had already seen the <strong>Close<\/strong> method which was called on the file instance. That shows that the&nbsp; <strong>defer<\/strong> statement is also applicable for methods as well<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Defer_and_Panic\"><\/span><strong>Defer and Panic<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">defer function will also be executed even if panic happens in a program.&nbsp; When the panic is raised in a function then the execution of that function is stopped and any deferred function will be executed. In fact deferred function of all the function calls in the stack will also be executed until all the functions have&nbsp;returned .At that time the program will exit and it will print the panic message<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So if a&nbsp; defer function is present it then it will be executed and the control will&nbsp;be&nbsp; returned back to the caller function which will again execute its defer function if present and the chain goes on until the program exists.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    defer fmt.Println(\"Defer in main\")\n    panic(\"Panic with Defer\")\n    fmt.Println(\"After painc in f2\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in main\npanic: Panic Create\n\ngoroutine 1 [running]:\nmain.main()\n        \/Users\/slohia\/go\/src\/github.com\/golang-examples\/articles\/tutorial\/panicRecover\/deferWithPanic\/main.go:7 +0x95\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have a defer function first and then we manually create the panic. As you can see from the output that defer function got executed as below line is printed in the output<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in main<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">That is all about defer in golang. Hope you have liked the article. please share feedback\/improvements\/mistakes in comments<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/pointer-golang\/\">Pointer<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/switch-statement-golang\/\">Switch<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 14 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0PointerPrevious Tutorial\u00a0\u2013 Switch Now let\u2019s check&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-3975","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Defer keyword in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/defer-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Defer keyword in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 14 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0PointerPrevious Tutorial\u00a0\u2013 Switch Now let\u2019s check...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/defer-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-20T15:34:38+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-24T19:25:22+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/defer-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/defer-golang\/\",\"name\":\"Defer keyword in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-20T15:34:38+00:00\",\"dateModified\":\"2020-11-24T19:25:22+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/defer-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/defer-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/defer-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Defer keyword in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Defer keyword in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/defer-golang\/","og_locale":"en_US","og_type":"article","og_title":"Defer keyword in Go (Golang) - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 14 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0PointerPrevious Tutorial\u00a0\u2013 Switch Now let\u2019s check...","og_url":"https:\/\/golangbyexamples.com\/defer-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-20T15:34:38+00:00","article_modified_time":"2020-11-24T19:25:22+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/defer-golang\/","url":"https:\/\/golangbyexamples.com\/defer-golang\/","name":"Defer keyword in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-20T15:34:38+00:00","dateModified":"2020-11-24T19:25:22+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/defer-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/defer-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/defer-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Defer keyword in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-127","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3975","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3975"}],"version-history":[{"count":7,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3975\/revisions"}],"predecessor-version":[{"id":4549,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3975\/revisions\/4549"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3975"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3975"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3975"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}