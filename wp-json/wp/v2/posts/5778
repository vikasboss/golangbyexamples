{"id":5778,"date":"2021-06-01T02:48:04","date_gmt":"2021-05-31T21:18:04","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5778"},"modified":"2021-06-01T02:49:41","modified_gmt":"2021-05-31T21:19:41","slug":"golang-regex-backreferences","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/","title":{"rendered":"Golang Regex: Backreferences"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#Program\" title=\"Program\">Program<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#First_Example\" title=\"First Example\">First Example<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#Second_Example\" title=\"Second Example\">Second Example<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#Replace_Matched_String\" title=\"Replace Matched String\">Replace Matched String<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Golang regex package <a href=\"https:\/\/golang.org\/pkg\/regexp\/\">regexp<\/a> uses the <a href=\"https:\/\/swtch.com\/~rsc\/regexp\/regexp3.html\">re2 engine<\/a> which doesn&#8217;t support backreferences. You can check the same here<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/github.com\/google\/re2\/wiki\/Syntax\">https:\/\/github.com\/google\/re2\/wiki\/Syntax<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It does mention that it doesn&#8217;t support backreferences.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>However, there is another golang package available that uses libpcre++, Perl regexes, and it supports backreferences.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">https:\/\/github.com\/glenn-brown\/golang-pkg-pcre\/tree\/master\/src\/pkg\/pcre<\/code><\/pre>\n\n\n\n<p> <\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">So let&#8217;s see examples of backreferences in golang using this <strong>pcre<\/strong> package.<\/p>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"First_Example\"><\/span><strong>First Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s say we want to match the repetition of a digit. Valid inputs are<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1111\n888888888\n444<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Regex to match for the same would be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(\\d)\\1+<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s dissect this regex<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>(\\d)<\/strong> &#8211; Matches a single digit. The single-digit is enclosed in parentheses so it acts as a capturing group.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>\\1<\/strong> &#8211; Backreferences the first sub match by capturing group. So it will reference the first digit<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>+<\/strong> &#8211; One or more occurrences of the previous digit<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com\/glenn-brown\/golang-pkg-pcre\/src\/pkg\/pcre\"\n)\n\nfunc main() {\n\tregex := pcre.MustCompile(`(\\d)\\1+`, 0)\n\n\tmatches := regex.MatcherString(\"1111\", 0).Matches()\n\tfmt.Println(\"For 1111 : \", matches)\n\n\tmatches = regex.MatcherString(\"88888888\", 0).Matches()\n\tfmt.Println(\"For 88888888 : \", matches)\n\n\tmatches = regex.MatcherString(\"444\", 0).Matches()\n\tfmt.Println(\"For 444 : \", matches)\n\n\tmatches = regex.MatcherString(\"123\", 0).Matches()\n\tfmt.Println(\"For 123 : \", matches)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1111 :  true\nFor 88888888 :  true\nFor 444 :  true\nFor 123 :  false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As expected it gives a match for repetition of digits<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1111\n888888888\n444<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">And it does not match for below as it is not a repetition<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">123<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Second_Example\"><\/span><strong>Second Example<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s say we want to match the repetition of a word separated by a colon. Valid inputs are<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">John:John\nThe names are Simon:Simon<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Regex to match for the same would be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(\\w+):\\1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s dissect this regex<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>(\\w+)<\/strong> &#8211; Matches a word having more than one character. It is enclosed in parentheses so it acts as a capturing group.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>\\1<\/strong> &#8211; Backreferences the first sub match by capturing group. So it will reference the matched word<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com\/glenn-brown\/golang-pkg-pcre\/src\/pkg\/pcre\"\n)\n\nfunc main() {\n\tregex := pcre.MustCompile(`(\\w+):\\1`, 0)\n\n\tmatches := regex.MatcherString(\"John:John\", 0).Matches()\n\tfmt.Println(\"For John:John: \", matches)\n\n\tmatches = regex.MatcherString(\"The names are Simon:Simon\", 0).Matches()\n\tfmt.Println(\"For The names are Simon:Simon: \", matches)\n\n\tmatches = regex.MatcherString(\"John:Simon\", 0).Matches()\n\tfmt.Println(\"For John:Simon: \", matches)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For John:John:  true\nFor The names are Simon:Simon:  true\nFor John:Simon:  false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As expected it gives a match for a string that contains a substring having a repetition of a word<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">John:John\nThe names are Simon:Simon<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">And it does not match for below as it does not contain a repetition of a word<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">John:Simon<\/code><\/pre>\n\n\n\n<p> <\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Replace_Matched_String\"><\/span><strong>Replace Matched String<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>pcre<\/strong> package also provides functionality to replace the matched string. Below is an example of the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com\/glenn-brown\/golang-pkg-pcre\/src\/pkg\/pcre\"\n)\n\nfunc main() {\n\tregex := pcre.MustCompile(`(\\d)\\1+`, 0)\n\n\tinput := \"The number is 91-88888888\"\n\n\tresult := regex.ReplaceAll([]byte(input), []byte(\"redacted\"), 0)\n\tfmt.Println(\"result: \", string(result))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">result:  The number is 91-redacted<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we have a regex with a backreference that matches a repetition of a digit. We then redact this repetition of digit using the <strong>ReplaceAll<\/strong> method of the <strong>pcre<\/strong> package<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">result := regex.ReplaceAll([]byte(input), []byte(\"redacted\"), 0)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">And as expected from the output, the repetition of the digit is correctly redacted<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">result:  The number is 91-redacted<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Hope you have liked this tutorial. Please share the feedback in the comments<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgramFirst ExampleSecond ExampleReplace Matched String Overview Golang regex package regexp uses the re2 engine which doesn&#8217;t support backreferences. You can check the same here https:\/\/github.com\/google\/re2\/wiki\/Syntax It does mention that&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[325,3,4,324],"class_list":["post-5778","post","type-post","status-publish","format-standard","hentry","category-tech","tag-backreference","tag-go","tag-golang","tag-regex"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang Regex: Backreferences - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"Golang regex package regexp uses the re2 engine which doesn&#039;t support backreferences. But we have another golang package available named pcre that that supports backreferences. We will explore that in this article\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang Regex: Backreferences - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Golang regex package regexp uses the re2 engine which doesn&#039;t support backreferences. But we have another golang package available named pcre that that supports backreferences. We will explore that in this article\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-05-31T21:18:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-31T21:19:41+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/\",\"url\":\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/\",\"name\":\"Golang Regex: Backreferences - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-05-31T21:18:04+00:00\",\"dateModified\":\"2021-05-31T21:19:41+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"Golang regex package regexp uses the re2 engine which doesn't support backreferences. But we have another golang package available named pcre that that supports backreferences. We will explore that in this article\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang Regex: Backreferences\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang Regex: Backreferences - Welcome To Golang By Example","description":"Golang regex package regexp uses the re2 engine which doesn't support backreferences. But we have another golang package available named pcre that that supports backreferences. We will explore that in this article","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/","og_locale":"en_US","og_type":"article","og_title":"Golang Regex: Backreferences - Welcome To Golang By Example","og_description":"Golang regex package regexp uses the re2 engine which doesn't support backreferences. But we have another golang package available named pcre that that supports backreferences. We will explore that in this article","og_url":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-05-31T21:18:04+00:00","article_modified_time":"2021-05-31T21:19:41+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/","url":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/","name":"Golang Regex: Backreferences - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-05-31T21:18:04+00:00","dateModified":"2021-05-31T21:19:41+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"Golang regex package regexp uses the re2 engine which doesn't support backreferences. But we have another golang package available named pcre that that supports backreferences. We will explore that in this article","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/golang-regex-backreferences\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/golang-regex-backreferences\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang Regex: Backreferences"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1vc","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5778","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5778"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5778\/revisions"}],"predecessor-version":[{"id":5782,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5778\/revisions\/5782"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5778"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5778"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5778"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}