{"id":4082,"date":"2020-09-25T23:15:26","date_gmt":"2020-09-25T17:45:26","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4082"},"modified":"2020-11-25T00:35:11","modified_gmt":"2020-11-24T19:05:11","slug":"constant-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/constant-golang\/","title":{"rendered":"Constant in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 9 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/for-loop-in-golang\/\">For Loop<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013<a href=\"https:\/\/golangbyexamples.com\/function-golang-complete-guide\/\">Functions<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Important_Points\" title=\"Important Points\">Important Points<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Typed_and_Untyped_Constants\" title=\"Typed and Untyped Constants\">Typed and Untyped Constants<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Typed_Constant\" title=\"Typed Constant\">Typed Constant<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Untyped_Constant\" title=\"Untyped Constant\">Untyped Constant<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Naming_Conventions\" title=\"Naming Conventions\">Naming Conventions<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Global_Constant\" title=\"Global Constant\">Global Constant<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Types_of_Constants\" title=\"Types of Constants\">Types of Constants<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#String_Constant\" title=\"String Constant\">String Constant<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Numeric_Constant\" title=\"Numeric Constant\">Numeric Constant<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Boolean_Constant\" title=\"Boolean Constant\">Boolean Constant<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Character_Constant\" title=\"Character Constant\">Character Constant<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A constant is anything that doesn&#8217;t change its value. In Go const can be either of type string, numeric, boolean, and characters.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">A constant can be declared using the <strong>const<\/strong> keyword. A important point to be noted is that the value has to be assigned while declaring a constant. It is unlike variables where value can be assigned later.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declaring a <strong>const<\/strong> along with specifying the type &#8211; It starts with a <strong>const<\/strong> keyword, followed by the name and then the type. Value must also be assigned right away at discussed above<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const c string = \"circle\"<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declaring a const without specifying type &#8211; A const declared without type is an untyped constant. We will learn more about typed and untyped constant later on. For now, its important to know that const declared without type has a default hidden type. The constant will be given a type once it is assigned to a variable in any way (direct initialisation, passing to a function etc).<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const c = \"circle\"<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declaring multiple const together.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const (\n  c = \"circle\"\n  s = \"square\"\n)<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Important_Points\"><\/span><strong>Important Points<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Constant Variable Cannot be reassigned after its declaration. For example below code will raise a compilation error<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nfunc main() {\n    const a int = 8\n    a = 9\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Error:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">main.go:5:4: cannot assign to a<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>const value must be known at compile time. Hence a const value cannot be assigned to a function call which is evaluated at run time. As in below program a is a const and its value should be available at compile time but function <strong>getValue <\/strong>will only be called at run time hence it raises an error during compilation.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nconst name = \"test\"\nfunc main() {\n    const a = getValue()\n}\nfunc getValue() int {\n    return 1\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Error:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const initializer getValue() is not a constant<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A constant declared within an inner having a same name as constant declared in the outer scope will shadow the constant in outer scope.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nconst a = 123\nfunc main() {\n    const a = 456\n    fmt.Println(a)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">456<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Typed_and_Untyped_Constants\"><\/span><strong>Typed and Untyped Constants<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Now coming to very important topic. In go constant are treated in a different way than any other language. GO has a very strong type system that doesn&#8217;t allow implicit conversion between any of the types. Even with the same numeric types no operation is allowed without explicit conversion. For eg you cannot add a <strong>int32<\/strong> and <strong>int64<\/strong> value. To add those either <strong>int32<\/strong> has to be explicitly converted to <strong>int64<\/strong> or vice versa. However untyped constant have the flexibility of temporary escape from the GO&#8217;s type system as we will see in this article<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Typed_Constant\"><\/span><strong>Typed Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">A const declared specifying the type in the declaration is a typed constant. For example below we are declaring a const of type int32<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const a int32 = 8<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This const a can only be assigned to a variable of type int32. If you assign it to a variable of any other type it will raise an error . For the illustration see below program.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nfunc main() {\n    const a int32 = 8\n\n    var i1 int32\n    var i2 int64\n\n    i1 = a\n    i2 = a\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">cannot use a (type int32) as type int64 in assignment<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Untyped_Constant\"><\/span><strong>Untyped Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">An untyped constant is a constant whose type has not been specified. A untyped constant in GO can be either named or unnamed. In both cases it doesn&#8217;t have any type associated with it.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Examples of unnamed untyped constant.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">123        \/\/Default hidden type is int\n\"circle\"   \/\/Default hidden type is string\n5.6.       \/\/Default hidden type is float64\ntrue       \/\/Default hidden type is bool\n'a'        \/\/Default hidden type is rune\n3+5i       \/\/Default hidden type is complex128<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Examples of named untyped constant<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const a = 123        \/\/Default hidden type is int\nconst b = \"circle\"   \/\/Default hidden type is string\nconst c = 5.6       \/\/Default hidden type is float64\nconst d = true       \/\/Default hidden type is bool\nconst e = 'a'        \/\/Default hidden type is rune\nconst f = 3+5i       \/\/Default hidden type is complex128<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped constant&nbsp; does have a default hidden type. For example below table illustrates hidden default types for numerics, strings, characters and boolean<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Default Hidden type for Constants<\/p>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table class=\"has-subtle-pale-green-background-color has-background\"><tbody><tr><td>Integers<\/td><td>int<\/td><\/tr><tr><td>Floats<\/td><td>float64<\/td><\/tr><tr><td>Complex Numbers<\/td><td>complex128<\/td><\/tr><tr><td>Strings<\/td><td>string<\/td><\/tr><tr><td>Booleans<\/td><td>bool<\/td><\/tr><tr><td>Characters<\/td><td>int32 or rune<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">When you print any untyped constant using <strong>fmt.Printf <\/strong>it will print the default hidden type. See below program and output for both unnamed and named&nbsp; untyped constant.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Unanamed untyped constant\n    fmt.Printf(\"Type: %T Value: %v\\n\", 123, 123)\n    fmt.Printf(\"Type: %T Value: %v\\n\", \"circle\", \"circle\")\n    fmt.Printf(\"Type: %T Value: %v\\n\", 5.6, 5.6)\n    fmt.Printf(\"Type: %T Value: %v\\n\", true, true)\n    fmt.Printf(\"Type: %T Value: %v\\n\", 'a', 'a')\n    fmt.Printf(\"Type: %T Value: %v\\n\", 3+5i, 3+5i)\n\n    \/\/Named untyped constant\n    const a = 123      \/\/Default hidden type is int\n    const b = \"circle\" \/\/Default hidden type is string\n    const c = 5.6      \/\/Default hidden type is float64\n    const d = true     \/\/Default hidden type is bool\n    const e = 'a'      \/\/Default hidden type is rune\n    const f = 3 + 5i   \/\/Default hidden type is complex128\n\n    fmt.Println(\"\")\n    fmt.Printf(\"Type: %T Value: %v\\n\", a, a)\n    fmt.Printf(\"Type: %T Value: %v\\n\", b, b)\n    fmt.Printf(\"Type: %T Value: %v\\n\", c, c)\n    fmt.Printf(\"Type: %T Value: %v\\n\", d, d)\n    fmt.Printf(\"Type: %T Value: %v\\n\", e, e)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f, f)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\n\nType: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program prints <strong>int32<\/strong> instead of rune as rune is an alias for <strong>int32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The default type of a named or unnamed constant type will become type of a variable they are assigned to . For example in below code variable <strong>a<\/strong> will get its&nbsp; type from&nbsp; the default type of unnamed constant <strong>123<\/strong> which is <strong>int<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var a = 123<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program illustrating above points for all unnamed type constant<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    \/\/Untyped\n    var u = 123      \/\/Default hidden type is int\n    var v = \"circle\" \/\/Default hidden type is string\n    var w = 5.6      \/\/Default hidden type is float64\n    var x = true     \/\/Default hidden type is bool\n    var y = 'a'      \/\/Default hidden type is rune\n    var z = 3 + 5i   \/\/Default hidden type is complex128\n    fmt.Printf(\"Type: %T Value: %v\\n\", u, u)\n    fmt.Printf(\"Type: %T Value: %v\\n\", v, v)\n    fmt.Printf(\"Type: %T Value: %v\\n\", w, w)\n    fmt.Printf(\"Type: %T Value: %v\\n\", x, x)\n    fmt.Printf(\"Type: %T Value: %v\\n\", y, y)\n    fmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now the question which comes to the mind is what is the use of untyped constant.&nbsp; The use of untyped constant is that the type of the constant will be decided depending upon the type of variable they are being assigned to.&nbsp; Sounds confusing? Let&#8217;s see with an example.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Pi <\/strong>constant value in math package is declared as below.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const Pi = 3.14159265358979323846264338327950288419716939937510582097494459<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that the type is not specified it only has a hidden default type (which is <strong>float64<\/strong> here).&nbsp; Let&#8217;s see a code<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc main() {\n    var f1 float32\n    var f2 float64\n    f1 = math.Pi\n    f2 = math.Pi\n\n    fmt.Printf(\"Type: %T Value: %v\\n\", math.Pi, math.Pi)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f1, f1)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f2, f2)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Type: float64 Value: 3.141592653589793\nType: float32 Value: 3.1415927\nType: float64 Value: 3.141592653589793<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice the above program.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Due to the untyped nature of <strong>math.Pi<\/strong> constant it can be assigned to a variable of type <strong>float32<\/strong> as well as <strong>float64<\/strong>. This is otherwise not possible in GO after type is fixed.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When we print the type of <strong>math.Pi <\/strong>, it prints the default type which is <strong>float64<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Depending upon use case an untyped constant can be assigned to a low precision type (float32) or a high precision type(float64)<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Naming_Conventions\"><\/span><strong>Naming Conventions<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Naming conventions for constant is the same as naming conventions for variables.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A constant name can only start with a letter or an underscore. It can be followed by any number of letters, numbers or underscores after that<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Global_Constant\"><\/span><strong>Global Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Like any other variable, a constant will be global within a package if it is declared at the top of a file outside the scope of any function. For example, in the below program name will be a global constant available throughout the <strong>main<\/strong> package in any function. Do note that the const name will not be available outside the main package. For it to be available outside the main package it has to start with a capital letter. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">See the below code. It also shows the example of a local constant within a package.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nconst name = \"test\"\n\nfunc main() {\n    const a = 8\n    fmt.Println(a)\n    testGlobal()\n}\n\nfunc testGlobal() {\n    fmt.Println(name)\n    \/\/The below line will give compiler error as a is a local constant\n    \/\/fmt.Println(a)<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Types_of_Constants\"><\/span><strong>Types of Constants<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Constant can be of four types:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Numeric<\/li><li>String<\/li><li>Character<\/li><li>Boolean<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"String_Constant\"><\/span><strong>String Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In go string constant is represented in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Any value that is enclosed between double quotes<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Any value enclosed between back quotes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below program shows a example of a<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Typed string constant<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Untyped unnamed string constant<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Untyped named string constant<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\ttype myString string\n\n\t\/\/Typed String constant\n\tconst aa string = \"abc\"\n\tvar uu = aa\n\tfmt.Println(\"Untyped named string constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\nn\", uu, uu)\n\n\t\/\/Below line will raise a compilation error\n\t\/\/var v myString = aa\n\n\t\/\/Untyped named string constant\n\tconst bb = \"abc\"\n\tvar ww myString = bb\n\tvar xx = bb\n\tfmt.Println(\"Untyped named string constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\\n\", xx, xx)\n\n\t\/\/Untyped unnamed string constant\n\tvar yy myString = \"abc\"\n\tvar zz = \"abc\"\n\tfmt.Println(\"Untyped unnamed string constant\")\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\", zz, zz)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Untyped named string constant\nuu: Type: string Value: abc\n\nnUntyped named string constant\nww: Type: main.myString Value: abc\nxx: Type: string Value: abc\n\nUntyped unnamed string constant\nyy: Type: main.myString Value: abc\nzz: Type: string Value: abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a new type <strong>myString<\/strong> in code.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type myString string<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also above program shows the example of<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Typed string constant<\/li><li>Untyped unnamed string constant<\/li><li>Untyped named string constant<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand each of them and their behaviour<\/p>\n\n\n\n<p style=\"font-size:21px\"><strong>Typed string constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const aa string = \"abc\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above that below line will cause a compilation error. This is because of typed string constant <strong>aa<\/strong> is of type <strong>string<\/strong>. So below line will cause compilation error as it cannot be assigned to variable of type <strong>myString<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var v myString = aa<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But typed string constant can be assigned to a variable created with <strong>var<\/strong> keyword like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var uu = aa<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped named string constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const bb = \"abc\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped named string constant can be assigned to variable of type <strong>myString<\/strong> as well variable created with <strong>var<\/strong> keyword because it is untyped so type of the constant will be decided depending upon the type of variable they are being assigned to.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var ww myString = bb\nvar xx = bb<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped unnamed string constant<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped unnamed string constant can be assigned to variable of type <strong>myString<\/strong> as well variable created with <strong>var<\/strong> keyword because it is untyped so type of the constant will be decided depending upon the type of variable they are being assigned to.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var yy myString = \"abc\"\nvar zz = \"abc\"<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Numeric_Constant\"><\/span><strong>Numeric Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Numeric constant are further divided into three types<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Integer<\/li><li>Floats<\/li><li>Complex Numbers<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">A untyped integer constant (both named and unnamed) can be assigned to <strong>int<\/strong> types, <strong>float<\/strong> types and <strong>complex<\/strong> . This is because an int value can be int or float or complex. For eg int value <strong>123<\/strong> can be<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A <strong>int<\/strong> whose value is 123<\/li><li>A <strong>float<\/strong> whose value is 123.0<\/li><li>A <strong>complex<\/strong> whose imaginary part is 0<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">On the basis of similar logic an untyped <strong>float<\/strong> constant can be assigned to all <strong>floats<\/strong> and <strong>complex<\/strong> types but not <strong>integer<\/strong> because for eg a float 5.3 cannot be an integer.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">On the basis of similar logic, an untyped <strong>complex<\/strong> constant can be assigned to&nbsp; <strong>complex<\/strong> types but not <strong>integer <\/strong>and <strong>float<\/strong> because for eg a float 5i+3 cannot be an <strong>integer<\/strong> or a <strong>float<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">See below program illustrating the above point. In the program we have example for<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Typed integer constant<\/li><li>Untyped unnamed integer constant<\/li><li>Untyped named integer constant<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\t\/\/Typed int constant\n\tconst aa int = 123\n\tvar uu = aa\n\tfmt.Println(\"Typed named integer constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\n\", uu, uu)\n\n\t\/\/Below line will raise a compilation error\n\t\/\/var v int32 = aa\n\n\t\/\/Untyped named int constant\n\tconst bb = 123\n\tvar ww = bb\n\tvar xx int32 = bb\n\tvar yy float64 = bb\n\tvar zz complex128 = bb\n\tfmt.Println(\"Untyped named integer constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\", xx, xx)\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\\n\", zz, zz)\n\n\t\/\/Untyped unnamed int constant\n\tvar ll = 123\n\tvar mm int32 = 123\n\tvar nn float64 = 123\n\tvar oo complex128 = 123\n\tfmt.Println(\"Untyped unnamed integer constant\")\n\tfmt.Printf(\"ll: Type: %T Value: %v\\n\", ll, ll)\n\tfmt.Printf(\"mm: Type: %T Value: %v\\n\", mm, mm)\n\tfmt.Printf(\"nn: Type: %T Value: %v\\n\", nn, nn)\n\tfmt.Printf(\"oo: Type: %T Value: %v\\n\", oo, oo)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Typed named integer constant\nuu: Type: int Value: 123\n\nUntyped named integer constant\nww: Type: int Value: 123\nxx: Type: int32 Value: 123\nyy: Type: float64 Value: 123\nzz: Type: complex128 Value: (123+0i)\n\nUntyped unnamed integer constant\nll: Type: int Value: 123\nmm: Type: int32 Value: 123\nnn: Type: float64 Value: 123\noo: Type: complex128 Value: (123+0i)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now above program shows example of a<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Typed integer constant<\/li><li>Untyped unnamed integer constant<\/li><li>Untyped named integer constant<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand each of them and their behavior<\/p>\n\n\n\n<p style=\"font-size:21px\"><strong>Typed integer constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const aa int = 123<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Typed integer constant can be assigned to a variable created with <strong>var<\/strong> keyword like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var uu = aa<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It will raise compilation error when assigned to another <strong>int<\/strong> type. So below raises compilation error as <strong>aa<\/strong> variable is already of type <strong>int<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var v int32 = aa<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped named integer constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const bb = 123<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped named integer constant can be assigned to any <strong>int<\/strong> type, any <strong>float<\/strong> type and any <strong>complex<\/strong> number type and also to any variable created with <strong>var<\/strong> keyword. So below works<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var ww = bb\nvar xx int32 = bb\nvar yy float64 = bb\nvar zz complex128 = bb<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped unnamed integer constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">123<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped named integer constant can be assigned to any <strong>int<\/strong> type, any <strong>float<\/strong> type and any <strong>complex<\/strong> number type and also to any variable created with <strong>var<\/strong> keyword. So below works<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var ww = 123\nvar xx int32 = 123\nvar yy float64 = 123\nvar zz complex128 = 123<\/code><\/pre>\n\n\n\n<p style=\"font-size:24px\"><strong>Numeric Expressions<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Due to untyped nature of constant numeric constants, different numeric constant type can be mixed and matched up to form a expression<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    var p = 5.2 \/ 3\n    fmt.Printf(\"p: Type: %T Value: %v\\n\", p, p)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">p: Type: float64 Value: 1.7333333333333334<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Boolean_Constant\"><\/span><strong>Boolean Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">There are two untyped boolean constant <strong>true<\/strong> and <strong>false<\/strong>.&nbsp; Below is the program illustrating a boolean constant.&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\ttype myBool bool\n\n\t\/\/Typed Boolean constant\n\tconst aa bool = true\n\tvar uu = aa\n\tfmt.Println(\"Typed named boolean constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\n\", uu, uu)\n\n\t\/\/Below line will raise a compilation error\n\t\/\/var vv myBool = aa\n\n\t\/\/Untyped named boolean constant\n\tconst bb = true\n\n\tvar ww myBool = bb\n\tvar xx = bb\n\tfmt.Println(\"Untyped named boolean constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\\n\", xx, xx)\n\n\t\/\/Untyped unnamed boolean constant\n\tvar yy myBool = true\n\tvar zz = true\n\tfmt.Println(\"Untyped unnamed boolean constant\")\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\", zz, zz)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Typed named boolean constant\nuu: Type: bool Value: true\n\nUntyped named boolean constant\nww: Type: main.myBool Value: true\nxx: Type: bool Value: true\n\nUntyped unnamed boolean constant\nyy: Type: main.myBool Value: true\nzz: Type: bool Value: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a new type <strong>myBool<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type myBool bool<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also above program shows the example of<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Typed boolean constant<\/li><li>Untyped unnamed boolean constant<\/li><li>Untyped named boolean constant<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand each of them and their behaviour<\/p>\n\n\n\n<p style=\"font-size:21px\"><strong>Typed boolean constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const aa bool = true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above that below line will cause a compilation error. This is because variable <strong>aa<\/strong> is of typed <strong>boolean<\/strong> constant . So below line will cause compilation error as it cannot be assigned to variable of type <strong>myBool<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var v mybool = aa<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But typed string constant can be assigned to a variable created with <strong>var<\/strong> keyword like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var uu = aa<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped named boolean constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const bb = true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped named string constant can be assigned to variable of type <strong>myBool<\/strong> as well variable created with <strong>var<\/strong> keyword because it is untyped so type of the constant will be decided depending upon the type of variable they are being assigned to.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var ww mybool = bb\nvar xx = bb<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped unnamed boolean constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped unnamed string constant can be assigned to variable of type <strong>myBool<\/strong> as well variable created with <strong>var<\/strong> keyword because it is untyped so type of the constant will be decided depending upon the type of variable they are being assigned to.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var yy mybool = true\nvar zz = true<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Character_Constant\"><\/span><strong>Character Constant<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the program illustrating a character constant.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\ttype myChar int32\n\n\t\/\/Typed character constant\n\tconst aa int32 = 'a'\n\tvar uu = aa\n\tfmt.Println(\"Untyped unnamed character constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\n\", uu, uu)\n\n\t\/\/Below line will raise a compilation error\n\t\/\/var vv myBool = aa\n\n\t\/\/Untyped named character constant\n\tconst bb = 'a'\n\n\tvar ww myChar = bb\n\tvar xx = bb\n\tfmt.Println(\"Untyped named character constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\\n\", xx, xx)\n\n\t\/\/Untyped unnamed character constant\n\tvar yy myChar = 'a'\n\tvar zz = 'a'\n\tfmt.Println(\"Untyped unnamed character constant\")\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\", zz, zz)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Untyped unnamed character constant\nuu: Type: int32 Value: 97\n\nUntyped named character constant\nww: Type: main.myChar Value: 97\nxx: Type: int32 Value: 97\n\nUntyped unnamed character constant\nyy: Type: main.myChar Value: 97\nzz: Type: int32 Value: 97<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a new type <strong>myChar<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type myChar int32<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also above program shows the example of<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Typed character constant<\/li><li>Untyped unnamed character constant<\/li><li>Untyped named character constant<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand each of them and their behaviour<\/p>\n\n\n\n<p style=\"font-size:21px\"><strong>Typed character constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const aa int32 = 'a'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in above that below line will cause a compilation error. This is because variable <strong>aa<\/strong> is of type <strong>int32<\/strong>. So below line will cause compilation error as it cannot be assigned to variable of type <strong>myChar<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var v myChar = aa<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But typed string constant can be assigned to a variable created with <strong>var<\/strong> keyword like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var uu = aa<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped named character constant<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is defined as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">const bb = 'a'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped named string constant&nbsp; can be assigned to variable of type <strong>myChar<\/strong> as well variable created with <strong>var<\/strong> keyword because it is untyped so type of the constant will be decided depending upon the type of variable they are being assigned to.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var ww myChar = bb\nvar xx = bb<\/code><\/pre>\n\n\n\n<p style=\"font-size:21px\"><strong>Untyped unnamed character constant<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">'a'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Untyped unnamed string constant can be assigned to variable of type <strong>myChar<\/strong> as well variable created with <strong>var<\/strong> keyword because it is untyped so type of the constant will be decided depending upon the type of variable they are being assigned to.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var yy myChar = 'a'\nvar zz = 'a'<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about const keyword in Golang. Hope you have liked this article. Do share feedback in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/for-loop-in-golang\/\">For Loop<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013<a href=\"https:\/\/golangbyexamples.com\/function-golang-complete-guide\/\">Functions<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 9 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0For LoopPrevious Tutorial\u00a0\u2013Functions Now let\u2019s check&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4082","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Constant in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/constant-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Constant in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 9 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0For LoopPrevious Tutorial\u00a0\u2013Functions Now let\u2019s check...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/constant-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-25T17:45:26+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-24T19:05:11+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"17 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/constant-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/constant-golang\/\",\"name\":\"Constant in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-25T17:45:26+00:00\",\"dateModified\":\"2020-11-24T19:05:11+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/constant-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/constant-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/constant-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Constant in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Constant in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/constant-golang\/","og_locale":"en_US","og_type":"article","og_title":"Constant in Go (Golang) - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 9 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0For LoopPrevious Tutorial\u00a0\u2013Functions Now let\u2019s check...","og_url":"https:\/\/golangbyexamples.com\/constant-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-25T17:45:26+00:00","article_modified_time":"2020-11-24T19:05:11+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"17 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/constant-golang\/","url":"https:\/\/golangbyexamples.com\/constant-golang\/","name":"Constant in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-25T17:45:26+00:00","dateModified":"2020-11-24T19:05:11+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/constant-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/constant-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/constant-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Constant in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-13Q","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4082","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4082"}],"version-history":[{"count":14,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4082\/revisions"}],"predecessor-version":[{"id":4543,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4082\/revisions\/4543"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4082"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4082"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4082"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}