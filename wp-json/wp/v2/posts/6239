{"id":6239,"date":"2021-08-23T00:00:03","date_gmt":"2021-08-22T18:30:03","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6239"},"modified":"2021-08-23T00:03:16","modified_gmt":"2021-08-22T18:33:16","slug":"infix-to-postfix-conversion-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/","title":{"rendered":"Infix to Postfix Conversion in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#Infix_to_Postfix_Conversion\" title=\"Infix to Postfix Conversion\u00a0\">Infix to Postfix Conversion\u00a0<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#Algorithm\" title=\"Algorithm:\">Algorithm:<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#Implementation\" title=\"Implementation:\">Implementation:<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Infix_to_Postfix_Conversion\"><\/span><strong>Infix to Postfix Conversion\u00a0<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">In this tutorial, we will see what are the Infix and Postfix expression notations, the advantages of Postfix notation over Infix, and how we can convert an Infix expression to a Postfix expression. We will cover the evaluation of a Postfix expression in another tutorial.\u00a0\u00a0<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Infix Expression: In infix expression, the operator is in between pair of operands like (a op b).\nexample: a+b, 2\/2 .\nPostfix Expression: In postfix expression, the operator is placed post to both operands like (a b op).\nexample: ab+, 22\/ . <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">These are some advantages of postfix expression over infix:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Postfix expression evaluation is easier than Infix expression evaluation.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Parenthesis is not required in postfix expression.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Postfix expression evaluation requires single scanning.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Faster evaluation than Infix notation.<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Algorithm\"><\/span><strong>Algorithm:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Scan infix expression from left to right.\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the current scanned character is an operand, output it.\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Else,\u00a0If the precedence of the current scanned operator is greater than the precedence of the operator in the stack (or the stack is empty or the stack contains a \u2018(\u2018 ), push it.\u00a0\u00a0Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack. (If you encounter parenthesis while popping then stop there and push the scanned operator in the stack.)\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the scanned character is an \u2018(\u2018, push it to the stack.\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If the scanned character is an \u2018)\u2019, pop the stack and output it until a \u2018(\u2018 is encountered, and discard both the parenthesis.\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Repeat steps 2-6 until infix expression is scanned.\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print the output\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Pop and output from the stack until it is not empty.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below are the examples of the above algorithm:<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Infix expression is a+b then postfix expression is ab+ :<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>a is operand (output it) \/\/output=a<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>+ is operator (push is in the stack)<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>b is operand (output it) \/\/output=ab<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>infix expression is scanned completely, now pop from the stack and add in output, hence postfix becomes ab+<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Similarly<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Infix expression is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a+b*c+d<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">then postfix expression is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc*+d+:<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>a is operand (output it) \/\/output=a<\/li><li>+ is operator (push it in stack) \/\/stack=+<\/li><li>b is operand (output it) \/\/ab<\/li><li>* is operator and having high precedence than +, (push it in stack) \/\/stack=+*<\/li><li>c is operand (output it) \/\/output=abc<\/li><li>+ is operator but it lower than operators in stack. pop all from stack and push + \/\/output=abc*+, stack=+<\/li><li>d is operand (output it) \/\/output=abc*+d<\/li><li>pop from stack and add in output \/\/output=abc*+d+<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Implementation\"><\/span><strong>Implementation:<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the implementation of Infix to Postfix Conversion in golang:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package\u00a0main\n\nimport\u00a0\"fmt\"\n\ntype\u00a0Stack\u00a0[]string\n\n\/\/IsEmpty:\u00a0check\u00a0if\u00a0stack\u00a0is\u00a0empty\nfunc\u00a0(st\u00a0*Stack)\u00a0IsEmpty()\u00a0bool\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0len(*st)\u00a0==\u00a00\n}\n\n\/\/Push\u00a0a\u00a0new\u00a0value\u00a0onto\u00a0the\u00a0stack\nfunc\u00a0(st\u00a0*Stack)\u00a0Push(str\u00a0string)\u00a0{\n\u00a0\u00a0\u00a0\u00a0*st\u00a0=\u00a0append(*st,\u00a0str)\u00a0\/\/Simply\u00a0append\u00a0the\u00a0new\u00a0value\u00a0to\u00a0the\u00a0end\u00a0of\u00a0the\u00a0stack\n}\n\n\/\/Remove\u00a0top\u00a0element\u00a0of\u00a0stack.\u00a0Return\u00a0false\u00a0if\u00a0stack\u00a0is\u00a0empty.\nfunc\u00a0(st\u00a0*Stack)\u00a0Pop()\u00a0bool\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0st.IsEmpty()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index\u00a0:=\u00a0len(*st)\u00a0-\u00a01\u00a0\/\/\u00a0Get\u00a0the\u00a0index\u00a0of\u00a0top\u00a0most\u00a0element.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*st\u00a0=\u00a0(*st)[:index]\u00a0\u00a0\u00a0\/\/\u00a0Remove\u00a0it\u00a0from\u00a0the\u00a0stack\u00a0by\u00a0slicing\u00a0it\u00a0off.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0true\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/Return\u00a0top\u00a0element\u00a0of\u00a0stack.\u00a0Return\u00a0false\u00a0if\u00a0stack\u00a0is\u00a0empty.\nfunc\u00a0(st\u00a0*Stack)\u00a0Top()\u00a0string\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0st.IsEmpty()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"\"\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index\u00a0:=\u00a0len(*st)\u00a0-\u00a01\u00a0\u00a0\u00a0\/\/\u00a0Get\u00a0the\u00a0index\u00a0of\u00a0top\u00a0most\u00a0element.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0element\u00a0:=\u00a0(*st)[index]\u00a0\/\/\u00a0Index\u00a0onto\u00a0the\u00a0slice\u00a0and\u00a0obtain\u00a0the\u00a0element.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0element\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/Function\u00a0to\u00a0return\u00a0precedence\u00a0of\u00a0operators\nfunc\u00a0prec(s\u00a0string)\u00a0int\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0s\u00a0==\u00a0\"^\"\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a03\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0if\u00a0(s\u00a0==\u00a0\"\/\")\u00a0||\u00a0(s\u00a0==\u00a0\"*\")\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a02\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0if\u00a0(s\u00a0==\u00a0\"+\")\u00a0||\u00a0(s\u00a0==\u00a0\"-\")\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nfunc\u00a0infixToPostfix(infix\u00a0string)\u00a0string\u00a0{\n\u00a0\u00a0\u00a0\u00a0var\u00a0sta\u00a0Stack\n\u00a0\u00a0\u00a0\u00a0var\u00a0postfix\u00a0string\n\u00a0\u00a0\u00a0\u00a0for\u00a0_,\u00a0char\u00a0:=\u00a0range\u00a0infix\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opchar\u00a0:=\u00a0string(char)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0if\u00a0scanned\u00a0character\u00a0is\u00a0operand,\u00a0add\u00a0it\u00a0to\u00a0output\u00a0string\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(char\u00a0>=\u00a0'a'\u00a0&&\u00a0char\u00a0<=\u00a0'z')\u00a0||\u00a0(char\u00a0>=\u00a0'A'\u00a0&&\u00a0char\u00a0<=\u00a0'Z')\u00a0||\u00a0(char\u00a0>=\u00a0'0'\u00a0&&\u00a0char\u00a0<=\u00a0'9')\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0postfix\u00a0=\u00a0postfix\u00a0+\u00a0opchar\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0if\u00a0char\u00a0==\u00a0'('\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta.Push(opchar)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0if\u00a0char\u00a0==\u00a0')'\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0sta.Top()\u00a0!=\u00a0\"(\"\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0postfix\u00a0=\u00a0postfix\u00a0+\u00a0sta.Top()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta.Pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta.Pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0!sta.IsEmpty()\u00a0&#038;&#038;\u00a0prec(opchar)\u00a0<=\u00a0prec(sta.Top())\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0postfix\u00a0=\u00a0postfix\u00a0+\u00a0sta.Top()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta.Pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta.Push(opchar)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Pop\u00a0all\u00a0the\u00a0remaining\u00a0elements\u00a0from\u00a0the\u00a0stack\n\u00a0\u00a0\u00a0\u00a0for\u00a0!sta.IsEmpty()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0postfix\u00a0=\u00a0postfix\u00a0+\u00a0sta.Top()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta.Pop()\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0postfix\n}\nfunc\u00a0main()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/infix\u00a0:=\u00a0\"a+b\"\n\u00a0\u00a0\u00a0\u00a0\/\/infix\u00a0:=\u00a0\"a+b*c+d\"\n\u00a0\u00a0\u00a0\u00a0\/\/infix\u00a0:=\u00a0\"a+b*(c^d-e)^(f+g*h)-i\"\u00a0\/\/\u00a0abcd^e-fgh*+^*+i-\n\u00a0\u00a0\u00a0\u00a0\/\/infix\u00a0:=\u00a0\"1+2+3*4+5\/5-2\"\n\u00a0\u00a0\u00a0\u00a0infix\u00a0:=\u00a0\"2+3*(2^3-5)^(2+1*2)-4\"\u00a0\/\/abcd^e-fgh*+^*+i-\n\u00a0\u00a0\u00a0\u00a0postfix\u00a0:=\u00a0infixToPostfix(infix)\n\u00a0\u00a0\u00a0\u00a0fmt.Printf(\"%s\u00a0infix\u00a0has\u00a0%s\u00a0postfix\u00a0\",\u00a0infix,\u00a0postfix)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">2+3*(2^3-5)^(2+1*2)-4 infix has 2323^5-212*+^*+4- postfix<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We can check the status of the stack after every push and pop operation by uncommenting <strong>fmt.Println<\/strong> line in Push and Pop function declaration.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Note: <\/strong>Check out our Golang Advanced Tutorial. The tutorials in this series are elaborative and we have tried to cover all concepts with examples. This tutorial is for those who are looking to gain expertise and a solid understanding of golang - <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also if you are interested in understanding how all design patterns can be implemented in Golang. If yes, then this post is for you -<a href=\"https:\/\/golangbyexamples.com\/all-design-patterns-golang\/\">All Design Patterns Golang<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents Infix to Postfix Conversion\u00a0Algorithm:Implementation: Infix to Postfix Conversion\u00a0 In this tutorial, we will see what are the Infix and Postfix expression notations, the advantages of Postfix notation over Infix,&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-6239","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Infix to Postfix Conversion in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Infix to Postfix Conversion in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents Infix to Postfix Conversion\u00a0Algorithm:Implementation: Infix to Postfix Conversion\u00a0 In this tutorial, we will see what are the Infix and Postfix expression notations, the advantages of Postfix notation over Infix,...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-08-22T18:30:03+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-08-22T18:33:16+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/\",\"name\":\"Infix to Postfix Conversion in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-08-22T18:30:03+00:00\",\"dateModified\":\"2021-08-22T18:33:16+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Infix to Postfix Conversion in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Infix to Postfix Conversion in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/","og_locale":"en_US","og_type":"article","og_title":"Infix to Postfix Conversion in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents Infix to Postfix Conversion\u00a0Algorithm:Implementation: Infix to Postfix Conversion\u00a0 In this tutorial, we will see what are the Infix and Postfix expression notations, the advantages of Postfix notation over Infix,...","og_url":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-08-22T18:30:03+00:00","article_modified_time":"2021-08-22T18:33:16+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/","url":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/","name":"Infix to Postfix Conversion in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-08-22T18:30:03+00:00","dateModified":"2021-08-22T18:33:16+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/infix-to-postfix-conversion-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Infix to Postfix Conversion in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1CD","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6239","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6239"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6239\/revisions"}],"predecessor-version":[{"id":6247,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6239\/revisions\/6247"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6239"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6239"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6239"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}