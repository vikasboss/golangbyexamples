{"id":6407,"date":"2021-11-04T11:29:16","date_gmt":"2021-11-04T05:59:16","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=6407"},"modified":"2021-11-04T11:29:28","modified_gmt":"2021-11-04T05:59:28","slug":"lru-cache-implementation-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/","title":{"rendered":"LRU Cache Implementation in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#Overview\" title=\"Overview\">Overview<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#Implementation_Details\" title=\"Implementation Details\">Implementation Details<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#Setkey_int_value_int\" title=\"Set(key int, value int)\">Set(key int, value int)<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#Getkey_int\" title=\"Get(key int) \">Get(key int) <\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#Program\" title=\"Program\">Program<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The objective is to implement a cache that will<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It should support <strong>Set<\/strong> and <strong>Get<\/strong> Operation<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>O(1) Time Complexity for both <strong>Set<\/strong> and <strong>Get<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Assume the maximum capacity of the cache is 3. Once the cache is full and there is one more key to be inserted then one of the existing entries needs to be deleted from the cache<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Deletion should be based on eviction algorithm &#8211; <strong>LRU<\/strong><\/li><\/ul>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\" style=\"font-size:24px\"><span class=\"ez-toc-section\" id=\"Implementation_Details\"><\/span><strong>Implementation Details<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We will use a <strong>Map<\/strong> and a <strong>Doubly-linked List<\/strong> for storing everything. Both map and doubly-linked list are used so that <strong>get<\/strong> and <strong>set<\/strong> operations are of\u00a0 O(1) even with evictions<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The <strong>Map<\/strong> will have the key of type string and the value of the type pointer to a node in the <strong>Doubly-linked List<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each node of the <strong>Doubly Linked List<\/strong> will contain the key as well as value. Each node will also have a pointer to the previous node in the double linked list and a pointer to the next node in the <strong>doubly linked list<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see how Get and Set are going to work in O(1) time<\/p>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\" style=\"font-size:24px\"><span class=\"ez-toc-section\" id=\"Setkey_int_value_int\"><\/span><strong>Set(key int, value int)<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">For any set operation, it will first create a doubly-linked list node with key and value supplied. Then an entry will be made into the map with key as the input key and value as the address of the node. Once the node is created, then there are two cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The cache is not full &#8211;\u00a0 In this case, it will pass the control to the current Eviction Algorithm which is LRU. The LRU algorithm is going to do insert that node in a double-linked list at the end. The idea is that the front node in the doubly linked list is the least recently used node. Every operation is O(1) here<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The cache is full &#8211; In this case, it will pass the control to the current eviction Algorithm which is LRU. It will evict the least recently used node which is the front node. Once that node is evicted it will insert the new node at the end. Every operation is O(1) here<\/li><\/ul>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\" style=\"font-size:24px\"><span class=\"ez-toc-section\" id=\"Getkey_int\"><\/span><strong>Get(key int) <\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">For any Get operation, it will first check the map if the given key exists. If it exists then it will fetch the address of the node pointed to by key in the map. It will then fetch the value from the node. Then it will pass the control to the current Eviction Algorithm which is LRU. The LRU algorithm is going to move the current node in the doubly-linked list at the end. Again the idea is that the front node in the doubly linked list is the least recently used node and to maintain that current node is moved to the end. Every operation is O(1) here.<\/p>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Here is the full working code in go programming language if anyone is interested.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>doublylinklist.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype node struct {\n\tkey   string\n\tvalue string\n\tprev  *node\n\tnext  *node\n}\n\ntype doublyLinkedList struct {\n\tlen  int\n\ttail *node\n\thead *node\n}\n\nfunc initDoublyList() *doublyLinkedList {\n\treturn &doublyLinkedList{}\n}\n\nfunc (d *doublyLinkedList) AddToFront(key, value string) {\n\tnewNode := &node{\n\t\tkey:   key,\n\t\tvalue: value,\n\t}\n\tif d.head == nil {\n\t\td.head = newNode\n\t\td.tail = newNode\n\t} else {\n\t\tnewNode.next = d.head\n\t\td.head.prev = newNode\n\t\td.head = newNode\n\t}\n\td.len++\n\treturn\n}\n\nfunc (d *doublyLinkedList) RemoveFromFront() {\n\tif d.head == nil {\n\t\treturn\n\t} else if d.head == d.tail {\n\t\td.head = nil\n\t\td.tail = nil\n\t} else {\n\t\td.head = d.head.next\n\t}\n\td.len--\n}\n\nfunc (d *doublyLinkedList) AddToEnd(node *node) {\n\tnewNode := node\n\tif d.head == nil {\n\t\td.head = newNode\n\t\td.tail = newNode\n\t} else {\n\t\tcurrentNode := d.head\n\t\tfor currentNode.next != nil {\n\t\t\tcurrentNode = currentNode.next\n\t\t}\n\t\tnewNode.prev = currentNode\n\t\tcurrentNode.next = newNode\n\t\td.tail = newNode\n\t}\n\td.len++\n}\nfunc (d *doublyLinkedList) Front() *node {\n\treturn d.head\n}\n\nfunc (d *doublyLinkedList) MoveNodeToEnd(node *node) {\n\tprev := node.prev\n\tnext := node.next\n\n\tif prev != nil {\n\t\tprev.next = next\n\t}\n\n\tif next != nil {\n\t\tnext.prev = prev\n\t}\n\tif d.tail == node {\n\t\td.tail = prev\n\t}\n\tif d.head == node {\n\t\td.head = next\n\t}\n\tnode.next = nil\n\tnode.prev = nil\n\td.len--\n\td.AddToEnd(node)\n}\n\nfunc (d *doublyLinkedList) TraverseForward() error {\n\tif d.head == nil {\n\t\treturn fmt.Errorf(\"TraverseError: List is empty\")\n\t}\n\ttemp := d.head\n\tfor temp != nil {\n\t\tfmt.Printf(\"key = %v, value = %v, prev = %v, next = %v\\n\", temp.key, temp.value, temp.prev, temp.next)\n\t\ttemp = temp.next\n\t}\n\tfmt.Println()\n\treturn nil\n}\n\nfunc (d *doublyLinkedList) Size() int {\n\treturn d.len\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>evictionAlgorithm.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\ntype evictionAlgo interface {\n\tevict(c *Cache) string\n\tget(node *node, c *Cache)\n\tset(node *node, c *Cache)\n\tset_overwrite(node *node, value string, c *Cache)\n}\n\nfunc createEvictioAlgo(algoType string) evictionAlgo {\n\tif algoType == \"fifo\" {\n\t\treturn &fifo{}\n\t} else if algoType == \"lru\" {\n\t\treturn &lru{}\n\t}\n\n\treturn nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>lru.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype lru struct {\n}\n\nfunc (l *lru) evict(c *Cache) string {\n\tkey := c.doublyLinkedList.Front().key\n\tfmt.Printf(\"Evicting by lru strtegy. Evicted Node Key: %s: \", key)\n\tc.doublyLinkedList.RemoveFromFront()\n\treturn key\n}\n\nfunc (l *lru) get(node *node, c *Cache) {\n\tfmt.Println(\"Shuffling doubly linked list due to get operation\")\n\tc.doublyLinkedList.MoveNodeToEnd(node)\n}\n\nfunc (l *lru) set(node *node, c *Cache) {\n\tfmt.Println(\"Shuffling doubly linked list due to set operation\")\n\tc.doublyLinkedList.AddToEnd(node)\n}\n\nfunc (l *lru) set_overwrite(node *node, value string, c *Cache) {\n\tfmt.Println(\"Shuffling doubly linked list due to set_overwrite operation\")\n\tnode.value = value\n\tc.doublyLinkedList.MoveNodeToEnd(node)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>fifo.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype fifo struct {\n}\n\nfunc (l *fifo) evict(c *Cache) string {\n\tfmt.Println(\"Evicting by fifo strtegy\")\n\tkey := c.doublyLinkedList.Front().key\n\tc.doublyLinkedList.RemoveFromFront()\n\treturn key\n}\n\nfunc (l *fifo) get(node *node, c *Cache) {\n\tfmt.Println(\"Shuffling doubly linked list due to get operation\")\n}\n\nfunc (l *fifo) set(node *node, c *Cache) {\n\tfmt.Println(\"Shuffling doubly linked list due to set operation\")\n\tc.doublyLinkedList.AddToEnd(node)\n}\n\nfunc (l *fifo) set_overwrite(node *node, value string, c *Cache) {\n\tfmt.Println(\"Shuffling doubly linked list due to set_overwrite operation\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>cache.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype Cache struct {\n\tdoublyLinkedList *doublyLinkedList\n\tstorage          map[string]*node\n\tevictionAlgo     evictionAlgo\n\tcapacity         int\n\tmaxCapacity      int\n}\n\nfunc initCache(evictionAlgo evictionAlgo, maxCapacity int) Cache {\n\tstorage := make(map[string]*node)\n\treturn Cache{\n\t\tdoublyLinkedList: &doublyLinkedList{},\n\t\tstorage:          storage,\n\t\tevictionAlgo:     evictionAlgo,\n\t\tcapacity:         0,\n\t\tmaxCapacity:      maxCapacity,\n\t}\n}\n\nfunc (this *Cache) setEvictionAlgo(e evictionAlgo) {\n\tthis.evictionAlgo = e\n}\n\nfunc (this *Cache) set(key, value string) {\n\tnode_ptr, ok := this.storage[key]\n\tif ok {\n\t\tthis.evictionAlgo.set_overwrite(node_ptr, value, this)\n\t\treturn\n\t}\n\tif this.capacity == this.maxCapacity {\n\t\tevictedKey := this.evict()\n\t\tdelete(this.storage, evictedKey)\n\t}\n\tnode := &node{key: key, value: value}\n\tthis.storage[key] = node\n\tthis.evictionAlgo.set(node, this)\n\tthis.capacity++\n}\n\nfunc (this *Cache) get(key string) string {\n\tnode_ptr, ok := this.storage[key]\n\tif ok {\n\t\tthis.evictionAlgo.get(node_ptr, this)\n\t\treturn (*node_ptr).value\n\t}\n\treturn \"\"\n}\n\nfunc (this *Cache) evict() string {\n\tkey := this.evictionAlgo.evict(this)\n\tthis.capacity--\n\treturn key\n}\n\nfunc (this *Cache) print() {\n\tfor k, v := range this.storage {\n\t\tfmt.Printf(\"key :%s value: %s\\n\", k, (*v).value)\n\t}\n\tthis.doublyLinkedList.TraverseForward()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main.go<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\tlru := createEvictioAlgo(\"lru\")\n\tcache := initCache(lru, 3)\n\tcache.set(\"a\", \"1\")\n\tcache.print()\n\n\tcache.set(\"b\", \"2\")\n\tcache.print()\n\n\tcache.set(\"c\", \"3\")\n\tcache.print()\n\n\tvalue := cache.get(\"a\")\n\tfmt.Printf(\"key: a, value: %s\\n\", value)\n\tcache.print()\n\n\tcache.set(\"d\", \"4\")\n\tcache.print()\n\n\tcache.set(\"e\", \"5\")\n\tcache.print()\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Shuffling doubly linked list due to set operation\nkey :a value: 1\nkey = a, value = 1, prev = <nil>, next = <nil>\n\nShuffling doubly linked list due to set operation\nkey :a value: 1\nkey :b value: 2\nkey = a, value = 1, prev = <nil>, next = &{b 2 0xc00007e1e0 <nil>}\nkey = b, value = 2, prev = &{a 1 <nil> 0xc00007e210}, next = <nil>\n\nShuffling doubly linked list due to set operation\nkey :a value: 1\nkey :b value: 2\nkey :c value: 3\nkey = a, value = 1, prev = <nil>, next = &{b 2 0xc00007e1e0 0xc00007e2a0}\nkey = b, value = 2, prev = &{a 1 <nil> 0xc00007e210}, next = &{c 3 0xc00007e210 <nil>}\nkey = c, value = 3, prev = &{b 2 0xc00007e1e0 0xc00007e2a0}, next = <nil>\n\nShuffling doubly linked list due to get operation\nkey: a, value: 1\nkey :a value: 1\nkey :b value: 2\nkey :c value: 3\nkey = b, value = 2, prev = <nil>, next = &{c 3 0xc00007e210 0xc00007e1e0}\nkey = c, value = 3, prev = &{b 2 <nil> 0xc00007e2a0}, next = &{a 1 0xc00007e2a0 <nil>}\nkey = a, value = 1, prev = &{c 3 0xc00007e210 0xc00007e1e0}, next = <nil>\n\nEvicting by lru strtegy. Evicted Node Key: %s:  b\nShuffling doubly linked list due to set operation\nkey :d value: 4\nkey :c value: 3\nkey :a value: 1\nkey = c, value = 3, prev = &{b 2 <nil> 0xc00007e2a0}, next = &{a 1 0xc00007e2a0 0xc00007e450}\nkey = a, value = 1, prev = &{c 3 0xc00007e210 0xc00007e1e0}, next = &{d 4 0xc00007e1e0 <nil>}\nkey = d, value = 4, prev = &{a 1 0xc00007e2a0 0xc00007e450}, next = <nil>\n\nEvicting by lru strtegy. Evicted Node Key: %s:  c\nShuffling doubly linked list due to set operation\nkey :a value: 1\nkey :d value: 4\nkey :e value: 5\nkey = a, value = 1, prev = &{c 3 0xc00007e210 0xc00007e1e0}, next = &{d 4 0xc00007e1e0 0xc00007e570}\nkey = d, value = 4, prev = &{a 1 0xc00007e2a0 0xc00007e450}, next = &{e 5 0xc00007e450 <nil>}\nkey = e, value = 5, prev = &{d 4 0xc00007e1e0 0xc00007e570}, next = <nil><\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color has-large-font-size wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">This is all about LRU cache implementation in Golang. Hope you have liked this article. Please share feedback in the comments<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewImplementation DetailsSet(key int, value int)Get(key int) ProgramConclusion Overview The objective is to implement a cache that will It should support Set and Get Operation O(1) Time Complexity for both&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[336],"class_list":["post-6407","post","type-post","status-publish","format-standard","hentry","category-tech","tag-lru"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>LRU Cache Implementation in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"LRU Cache Implementation in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewImplementation DetailsSet(key int, value int)Get(key int) ProgramConclusion Overview The objective is to implement a cache that will It should support Set and Get Operation O(1) Time Complexity for both...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-11-04T05:59:16+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-11-04T05:59:28+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/\",\"name\":\"LRU Cache Implementation in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-11-04T05:59:16+00:00\",\"dateModified\":\"2021-11-04T05:59:28+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"LRU Cache Implementation in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"LRU Cache Implementation in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/","og_locale":"en_US","og_type":"article","og_title":"LRU Cache Implementation in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewImplementation DetailsSet(key int, value int)Get(key int) ProgramConclusion Overview The objective is to implement a cache that will It should support Set and Get Operation O(1) Time Complexity for both...","og_url":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-11-04T05:59:16+00:00","article_modified_time":"2021-11-04T05:59:28+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/","url":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/","name":"LRU Cache Implementation in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-11-04T05:59:16+00:00","dateModified":"2021-11-04T05:59:28+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/lru-cache-implementation-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"LRU Cache Implementation in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1Fl","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6407","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=6407"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6407\/revisions"}],"predecessor-version":[{"id":6410,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/6407\/revisions\/6410"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=6407"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=6407"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=6407"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}