{"id":1067,"date":"2020-01-01T18:01:33","date_gmt":"2020-01-01T18:01:33","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=1067"},"modified":"2020-01-01T18:03:18","modified_gmt":"2020-01-01T18:03:18","slug":"trie-implementation-in-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/","title":{"rendered":"Trie Implementation in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#Full_Working_Code\" title=\"Full Working Code\">Full Working Code<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A trie is a data structure for efficient information retrieval. It is a special kind of tree where a path starting from root to a particular node can define a word that is stored in this tree. A trie can be built for entire ASCII_SIZE, ALPHABETS,\u00a0 NUMBERS depending upon the use case. For, eg below will be the properties of a Trie data structure supporting small case alphabet letters<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each node has ALBHABET_SIZE=26 children. Each child node is a trie node itself and has ALBHABET_SIZE=26 children.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each node is at an index in its parent&#8217; children node array and represents an ASCII character. For eg for a particular node, the first non-nil children node will mean the presence of char &#8216;a&#8217;,\u00a0 second non-nil children node means the presence of &#8216;b&#8217; and so on. Absence of a child at an index means no value<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Each node also has a boolean field indicating whether the node is the end of word or not<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The root node is the starting node and has ALBHABET_SIZE=26 children. root is associated with an empty value<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">For eg for keywords [&#8220;sam&#8221;, &#8220;john&#8221;, &#8220;tim&#8221;, &#8220;jose&#8221;] below trie will be created<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"261\" height=\"321\" src=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg?resize=261%2C321&#038;ssl=1\" alt=\"\" class=\"wp-image-1070\" srcset=\"https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg?w=261&amp;ssl=1 261w, https:\/\/i1.wp.com\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg?resize=244%2C300&amp;ssl=1 244w\" sizes=\"auto, (max-width: 261px) 100vw, 261px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nconst (\n   \/\/ALBHABET_SIZE total characters in english alphabet\n    ALBHABET_SIZE = 26\n)\n\ntype trieNode struct {\n    childrens [ALBHABET_SIZE]*trieNode\n    isWordEnd bool\n}\n\ntype trie struct {\n    root *trieNode\n}\n\nfunc initTrie() *trie {\n    return &trie{\n        root: &trieNode{},\n    }\n}\n\nfunc (t *trie) insert(word string) {\n    wordLength := len(word)\n    current := t.root\n    for i := 0; i < wordLength; i++ {\n        index := word[i] - 'a'\n        if current.childrens[index] == nil {\n            current.childrens[index] = &#038;trieNode{}\n        }\n        current = current.childrens[index]\n    }\n    current.isWordEnd = true\n}\n\nfunc (t *trie) find(word string) bool {\n    wordLength := len(word)\n    current := t.root\n    for i := 0; i < wordLength; i++ {\n        index := word[i] - 'a'\n        if current.childrens[index] == nil {\n            return false\n        }\n        current = current.childrens[index]\n    }\n    if current.isWordEnd {\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    trie := initTrie()\n    words := []string{\"sam\", \"john\", \"tim\", \"jose\", \"rose\",\n        \"cat\", \"dog\", \"dogg\", \"roses\"}\n    for i := 0; i < len(words); i++ {\n        trie.insert(words[i])\n    }\n    wordsToFind := []string{\"sam\", \"john\", \"tim\", \"jose\", \"rose\",\n        \"cat\", \"dog\", \"dogg\", \"roses\", \"rosess\", \"ans\", \"san\"}\n    for i := 0; i < len(wordsToFind); i++ {\n        found := trie.find(wordsToFind[i])\n        if found {\n            fmt.Printf(\"Word \\\"%s\\\" found in trie\\n\", wordsToFind[i])\n        } else {\n            fmt.Printf(\"Word \\\"%s\\\" not found in trie\\n\", wordsToFind[i])\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Word \"sam\" found in trie\nWord \"john\" found in trie\nWord \"tim\" found in trie\nWord \"jose\" found in trie\nWord \"rose\" found in trie\nWord \"cat\" found in trie\nWord \"dog\" found in trie\nWord \"dogg\" found in trie\nWord \"roses\" found in trie\nWord \"rosess\" not found in trie\nWord \"ans\" not found in trie\nWord \"san\" not found in trie<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewFull Working Code Overview A trie is a data structure for efficient information retrieval. It is a special kind of tree where a path starting from root to a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[102,137],"class_list":["post-1067","post","type-post","status-publish","format-standard","hentry","category-tech","tag-data-structure","tag-trie"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Trie Implementation in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Trie Implementation in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewFull Working Code Overview A trie is a data structure for efficient information retrieval. It is a special kind of tree where a path starting from root to a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-01-01T18:01:33+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-01-01T18:03:18+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/\",\"name\":\"Trie Implementation in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg\",\"datePublished\":\"2020-01-01T18:01:33+00:00\",\"dateModified\":\"2020-01-01T18:03:18+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#primaryimage\",\"url\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg\",\"contentUrl\":\"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg\"},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Trie Implementation in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Trie Implementation in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/","og_locale":"en_US","og_type":"article","og_title":"Trie Implementation in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewFull Working Code Overview A trie is a data structure for efficient information retrieval. It is a special kind of tree where a path starting from root to a...","og_url":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-01-01T18:01:33+00:00","article_modified_time":"2020-01-01T18:03:18+00:00","og_image":[{"url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg"}],"author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/","url":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/","name":"Trie Implementation in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#primaryimage"},"image":{"@id":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#primaryimage"},"thumbnailUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg","datePublished":"2020-01-01T18:01:33+00:00","dateModified":"2020-01-01T18:03:18+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/trie-implementation-in-go\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#primaryimage","url":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg","contentUrl":"https:\/\/golangbyexamples.com\/wp-content\/uploads\/2020\/01\/trie.jpg"},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/trie-implementation-in-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Trie Implementation in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-hd","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1067","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=1067"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1067\/revisions"}],"predecessor-version":[{"id":1071,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1067\/revisions\/1071"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=1067"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=1067"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=1067"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}