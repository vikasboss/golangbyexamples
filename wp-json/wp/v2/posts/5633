{"id":5633,"date":"2021-05-15T22:56:31","date_gmt":"2021-05-15T17:26:31","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5633"},"modified":"2021-05-15T23:45:09","modified_gmt":"2021-05-15T18:15:09","slug":"golang-regex-understanding-caret-and-dollar-character","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/","title":{"rendered":"Golang regex: Understanding caret and dollar character"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/#Program\" title=\"Program\">Program<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Caret character<\/strong><strong>&#8216;^&#8217; <\/strong>and <strong>Dollar character<\/strong><strong>&#8216;$&#8217; <\/strong>are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex. Below is a brief introduction of the caret character and dollar character in golang.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Caret Character &#8216;^&#8217; &#8211; <\/strong>It is an anchor character that is used at the start of the regex to make sure that the given input string is matched with the regex from the start.\u00a0 It matches the beginning of the input string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Dollar Character &#8216;$&#8217; &#8211; <\/strong>It is also an anchor character that is used at the end of the regex to make sure that the given input string is matched with the regex at the end.\u00a0 It matches the end of the input string<\/li><\/ul>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Program\"><\/span><strong>Program<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Caret and Dollar Metacharacters are anchor characters that are used to match the start and end of the string respectively. Not clear? Let&#8217;s understand it with an example. Let&#8217;s say you have below regex having three simple characters<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This regex will match any string having <strong>abc<\/strong> as a substring. See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n\nfunc main() {\n    sampleRegex := regexp.MustCompile(\"abc\")\n    match := sampleRegex.Match([]byte(\"abcd\"))\n    fmt.Printf(\"For abcd: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"1abc23\"))\n    fmt.Printf(\"For 1abc23: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"abc\"))\n    fmt.Printf(\"For abc: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: true\nFor 1abc23: true\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program gives a match for all the strings which contain <strong>&#8220;abc&#8221;<\/strong> as a substring.\u00a0 Therefore it gives matches for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc\nabcd\n1abc23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Basically, it will give a match for any input string which contains <strong>&#8220;abc&#8221;<\/strong> as a substring.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">If we only want to match the complete string then we need to anchor the string with the <strong>caret<\/strong> character at the start and the <strong>dollar<\/strong> character at the end. This will enable us to do a full-string match. See the below example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n\nfunc main() {\n    sampleRegex := regexp.MustCompile(\"^abc$\")\n\n    match := sampleRegex.Match([]byte(\"abcd\"))\n    fmt.Printf(\"For abcd: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"1abc23\"))\n    fmt.Printf(\"For 1abc23: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"abc\"))\n    fmt.Printf(\"For abc: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: false\nFor 1abc23: false\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">But doesn&#8217;t give a match for below as it only matches the full string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abcd\n1abc23<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This was the case when we wanted to match full string. What if we also want to match the string which starts with <strong>&#8220;abc&#8221;<\/strong>. The trailing character doesn&#8217;t matter. How do we do it? You guessed it right. In this case, we will only use the <strong>caret<\/strong> character at the start of regex and not use the <strong>dollar<\/strong> character. See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"regexp\"\n)\nfunc main() {\n    sampleRegex := regexp.MustCompile(\"^abc\")\n\n    match := sampleRegex.Match([]byte(\"abcd\"))\n    fmt.Printf(\"For abcd: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"abc\"))\n    fmt.Printf(\"For abc: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"1abc23\"))\n    fmt.Printf(\"For 1abc23: %t\\n\", match)\n\n    match = sampleRegex.Match([]byte(\"ab\"))\n    fmt.Printf(\"For ab: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: true\nFor abc: true\nFor 1abc23: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It gives matches for all the string which start with <strong>&#8220;abc&#8221;. <\/strong>That is why it gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: true\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and does not give a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1abc23: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If we want to match literal <strong>caret<\/strong> ^ then we need to escape it with a backslash. See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegex := regexp.MustCompile(\"\\\\^abc\")\n\n\tmatch := sampleRegex.Match([]byte(\"^abc\"))\n\tfmt.Printf(\"For ^abc: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: true\nFor abcd: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">What if we also want to match the string which ends with <strong>&#8220;abc&#8221;<\/strong>. The starting character doesn&#8217;t matter. How do we do it?\u00a0 In this case, we will only use the <strong>dollar<\/strong> character at the start of regex and not use the <strong>caret<\/strong> character at the start. See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegex := regexp.MustCompile(\"abc$\")\n\n\tmatch := sampleRegex.Match([]byte(\"1abc\"))\n\tfmt.Printf(\"For 1abc: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"abcd\"))\n\tfmt.Printf(\"For abcd: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"ab\"))\n\tfmt.Printf(\"For ab: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1abc: true\nFor abc: true\nFor abcd: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It gives matches for all the string which end with <strong>&#8220;abc&#8221;. <\/strong>That is why it gives a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For 1abc: true\nFor abc: true<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">and does not give a match for<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abcd: false\nFor ab: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If we want to match literal dollar $ then we need to escape it with a backslash. See below example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\tsampleRegex := regexp.MustCompile(\"abc\\\\$\")\n\n\tmatch := sampleRegex.Match([]byte(\"abc$\"))\n\tfmt.Printf(\"For abc$: %t\\n\", match)\n\n\tmatch = sampleRegex.Match([]byte(\"abc\"))\n\tfmt.Printf(\"For abc: %t\\n\", match)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">For abc$: true\nFor abc: false<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also, check out our Golang advance tutorial Series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\"><u>Golang Advance Tutorial<\/u><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewProgram Overview Caret character&#8216;^&#8217; and Dollar character&#8216;$&#8217; are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex. Below is a brief&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[],"class_list":["post-5633","post","type-post","status-publish","format-standard","hentry","category-tech"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Golang regex: Understanding caret and dollar character - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"Caret character &#039;^&#039; and Dollar character &#039;$&#039; are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Golang regex: Understanding caret and dollar character - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Caret character &#039;^&#039; and Dollar character &#039;$&#039; are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-05-15T17:26:31+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-15T18:15:09+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/\",\"url\":\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/\",\"name\":\"Golang regex: Understanding caret and dollar character - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-05-15T17:26:31+00:00\",\"dateModified\":\"2021-05-15T18:15:09+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"Caret character '^' and Dollar character '$' are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex.\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Golang regex: Understanding caret and dollar character\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Golang regex: Understanding caret and dollar character - Welcome To Golang By Example","description":"Caret character '^' and Dollar character '$' are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/","og_locale":"en_US","og_type":"article","og_title":"Golang regex: Understanding caret and dollar character - Welcome To Golang By Example","og_description":"Caret character '^' and Dollar character '$' are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex.","og_url":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-05-15T17:26:31+00:00","article_modified_time":"2021-05-15T18:15:09+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/","url":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/","name":"Golang regex: Understanding caret and dollar character - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-05-15T17:26:31+00:00","dateModified":"2021-05-15T18:15:09+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"Caret character '^' and Dollar character '$' are metacharacters that are used in regex in golang. Metacharacters are characters that have special meaning in regex.","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/golang-regex-understanding-caret-and-dollar-character\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Golang regex: Understanding caret and dollar character"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1sR","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5633","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5633"}],"version-history":[{"count":1,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5633\/revisions"}],"predecessor-version":[{"id":5634,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5633\/revisions\/5634"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5633"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5633"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5633"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}