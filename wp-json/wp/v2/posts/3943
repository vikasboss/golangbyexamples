{"id":3943,"date":"2020-09-04T02:32:13","date_gmt":"2020-09-03T21:02:13","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=3943"},"modified":"2020-11-26T01:14:04","modified_gmt":"2020-11-25T19:44:04","slug":"error-in-golang-advanced","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/","title":{"rendered":"Error in Go (Golang)- Advanced"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 27 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\">Panic and Recover<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/error-in-golang\/\">Error &#8211; Part 1<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Wrapping_of_error\" title=\"Wrapping of error\">Wrapping of error<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Unwrap_an_error\" title=\"Unwrap an error\">Unwrap an error<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Check_if_two_error_are_equal\" title=\"Check if two error are equal\">Check if two error are equal<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Using_the_equality_operator\" title=\"Using the equality operator (==)\">Using the equality operator (==)<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Using_the_Is_function_of_errors_package\" title=\"Using the Is function of errors package\">Using the Is function of errors package<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Get_the_underlying_error_from_an_error_represented_by_the_error_interface\" title=\"Get the underlying error from an error represented by the error interface\">Get the underlying error from an error represented by the error interface<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Using_the_type_assert\" title=\"Using the .({type}) assert\">Using the .({type}) assert<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Using_the_As_function_of_errors_package\" title=\"Using the As function of errors package\">Using the As function of errors package<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In the article we will be covering the advanced topics related to error in go.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Wrapping and un-wrapping errors<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Error comparison&nbsp;<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Extract underlying type from error<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>As<\/strong> and <strong>Is<\/strong> function of errors package<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Please refer to link below first which starts with basics of <strong>error<\/strong> in go.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golangbyexamples.com\/error-in-golang\/\">https:\/\/golangbyexamples.com\/error-in-golang\/<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">That article will cover basic things about error such as:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Overview of error<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Error interface<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Different ways of creating an error.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Ignoring errors<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Wrapping_of_error\"><\/span><strong>Wrapping of error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In go, error can wrap another error as well.&nbsp;<\/p>\n\n\n\n<p class=\"has-medium-font-size\">What does wrapping of error mean? It means to create a hierarchy of errors in which a&nbsp; particular instance of error wraps another error and that particular instance itself can be wrapped inside another error.&nbsp; Below is the syntax for wrapping an error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e := fmt.Errorf(\"... %w ...\", ..., err, ...)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>%w<\/strong> directive Is used for wrapping the error.&nbsp; The&nbsp;<strong>fmt.Errorf&nbsp;<\/strong>should be called with only one&nbsp;%w&nbsp;directive. Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype errorOne struct{}\n\nfunc (e errorOne) Error() string {\n\treturn \"Error One happended\"\n}\n\nfunc main() {\n\n\te1 := errorOne{}\n\n\te2 := fmt.Errorf(\"E2: %w\", e1)\n\n\te3 := fmt.Errorf(\"E3: %w\", e2)\n\n\tfmt.Println(e2)\n\n\tfmt.Println(e3)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended\nE3: E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a struct <strong>errorOne<\/strong> that has an <strong>Error<\/strong> method hence it implements the <strong>error<\/strong> interface. Then we created an instance of the&nbsp;<strong>errorOne<\/strong> struct named <strong>e1<\/strong>.&nbsp;Then we wrapped that instance <strong>e1<\/strong> into another error <strong>e2<\/strong> like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e2 := fmt.Errorf(\"E2: %w\", e1)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we wrapped <strong>e2<\/strong> into <strong>e3<\/strong> like below.&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e3 := fmt.Errorf(\"E3: %w\", e2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So so we created a hierarchy of errors in which <strong>e3<\/strong> wraps <strong>e2<\/strong> and <strong>e2<\/strong> wraps <strong>e1<\/strong>.&nbsp; Thus <strong>e3<\/strong> also wraps <strong>e1<\/strong> transitively. When we print <strong>e2&nbsp;<\/strong> it also prints the error from <strong>e1<\/strong> and gives the output.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">When we print <strong>e3<\/strong> it prints the error from <strong>e2<\/strong> as well as <strong>e1<\/strong> and gives the output.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E3: E2: Error One happended<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now the question which comes to the mind that whats the use case of wrapping the errors. To understand it let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype notPositive struct {\n\tnum int\n}\n\nfunc (e notPositive) Error() string {\n\treturn fmt.Sprintf(\"checkPositive: Given number %d is not a positive number\", e.num)\n}\n\ntype notEven struct {\n\tnum int\n}\n\nfunc (e notEven) Error() string {\n\treturn fmt.Sprintf(\"checkEven: Given number %d is not an even number\", e.num)\n}\n\nfunc checkPositive(num int) error {\n\tif num < 0 {\n\t\treturn notPositive{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkEven(num int) error {\n\tif num%2 == 1 {\n\t\treturn notEven{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkPostiveAndEven(num int) error {\n\tif num > 100 {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: Number %d is greater than 100\", num)\n\t}\n\n\terr := checkPositive(num)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = checkEven(num)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tnum := 3\n\terr := checkPostiveAndEven(num)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"Givennnumber is positive and even\")\n\t}\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">checkEven: Given number 3 is not an even number<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a function&nbsp;<strong>checkPostiveAndEven<\/strong> that checks whether a number is even and positive. In turns, it calls the <strong>checkEven<\/strong> function to check if the number is even. And then it calls <strong>checkPositive<\/strong> function to check if the number is positive. If a number is not even&nbsp;and positive it an error is raised.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the above program it is impossible to tell stack trace of the error. We know that this error came from <strong>checkEven<\/strong> function for the above output. But which function called the <strong>checkEven<\/strong> function is not clear from the error. This is where wrapping the error comes in the picture. &nbsp;This becomes more useful when the project is big and there are a lot of functions calling each other.&nbsp; Let&#8217;s rewrite the program by wrapping the error.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype notPositive struct {\n\tnum int\n}\n\nfunc (e notPositive) Error() string {\n\treturn fmt.Sprintf(\"checkPositive: Given number %d is not a positive number\", e.num)\n}\n\ntype notEven struct {\n\tnum int\n}\n\nfunc (e notEven) Error() string {\n\treturn fmt.Sprintf(\"checkEven: Given number %d is not an even number\", e.num)\n}\n\nfunc checkPositive(num int) error {\n\tif num < 0 {\n\t\treturn notPositive{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkEven(num int) error {\n\tif num%2 == 1 {\n\t\treturn notEven{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkPostiveAndEven(num int) error {\n\tif num > 100 {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: Number %d is greater than 100\", num)\n\t}\n\n\terr := checkPositive(num)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: %w\", err)\n\t}\n\n\terr = checkEven(num)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tnum := 3\n\terr := checkPostiveAndEven(num)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"Given number is positive and even\")\n\t}\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">checkPostiveAndEven: checkEven: Given number 3 is not an even number<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp;The above program is same as the previous program just that&nbsp;in the <strong>checkPostiveAndEven<\/strong> function , we wrap the errors like below.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Errorf(\"checkPostiveAndEven: %w\", err)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So the output is more clear and the error is more informative. The output clearly mentions the sequence of calling as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">checkPostiveAndEven: checkEven: Given number 3 is not an even number<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Unwrap_an_error\"><\/span><strong>Unwrap an error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In the above section, we studied about wrapping the error. It is also possible to unwrap the error. Unwrap&nbsp;function of errors package can be used to unwrap an error. Below is the syntax of the function.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Unwrap(err error) error<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">If the <strong>err<\/strong> wraps another error, then the wrapped error will be returned otherwise&nbsp;<strong>Unwrap<\/strong> function will return nil.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program to illustrate the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import (\n    \"errors\"\n    \"fmt\"\n)\ntype errorOne struct{}\nfunc (e errorOne) Error() string {\n    return \"Error One happened\"\n}\nfunc main() {\n    e1 := errorOne{}\n    e2 := fmt.Errorf(\"E2: %w\", e1)\n    e3 := fmt.Errorf(\"E3: %w\", e2)\n    fmt.Println(errors.Unwrap(e3))\n    fmt.Println(errors.Unwrap(e2))\n    fmt.Println(errors.Unwrap(e1))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happended\nError One happended\n<nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a struct <strong>errorOne<\/strong> that has an <strong>Error<\/strong> method hence it implements the <strong>error<\/strong> interface. Then we created an instance of the&nbsp;<strong>errorOne<\/strong> struct named <strong>e1<\/strong>.&nbsp;Then we wrapped that instance <strong>e1<\/strong> into another error <strong>e2<\/strong> like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e2 := fmt.Errorf(\"E2: %w\", e1)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we wrapped <strong>e2<\/strong> into <strong>e3<\/strong> like below.&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e3 := fmt.Errorf(\"E3: %w\", e2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Hence<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(errors.Unwrap(e3))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will return wrapped error <strong>e2<\/strong> as <strong>e3<\/strong> wraps <strong>e2<\/strong> and output will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happened<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">While<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(errors.Unwrap(e1))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">will output nil as <strong>e1<\/strong> does not wraps any error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{nil}<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Check_if_two_error_are_equal\"><\/span><strong>Check if two error are equal<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">First of all, what is meant by equality of the error?&nbsp; As you already know that error is represented by the error interface in go. In go, two interfaces are equal if<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>&nbsp;Both refer to the same underlying type<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The underlying value is equal (or both nil)<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So above two points apply for comparing the error as well. There are two ways of checking if given errors are equal<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_equality_operator\"><\/span>Using the equality operator (==)<span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>==<\/strong> operator ca be used to compare two error in golang<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_Is_function_of_errors_package\"><\/span>Using the <strong>Is<\/strong> function of errors package<span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/errors\/\">https:\/\/golang.org\/pkg\/errors\/<\/a> .&nbsp; Using <strong>Is<\/strong> function is preferable to using the equality operator because it checks for equality by unwrapping the first error sequentially and matches it with target error at each step of unwrap. We will see an example later on to fully understand why it is preferable. Below is the syntax of Is function.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Is(err, target error) bool<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">&nbsp;Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"errors\"\n    \"fmt\"\n)\ntype errorOne struct{}\nfunc (e errorOne) Error() string {\n    return \"Error One happended\"\n}\nfunc main() {\n    var err1 errorOne\n    err2 := do()\n    if err1 == err2 {\n        fmt.Println(\"Equality Operator: Both errors are equal\")\n    }\n    if errors.Is(err1, err2) {\n        fmt.Println(\"Is function: Both errors are equal\")\n    }\n}\nfunc do() error {\n    return errorOne{}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Equality Operator: Both errors are equal\nIs function: Both errors are equal<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created <strong>errorOne<\/strong> struct which defines the <strong>Error<\/strong> method hence implement the <strong>error<\/strong> interface.&nbsp; We created <strong>err1<\/strong>&nbsp; variable which is an instance of <strong>errorOne<\/strong> struct. We also created a <strong>do()<\/strong> function which raises an error of type <strong>errorOne <\/strong>and that is captured in <strong>err2<\/strong> variable in the main function<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Then we are comparing two errors using<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the equality operator<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">err1 == err2<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the <strong>Is<\/strong> function of errors package<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">errors.Is(err1, err2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Both the method correctly output that the error is equal as both <strong>err1<\/strong> and <strong>err2<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Refer to same underlying type which is <strong>errorOne<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Have the same underlying value<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">We mentioned above that using the <strong>Is<\/strong> function preferable to using the equality operator because it checks for equality by unwrapping the first error sequentially and matches it with the target error at each step of unwrap. Let&#8217;s see an example of that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\ntype errorOne struct{}\n\nfunc (e errorOne) Error() string {\n\treturn \"Error One happended\"\n}\n\nfunc main() {\n\terr1 := errorOne{}\n\n\terr2 := do()\n\n\tif err1 == err2 {\n\t\tfmt.Println(\"Equality Operator: Both errors are equal\")\n\t} else {\n\t\tfmt.Println(\"Equality Operator: Both errors are not equal\")\n\t}\n\n\tif errors.Is(err2, err1) {\n\t\tfmt.Println(\"Is function: Both errors are equal\")\n\t}\n}\n\nfunc do() error {\n\treturn fmt.Errorf(\"E2: %w\", errorOne{})\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Equality Operator: Both errors are not equal\nIs function: Both errors are equal<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program is almost same as the previous program just the difference being that in the <strong>do() <\/strong>function we are wrapping the error as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">return fmt.Errorf(\"E2: %w\", errorOne{})<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The equality operator outputs<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Equality Operator: Both errors are not equal<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>While <strong>Is<\/strong> function outputs<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Is function: Both errors are equal<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is because the <strong>err2<\/strong> returned wraps an instance of&nbsp; <strong>errorOne<\/strong> which is not catched by the equality operator but is catched by <strong>Is<\/strong> function<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Get_the_underlying_error_from_an_error_represented_by_the_error_interface\"><\/span><strong>Get the underlying error from an error represented by the error interfac<\/strong>e<span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">There are two ways of getting the underlying type<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_type_assert\"><\/span>Using the .({type}) assert<span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">If the assert succeeds then it will return the corresponding error otherwise it will panic. Below is the syntax<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">err := err.({type})<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Better to use <strong>ok<\/strong> variable to prevent panic in case assertion fails.&nbsp; Below is the syntax for that. The <strong>ok<\/strong> variable will be set to true if&nbsp; error underlying type is correct<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">err, ok := err.({type})<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Using_the_As_function_of_errors_package\"><\/span><strong>Using the As function of errors package<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/errors\/\">https:\/\/golang.org\/pkg\/errors\/<\/a> . Using <strong>As<\/strong> function is preferable to using the .({type}) assert because it checks for match by unwrapping the first error sequentially and matches it with target error at each step of unwrap. Below is the syntax of Is function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func As(err error, target interface{}) bool<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>As<\/strong> function will find the first error in the first argument which can match the target. Once a match is found it will set target to that error value.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\n\terr := openFile(\"non-existing.txt\")\n\n\tif e, ok := err.(*os.PathError); ok {\n\t\tfmt.Printf(\"Using Assert: Error e is of type path error. Path: %v\\n\", e.Path)\n\t} else {\n\t\tfmt.Println(\"Using Assert: Error not of type path error\")\n\t}\n\n\tvar pathError *os.PathError\n\tif errors.As(err, &pathError) {\n\t\tfmt.Printf(\"Using As function: Error e is of type path error. Path: %v\\n\", pathError.Path)\n\t}\n}\n\nfunc openFile(fileName string) error {\n\t_, err := os.Open(\"non-existing.txt\")\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Using Assert: Error e is of type path error. Path: non-existing.txt\nUsing As function: Error e is of type path error. Path: non-existing.txt<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we have a function openFile in which we are trying to open a non-existing type hence it will raise an error. Then we are asserting&nbsp; the error in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using . assert operator. The <strong>ok<\/strong> variable will be set to true if&nbsp; error underlying type is <strong>*os.PathError<\/strong> otherwise it will be set to false<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e,ok := err.(*os.PathError); ok<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the <strong>As<\/strong> function of errors package<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">errors.As(err, &pathError)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Both the method correctly assert that the error is of type <strong>*os.PathError<\/strong> as error returned by the <strong>openFile<\/strong> function is of type <strong>*os.PathError<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">We mentioned above that using <strong>As<\/strong> function is preferable to using the .({type}) assert because it checks for a match by unwrapping the first error sequentially and matches it with the target error at each step of unwrap. Let&#8217;s see an example to understand that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">import (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tvar pathError *os.PathError\n\terr := openFile(\"non-existing.txt\")\n\n\tif e, ok := err.(*os.PathError); ok {\n\t\tfmt.Printf(\"Using Assert: Error e is of type path error. Error: %v\\n\", e)\n\t} else {\n\t\tfmt.Println(\"Using Assert: Error not of type path error\")\n\t}\n\n\tif errors.As(err, &pathError) {\n\t\tfmt.Printf(\"Using As function: Error e is of type path error. Error: %v\\n\", pathError)\n\t}\n}\n\nfunc openFile(fileName string) error {\n\t_, err := os.Open(\"non-existing.txt\")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Error opening: %w\", err)\n\t}\n\treturn nil\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Using Assert: Error not of type path error\nUsing As function: Error e is of type path error. Error: open non-existing.txt: no such file or directory<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program is almost same as the previous program just the difference being that in the <strong>openFile<\/strong> function we are wrapping the error as well<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">return fmt.Errorf(\"Error opening: %w\", err)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The . assert outputs<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Using Assert: Error not of type path error<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>While As function outputs<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Using As function: Error e is of type path error. Error: open non-existing.txt: no such file or directory<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is because the error returned by the <strong>openFile <\/strong>function wraps <strong>*os.Patherror<\/strong> error which is not catched by the dot(&#8216;.&#8217;) assert but is catched by <strong>As<\/strong> function<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about advanced topic in error in golang. Hope you have liked this article. Please share feedback\/improvements\/mistakes in comments.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\">Panic and Recover<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013 <a href=\"https:\/\/golangbyexamples.com\/error-in-golang\/\">Error &#8211; Part 1<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 27 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0Panic and RecoverPrevious Tutorial\u00a0\u2013 Error &#8211;&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-3943","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Error in Go (Golang)- Advanced - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Error in Go (Golang)- Advanced - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 27 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0Panic and RecoverPrevious Tutorial\u00a0\u2013 Error &#8211;...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-03T21:02:13+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-25T19:44:04+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"12 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\",\"url\":\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\",\"name\":\"Error in Go (Golang)- Advanced - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-03T21:02:13+00:00\",\"dateModified\":\"2020-11-25T19:44:04+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Error in Go (Golang)- Advanced\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Error in Go (Golang)- Advanced - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/","og_locale":"en_US","og_type":"article","og_title":"Error in Go (Golang)- Advanced - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 27 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0Panic and RecoverPrevious Tutorial\u00a0\u2013 Error &#8211;...","og_url":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-03T21:02:13+00:00","article_modified_time":"2020-11-25T19:44:04+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"12 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/","url":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/","name":"Error in Go (Golang)- Advanced - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-03T21:02:13+00:00","dateModified":"2020-11-25T19:44:04+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/error-in-golang-advanced\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Error in Go (Golang)- Advanced"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-11B","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3943","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=3943"}],"version-history":[{"count":6,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3943\/revisions"}],"predecessor-version":[{"id":4565,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/3943\/revisions\/4565"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=3943"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=3943"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=3943"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}