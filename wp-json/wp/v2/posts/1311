{"id":1311,"date":"2020-02-01T18:56:56","date_gmt":"2020-02-01T18:56:56","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=1311"},"modified":"2022-07-14T22:20:11","modified_gmt":"2022-07-14T16:50:11","slug":"all-data-types-in-golang-with-examples","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/","title":{"rendered":"All data types in Golang with examples"},"content":{"rendered":"\n<p class=\"has-medium-font-size\"><strong>Note:<\/strong> If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a>. Now let&#8217;s see the current tutorial. Below is the table of contents.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Basic_Types\" title=\"Basic Types\">Basic Types<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Integers_Signed_and_UnSigned\" title=\"Integers (Signed and UnSigned)\">Integers (Signed and UnSigned)<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Floats\" title=\"Floats\">Floats<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Complex_Numbers\" title=\"Complex Numbers\">Complex Numbers<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Byte\" title=\"Byte\">Byte<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Rune\" title=\"Rune\">Rune<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#String\" title=\"String\">String<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Booleans\" title=\"Booleans\">Booleans<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Composite_Types\" title=\"Composite Types\">Composite Types<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Non-Reference_Types\" title=\"Non-Reference Types\">Non-Reference Types<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Arrays\" title=\"Arrays\">Arrays<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-13\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Structs\" title=\"Structs\">Structs<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-14\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Reference_Types\" title=\"Reference Types\">Reference Types<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-15\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Slices\" title=\"Slices\">Slices<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-16\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Channels\" title=\"Channels\">Channels<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-17\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Maps\" title=\"Maps\">Maps<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-18\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Pointers\" title=\"Pointers\">Pointers<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-19\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Functions\" title=\"Functions\">Functions<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-20\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Interface\" title=\"Interface\">Interface<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-21\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Special_case_of_empty_interface\" title=\"Special case of empty interface\">Special case of empty interface<\/a><\/li><\/ul><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-22\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span>Overview<span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Golang is statically typed programming language meaning that each variable has a type. Go has several built in types that we will look into in this article. Data types in Go can be categorized into two types<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>Basic Types<\/li><li>Composite Types<\/li><\/ol>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Basic Types<ul><li>Integers<ul><li>Signed<ul><li>int<\/li><li>int8 <\/li><li>int16&nbsp; <\/li><li>int32&nbsp; <\/li><li>int64<\/li><\/ul><\/li><li>Unsigned<ul><li>uint <\/li><li>uint8 <\/li><li>uint16 <\/li><li>uint32 <\/li><li>uint64 <\/li><li>uintptr<\/li><\/ul><\/li><\/ul><\/li><li>Floats<ul><li>float32<\/li><li>float64<\/li><\/ul><\/li><li>Complex Numbers<ul><li>complex64<\/li><li> complex128<\/li><\/ul><\/li><li>Byte<\/li><li>Rune<\/li><li>String<\/li><li>Boolean<\/li><\/ul><\/li><li>Composite Types<ul><li>Collection\/Aggregation or Non-Reference Types<ul><li>Arrays<\/li><li>Structs<\/li><\/ul><\/li><li>Reference Types<ul><li>Slices<\/li><li>Maps<\/li><li>Channels<\/li><li>Pointers<\/li><li>Function\/Methods<\/li><\/ul><\/li><li>Interface<ul><li>Special case of empty Interface<\/li><\/ul><\/li><\/ul><\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Basic_Types\"><\/span><strong>Basic Types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s first discuss the basic types in GO.<\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Integers_Signed_and_UnSigned\"><\/span><strong>Integers<\/strong> (Signed and UnSigned)<span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Integers can be signed or unsigned. <\/p>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color\" style=\"font-size:22px\"><strong>Signed<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Signed integers are of 5 types as below<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-background\" style=\"background-color:#e7f5fe\"><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Size<\/strong><\/td><\/tr><tr><td>int<\/td><td>Platform Dependent<\/td><\/tr><tr><td>int8<\/td><td>8 bits\/1 byte<\/td><\/tr><tr><td>int16<\/td><td>16 bits\/2 byte<\/td><\/tr><tr><td>int32<\/td><td>32 bits\/4 byte<\/td><\/tr><tr><td>int64<\/td><td>64 bits\/8 byte<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>Platform Dependent. <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the size of an int will be 32 bits or 4 bytes. <\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 64 bit machines, the size of an int will be 64 bits or 8 bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Again Platform dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the range of int will be -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 64 bit machines, the range of int will be -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is a good idea to use int&nbsp;whenever using signed Integer other than the cases mentioned below<ul><li> When the machine is a 32 bit and range needed is greater than -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1, then use <strong>int64<\/strong> instead <strong>int<\/strong>. Note that in this case for int64,&nbsp; 2 32-bit memory addresses to form a 64-bit number together.<\/li><\/ul><ul><li>When the range is less then use appropriate integer type.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Properties:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare an int <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> var a int<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li> int is default type for <strong>integer. <\/strong>When you don&#8217;t specify a type the default will be int<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">b := 2 \/\/The default is also int\nfmt.Println(reflect.TypeOf(b)) => int<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>bits <\/strong>package of golang can help know the size of an <strong>int <\/strong>on your system<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\/\/This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) \/\/ 32 or 64\nsizeOfIntInBits := bits.UintSize\nfmt.Println(sizeOfIntInBits) => 32 0r 34<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>unsafe.Sizeof() <\/strong>function can also be used to see the size of int in bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Full Working Code <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the full working code of the above properties<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"math\/bits\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) \/\/ 32 or 64\n    sizeOfIntInBits := bits.UintSize\n    fmt.Printf(\"%d bits\\n\", sizeOfIntInBits)\n    \n    var a int\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n    \n    b := 2\n    fmt.Printf(\"b's typs is %s\\n\", reflect.TypeOf(b))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">64 bits\n8 bytes\na's type is int\nb's typs is int<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int8<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>8 bits or 1 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: -2<sup>7<\/sup>&nbsp;to 2<sup>7<\/sup>&nbsp;-1.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use int8 when there it is known that the int range will be between -2<sup>7<\/sup>&nbsp;to 2<sup>7<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For array values which lies between -27&nbsp;to 27&nbsp;-1, is a good use case for using int8. For eg if you are storing ASCII index for lowercase letters then int8 can be used<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is a good idea to use int8 for data values.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare an int8<\/li><li>Print size of int8 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a int 8\n    var a int8 = 2\n    \n    \/\/Size of int8 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1 bytes\na's type is int8<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int16<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>16 bits or 2 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: -2<sup>15<\/sup>&nbsp;to 2<sup>15<\/sup>&nbsp;-1.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use int16 when there it is known that the int range will be between -2<sup>15<\/sup>&nbsp;to 2<sup>15<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For array values which lies between -215&nbsp;to 215&nbsp;-1, is a good use case for using int8. For eg if you are storing ASCII index for lowercase letters than int16 can be used.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare an int16<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of int16 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a int16\n    var a int16 = 2\n    \n    \/\/Size of int8 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">2 bytes\na's type is int16<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\"><strong>int32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>32 bits or 4 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare an int32<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of int8 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a int32\n    var a int32 = 2\n    \n    \/\/Size of int32 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">4 bytes\na's type is int32<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>64 bits or 8 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>int64<\/strong> is used when the range is higher. For eg <strong>time.Duration<\/strong> is of type <strong>int64<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare an int64<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of int64 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a int64\n    var a int64 = 2\n\n    \/\/Size of int64 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8 bytes\na's type is int64<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-cyan-blue-color has-text-color\" style=\"font-size:22px\"><strong>UnSigned<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">UnSigned integers are of 5 types as below<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-background\" style=\"background-color:#e7f5fe\"><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Size<\/strong><\/td><\/tr><tr><td>uint<\/td><td>Platform Dependent<\/td><\/tr><tr><td>uint8<\/td><td>8 bits\/1 byte<\/td><\/tr><tr><td>uint16<\/td><td>16 bits\/2 byte<\/td><\/tr><tr><td>uint32<\/td><td>32 bits\/4 byte<\/td><\/tr><tr><td>uint64<\/td><td>64 bits\/8 byte<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>Platform Dependent. <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the size of an int will be 32 bits or 4 byte. <\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 64 bit machines, the size of an int will be 64 bits or 8 byte<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Again Platform dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the range of int will be -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 64 bit machines, the range of int will be -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is a good idea to use uint&nbsp; whenever using signed Integer other than the cases mention below<ul><li> When the machine is a 32 bit and range needed is greater than -231&nbsp;to 231&nbsp;-1, then use int64 instead int. Note that in this case for int64,&nbsp; 2 32-bit memory addresses to form a 64-bit number together.<\/li><li>When the range is less than use the appropriate int type<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Properties:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a uint <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> var a uint<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>bits <\/strong>package of golang can help know the size of an <strong>uint <\/strong>on your system<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\/\/This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) \/\/ 32 or 64\nsizeOfUintInBits := bits.UintSize\nfmt.Println(sizeOfIntInBits) => 32 or 64<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>unsafe.Sizeof() <\/strong>function can also be used to see the size of uint in bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Full Working Code <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the full working code of above properties<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"math\/bits\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/This is computed as const uintSize = 32 << (^uuint(0) >> 32 & 1) \/\/ 32 or 64\n    sizeOfuintInBits := bits.UintSize\n    fmt.Printf(\"%d bits\\n\", sizeOfuintInBits)\n\n    var a uint\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">64 bits\n8 bytes\na's type is uint<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uintptr<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is an unsigned integer type that is large enough to hold any pointer address. Therefore is size and range are platform dependent.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>Platform Dependent. <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the size of int will be 32 bits or 4 byte. <\/li><li>On 64 bit machines, the size of int will be 64 bits or 8 byte<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Again Platform dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the range of int will be -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/li><li>On 64 bit machines, the range of int will be -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Properties:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A uintptr can be converted to <strong>unsafe.Pointer<\/strong> and viceversa<\/li><li>Arithmetic can be performed on the uintptr<\/li><li>uintptr even though it holds a pointer address, is just a value and does not references any object. Therefore<ul><li>Its value will not be updated if the corresponding object moves. Eg When goroutine stack changes<\/li><li>The corresponding object can be garbage collected.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong><\/strong><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Its purpose is to be used along with unsafe.Pointer mainly used for unsafe memory access.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When you want to save the pointer address value for printing it or storing it. Since the address is just stored and does not reference anything, the corresponding object can be garbage collected.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\ntype sample struct {\n    a int\n    b string\n}\nfunc main() {\n    s := &sample{a: 1, b: \"test\"}\n    \n   \/\/Getting the address of field b in struct s\n    p := unsafe.Pointer(uintptr(unsafe.Pointer(s)) + unsafe.Offsetof(s.b))\n    \n    \/\/Typecasting it to a string pointer and printing the value of it\n    fmt.Println(*(*string)(p))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">test<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint8<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>8 bits or 1 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>:&nbsp; 0 to 255 or 0&nbsp;to 2<sup>8<\/sup>&nbsp;-1.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use uint8 when there it is known that the int range will be between  2<sup>8<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For array values which lies between&nbsp; 2<sup>8<\/sup>&nbsp;-1. is a good use case for using uint8. For eg if you are storing ASCII index in an array then <strong>uint8<\/strong> can be used.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a uint8<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of uint8 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a uint8\n\n    var a uint8 = 2\n    \n    \/\/Size of uint8 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1 bytes\na's type is uint8<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>uint16<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>16 bits or 2 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 0 to 2<sup>16<\/sup>&nbsp;-1<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use int16 when there it is known that the int range will be between 0 to 2<sup>16<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For array values which lies between -0 to 2<sup>16<\/sup>&nbsp;-1, is a good use case for using int8. <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a uint16<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of uint16 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    \/\/Declare a uint16\n    var a uint16 = 2\n\n    \/\/Size of uint16 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">2 bytes\na's type is uint16<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>uint32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>32 bits or 4 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 0 to 2<sup>32<\/sup>&nbsp;-1<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a uint32<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of uint32 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a uint32\n    var a uint32 = 2\n\n    \/\/Size of uint32 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1 bytes\na's type is uint32<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>uint64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>64 bits or 8 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 0 to 2<sup>64<\/sup>&nbsp;-1<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>uint64 is used when the range is higher.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a uint64<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of uint64 in bytes<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a uint64\n    var a uint64 = 2\n    \n\/\/Size of uint64 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8 bytes\na's type is uint64<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Floats\"><\/span><strong>Floats<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Floats are numbers with decimals. It is of two types<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-background\" style=\"background-color:#f3f4f5\"><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Size<\/strong><\/td><\/tr><tr><td>float32<\/td><td>32 bits or 4 bytes<\/td><\/tr><tr><td>float64<\/td><td>64 bits or 8 bytes<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\"><strong>float64<\/strong> is the default float type. When you initialize a variable with a decimal value and don&#8217;t specify the float type, the default type inferred will be <strong>float64<\/strong>.<\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>float32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>float32<\/strong> uses single-precision floating point format to store values. Basically it is the set of all IEEE-754 32-bit floating-point numbers. The 32 bits are divided into &#8211; 1 bit sign, 8 bits exponent, and 23 bits mantissa. float 32 take half much size as float 64 and are comparatively faster on some machine architectures.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: 32 bits or 4 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 1.2E-38 to 3.4E+38&#8242;<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>DefaultValue<\/strong>: 0.0<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If in your system memory is a bottleneck and range is less, then <strong>float32<\/strong> can be used.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a float32<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Print size of float32 in bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a float32\n    var a float32 = 2\n    \n    \/\/Size of float32 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">4 bytes\na's type is float32<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>float64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">float64 uses a double-precision floating-point format to store values. Basically it is the set of all IEEE-754 64-bit floating-point numbers. The 64 bits are divided into &#8211; 1-bit sign, 11 bits exponent, 52 bits mantissa.  float64 takes twice as much size compared to float32 but can represent numbers more accurately than float32.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: 32 bits or 4 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 1.2E-38 to 3.4E+38<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>DefaultValue<\/strong>: 0.0<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When the precision needed is high<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a float64<\/li><li>Print size of float64 in bytes<\/li><li>Default is float64 when you don&#8217;t specify a type<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a float64\n    var a float64 = 2\n    \n    \/\/Size of float64 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n    \n    \/\/Default is float64 when you don't specify a type\n    b := 2.3\n    fmt.Printf(\"b's type is %s\\n\", reflect.TypeOf(b))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">8 bytes\na's type is float64\nb's type is float64<\/code><\/pre>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Complex_Numbers\"><\/span><strong>Complex Numbers<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Complex Numbers are of two types<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-background\" style=\"background-color:#f3f4f5\"><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Property<\/strong><\/td><\/tr><tr><td>complex64<\/td><td>Both real and imaginary part are float32<\/td><\/tr><tr><td> complex128<\/td><td>Both real and imaginary part are float64<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The default complex type is complex128<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Initialization<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Complex Numbers can be initialized in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using complex function. It has below signature.  Do make sure that both a and b should be of same type , meaning either they both should be float32 or both should be float64<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">complext(a, b)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the shorthand syntax. This is used when creating a complex number with direct numbers. The complex type created using below method will be of type <strong>complex128 <\/strong>if type is not specified<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a := 5 + 6i<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>complex64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">For complex 64 both real and imaginary part are float32<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: Both real and imaginary part are of same size as float32. It is of size 32 bits or 4 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Both real and imaginary part range is same as float32 i.e 1.2E-38 to 3.4E+38<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is a sample code that shows<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>How to create a complex64 number using the above two method<\/li><li>Print size of a complex64 number. Size will be&nbsp; 8 bytes(4 +4) which is equivalent to two float32 numbers<\/li><li>Print type of a complex64 number<\/li><li>+ operation on complex number<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    var a float32 = 3\n    var b float32 = 5\n    \n    \/\/Initialize-1\n    c := complex(a, b)\n    \n    \/\/Initialize-2\n    var d complex64\n    d = 4 + 5i\n    \n    \/\/Print Size\n    fmt.Printf(\"c's size is %d bytes\\n\", unsafe.Sizeof(c))\n    fmt.Printf(\"d's size is %d bytes\\n\", unsafe.Sizeof(d))\n    \n    \/\/Print type\n    fmt.Printf(\"c's type is %s\\n\", reflect.TypeOf(c))\n    fmt.Printf(\"d's type is %s\\n\", reflect.TypeOf(d))\n    \n    \/\/Operations on complex number\n    fmt.Println(c+d, c-d, c*d, c\/d)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">c's size is 8 bytes\nd's size is 8 bytes\nc's type is complex64\nd's type is complex64\n(7+10i) (-1+0i) (-13+35i) (0.902439+0.12195122i)<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color\" style=\"font-size:22px\"><strong>complex128<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">For complex128 both <strong>real<\/strong> and <strong>imaginary<\/strong> part are <strong>float64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: Both <strong>real<\/strong> and <strong>imaginary<\/strong> part are of same size as float64. It is of size 64 bits or 8 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Both <strong>real<\/strong> and <strong>imaginary<\/strong> part range is same as <strong>float64<\/strong> i.e -1.7E+308 to +1.7E+308<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is a sample code that shows<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>How to create a complex128 number using above two method. It also shows when type is not specified, the default type will be <strong>complex128<\/strong><\/li><li>Print size of a complex128 number. Size will be&nbsp; 16 bytes(8 +8) which is equivalent to two float64 numbers<\/li><li>Print type of a complex128 number<\/li><li>Different operations on complex number<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    var a float64 = 3\n    var b float64 = 5\n    \n    \/\/Initialize-1\n    c := complex(a, b)\n    \n    \/\/Initialize-2. When don't specify a type , the default type will be complex128\n    d := 4 + 5i\n    \n    \/\/Print Size\n    fmt.Printf(\"c's size is %d bytes\\n\", unsafe.Sizeof(c))\n    fmt.Printf(\"d's size is %d bytes\\n\", unsafe.Sizeof(d))\n    \n    \/\/Print type\n    fmt.Printf(\"c's type is %s\\n\", reflect.TypeOf(c))\n    fmt.Printf(\"d's type is %s\\n\", reflect.TypeOf(d))\n    \n    \/\/Operations on complex number\n    fmt.Println(c+d, c-d, c*d, c\/d)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">c's size is 16 bytes\nd's size is 16 bytes\nc's type is complex128\nd's type is complex128\n(7+10i) (-1+0i) (-13+35i) (0.902439024390244+0.12195121951219513i)<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Byte\"><\/span><strong>Byte<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">byte in Go is an alias for <strong>uint8 <\/strong>meaning it is an integer value. This integer value is of 8 bits and it represents one byte i.e number between 0-255). A single byte therefore can represent ASCII characters. Golang does not have any data type of &#8216;char&#8217;. Therefore <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>byte is used to represent the ASCII character<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>rune is used to represent all UNICODE characters which include every character that exists. We will study about rune later in this tutorial.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Define Byte<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var rbyte byte := 'a'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">While declaring byte we have specify the type, as we have in the program above. If we don&#8217;t specify the type, then the default type is meant as a <strong>rune. <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In below code example:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>How to define a byte<\/li><li>Print the byte type<\/li><li>Print size of byte<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    var r byte = 'a'\n    \n    \/\/Print Size\n    fmt.Printf(\"Size: %d\\n\", unsafe.Sizeof(r))\n    \n    \/\/Print Type\n    fmt.Printf(\"Type: %s\\n\", reflect.TypeOf(r))\n    \n    \/\/Print Character\n    fmt.Printf(\"Character: %c\\n\", r)\n    s := \"abc\"\n    \n    \/\/This will the decimal value of byte\n    fmt.Println([]byte(s))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Size: 1\nType: uint8\nCharacter: a\n[97 98 99]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Rune\"><\/span><strong>Rune<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">rune in Go is&nbsp; an alias for <strong>int32 <\/strong>meaning it is an integer value. This integer value is meant to represent a Unicode Code Point. To understand rune you have to know what Unicode is. Below is short description but you can refer to famous blog post about it &#8211; <a href=\"http:\/\/www.joelonsoftware.com\/articles\/Unicode.html\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>What is UniCode<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Unicode is a superset of ASCII characters which assigns a unique number to every character that exists. This unique number is called Unicode Code Point.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For eg <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Digit <strong>0<\/strong> is represented as Unicode Point <strong>U+0030 (Decimal Value &#8211; 48)<\/strong><\/li><li>Small Case <strong>b<\/strong> is represented as Unicode Point&nbsp; <strong>U+0062 (Decimal Value &#8211; 98)<\/strong><\/li><li>A pound symbol <strong>\u00a3&nbsp;<\/strong>is represented as Unicode Point <strong>U+00A3 (Decimal Value &#8211; 163)<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Visit <a href=\"https:\/\/en.wikipedia.org\/wiki\/List_of_Unicode_characters\">https:\/\/en.wikipedia.org\/wiki\/List_of_Unicode_characters<\/a> to know about Unicode Point of other characters. But Unicode doesn&#8217;t talk about how these code points will be saved in memory. This is where <strong>utf-8<\/strong> comes into picture<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>UTF-8<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">utf-8 saves every Unicode Point either using 1, 2, 3 or 4 bytes. ASCII points are stored using 1 byte. That is why rune is an alias for int32 because a Unicode Point can be of max 4 bytes in Go as in GO every string is encoded using utf-8.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Every rune is intended to refer to one Unicode Point.&nbsp; For eg if you print a string after typecasting it to a rune array then it will print the Unicode Point for each of character. For for below string <strong>&#8220;0b\u00a3&#8221;<\/strong> output will be &#8211; <strong>[U+0030 U+0062 U+00A3]<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"%U\\n\", []rune(\"0b\u00a3\"))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Declare Rune<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">A rune is declared using a character between single quotes like below declaring a variable named <strong>&#8216;rPound&#8217;<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">rPound := '\u00a3'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">After declaring Rune you can perform below things as well<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print Type &#8211; <\/strong>Output will be <strong>int32<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Type: %s\\n\", reflect.TypeOf(rPound))<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print Unicode Code Point &#8211; <\/strong>Output will be <strong>U+00A3<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Unicode CodePoint: %U\\n\", rPound)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print Character &#8211; <\/strong>Output will be <strong>\u00a3<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Character: %c\\n\", r)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">You should use a rune when you intend to save Unicode Code Point in the value. A rune array should be used when all values in the array are meant to be a Unicode Code Point.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the code illustrating each point we discussed<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    r := 'a'\n    \n    \/\/Print Size\n    fmt.Printf(\"Size: %d\\n\", unsafe.Sizeof(r))\n    \n    \/\/Print Type\n    fmt.Printf(\"Type: %s\\n\", reflect.TypeOf(r))\n    \n    \/\/Print Code Point\n    fmt.Printf(\"Unicode CodePoint: %U\\n\", r)\n    \n    \/\/Print Character\n    fmt.Printf(\"Character: %c\\n\", r)\n    s := \"0b\u00a3\"\n    \n    \/\/This will print the Unicode Points\n    fmt.Printf(\"%U\\n\", []rune(s))\n    \n    \/\/This will the decimal value of Unicode Code Point\n    fmt.Println([]rune(s))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Size: 4\nType: int32\nUnicode CodePoint: U+0061\nCharacter: a\n[U+0030 U+0062 U+00A3]\n[48 98 163]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"String\"><\/span><strong>String<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">string is a read only slice of bytes in golang. String can be initialized in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>using double quotes &#8220;&#8221; eg &#8220;this&#8221;<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">string in double quotes honors the escape sequences. For eg if the string contains a \\n then while printing there will be a new line<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>using back quotes ` eg&nbsp; \\`this`<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">String in back quotes is just a raw string and it does not honor any kind of escape sequences.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Each character in a string will occupy some bytes depending upon encoding used. For eg in utf-8 encoded string, each character will occupy between 1-4 bytes. You can read about utf-8 in this must read famous blog-<a href=\"http:\/\/www.joelonsoftware.com\/articles\/Unicode.html\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)<\/a>. &nbsp; In utf-8 , the characters <strong>a<\/strong> or <strong>b <\/strong>are encoded using 1&nbsp; byte while the character pound sign <strong>\u00a3 <\/strong> is encoded using two bytes . Therefore the string &#8220;ab\u00a3&#8221; will output 4 bytes when you will convert the string to byte array and print it like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := \"ab\u00a3\"\nfmt.Println([]byte(s))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[48 98 194 163]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also when you try to print the length of the above string using <strong>len(&#8220;ab\u00a3&#8221;),<\/strong> it will output 4 and not 3 because it contains 4 bytes.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also note that <strong>range<\/strong> loops over sequences of byte which form each character, therefore for the below range loop <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for _, c := range s {\n   fmt.Println(string(c))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Output will be <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\n\u00a3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">There are many operations that can be performed on a string. One such operation is concatenation which combines two string. The sign &#8216;+&#8217; is used for concatenation.  Let&#8217;s see full working&nbsp; code for all above things that we discussed<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    \/\/String in double quotes\n    x := \"this\\nthat\"\n    fmt.Printf(\"x is: %s\\n\", x)\n    \n    \/\/String in back quotes\n    y := `this\\nthat`\n    fmt.Printf(\"y is: %s\\n\", y)\n    s := \"ab\u00a3\"\n    \n    \/\/This will print the byte sequence. \n    \/\/Since character a and b occupies 1 byte each and \u00a3 character occupies 2 bytes. \n    \/\/The final output will 4 bytes\n    fmt.Println([]byte(s))\n    \n    \/\/The output will be 4 for same reason as above\n    fmt.Println(len(s))\n    \n    \/\/range loops over sequences of byte which form each character\n    for _, c := range s {\n        fmt.Println(string(c))\n    }\n    \n    \/\/Concatenation\n    fmt.Println(\"c\" + \"d\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">x is: this\nthat\ny is: this\\nthat\n[97 98 194 163]\n4\na\nb\n\u00a3\ncd<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Booleans\"><\/span><strong>Booleans<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The data type is <strong>bool <\/strong>and has two possible values true or false. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Default Value: false<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Operations: <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>AND &#8211; &amp;&amp;<\/li><li>OR&nbsp; &#8211; ||<\/li><li>Negation &#8211; !<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example shows <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If not initialized the default value is <strong>false<\/strong><\/li><li>All the above operations on the bool <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Default value will be false it not initialized\n    var a bool\n    fmt.Printf(\"a's value is %t\\n\", a)\n    \n    \/\/And operation on one true and other false\n    andOperation := 1 < 2 &#038;&#038; 1 > 3\n    fmt.Printf(\"Ouput of AND operation on one true and other false %t\\n\", andOperation)\n    \n    \/\/OR operation on one true and other false\n    orOperation := 1 < 2 || 1 > 3\n    fmt.Printf(\"Ouput of OR operation on one true and other false: %t\\n\", orOperation)\n    \n    \/\/Negation Operation on a false value\n    negationOperation := !(1 > 2)\n    fmt.Printf(\"Ouput of NEGATION operation on false value: %t\\n\", negationOperation)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a's value is false\nOuput of AND operation on one true and other false false\nOuput of OR operation on one true and other false: true\nOuput of NEGATION operation on false value: true<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Composite_Types\"><\/span><strong>Composite Types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Non-Reference_Types\"><\/span><strong>Non-Reference Types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Arrays\"><\/span><strong>Arrays<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Arrays<strong>&nbsp;<\/strong>in go are values. They are fixed-length sequences of the same type. Since arrays in Go are values, that is why<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When you assign an array to another variable, it copies the entire array <\/li><li>When you pass an array as an argument to a function, it makes an entire copy of the array instead of passing just the address<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">An array is declared as below. Assume N is the size of the array<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>Specifying size&nbsp; and values both<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">newArray := [n]Type{val1, val2, val3}<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\"><li>Specifying size&nbsp; &#8211; No values. Values are set to default zero value of that type<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">newArray := [len]Type{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As we said arrays have fixed length. Therefore<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We cannot assign an array to a different array of the same type but different length<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>When you pass an array as a function argument, then size is also part of it.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of array. Below example<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Illustrates how to declare an array<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Pass array as a function argument<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare a array\n    sample := [3]string{\"a\", \"b\", \"c\"}\n    print(sample)\n}\n\nfunc print(sample [3]string) {\n    fmt.Println(sample)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[a b c]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Structs\"><\/span><strong>Structs<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">In GO struct is named collection of fields. These fields can be of different types. Struct acts as a container of related data of heterogeneous data type. For example, different attributes are used to represent and employee in an organization. Employee can have<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Name of string type<\/li><li>Age of int type<\/li><li>DOB of time.Time type <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">.. and so on. A struct can be used to represent an employee <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n    name string\n    age  int\n    dob  time.Time\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The below program depicts<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a struct<\/li><li>Initializing a struct in different ways<\/li><li>Size of a struct is the sum of the size of its fields<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n)\n\/\/Declare a struct\ntype employee struct {\n    name   string\n    age    int\n    salary float64\n}\nfunc main() {\n    \/\/Initialize a struct without named fields\n    employee1 := employee{\"John\", 21, 1000}\n    fmt.Println(employee1)\n    \n    \/\/Initialize a struct with named fields\n    employee2 := employee{\n        name:   \"Sam\",\n        age:    22,\n        salary: 1100,\n    }\n    fmt.Println(employee2)\n    \n    \/\/Initializing only some fields. Other values are initialized to default zero value of that type\n    employee3 := employee{name: \"Tina\", age: 24}\n    fmt.Println(employee3)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{John 21 1000}\n{Sam 22 1100}\n{Tina 24 0}<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Reference_Types\"><\/span><strong>Reference Types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<h3 class=\"has-vivid-purple-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Slices\"><\/span><strong>Slices<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Slices are dynamically sized, reference into the elements of an array. As mentioned above arrays are of fixed size, so slices give a more flexible interface to arrays. A slice is a reference type as it internally references an array. It is internally represented by three fields<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Address to the underlying array<\/li><li>Length of the slice<\/li><li>Capacity of the slice<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Slices are typed by the type of the underlying array element, not by its length or capacity. Thus two slices will be of the same type if the type of the underlying array is same irrespective of its length and capacity. The built in <strong>append<\/strong> function can be used to add more values to the underlying array. If on using <strong>append <\/strong>function the length of the slice increases by current capacity, then a new slice is allocated of double the capacity and elements of the current slice are copied to that. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">The built in function <strong>len<\/strong> can you used to get the current length of the sliceInitialising a slice<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using make &#8211; it helps you create a slice specifying the type of array, its length and capacity. Specifying length and capacity is optional. If length is specified and capacity is not, then capacity will be equal to length<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">make([]TYPE, length, capacity)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Direct initialization. The below example creates a slice of string.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">p := []string{\"a\", \"b\", \"c\"}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Slices can be also be created from an array or from a different slice.<\/p>\n\n\n\n<p>Below is a program showing an example of a slice showing<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a slice using the above ways<\/li><li>Showing append function<\/li><li>How to iterate over a slice<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare a slice using make\n    s := make([]string, 2, 3)\n    fmt.Println(s)\n    \n    \/\/Direct intialization\n    p := []string{\"a\", \"b\", \"c\"}\n    fmt.Println(p)\n    \n    \/\/Append function\n    p = append(p, \"d\")\n    fmt.Println(p)\n    \n    \/\/Iterate over a slcie\n    for _, val := range p {\n        fmt.Println(val)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[ ]\n[a b c]\n[a b c d]\na\nb\nc\nd<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Channels\"><\/span><strong>Channels<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Channels provide synchronization and communication between goroutines. You can think of it as a pipe through which goroutines can send values and receive values. The operation &lt;- is used to send or receive, with direction of arrow specifying the direction of flow of data<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">ch <- val    \/\/Sending a value present in var variable to channel\nval := <-cha  \/\/Receive a value from  the channel and assign it to val variable<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Channel are of two types<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Unbuffered Channel<\/strong>- It doesn't have any capacity to hold and values and thus <ul><li>Send on a channel is block unless there is another goroutine to receive.<\/li><li>Receive is block until there is another goroutine on the other side to send.<\/li><\/ul><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Buffered Channel- <\/strong>You can specify the size of buffer here and for them<ul><li>Send on a buffer channel only blocks if the buffer is full<\/li><li>Receive is the only block is buffer of the channel is empty<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">A&nbsp; channel holds data of a particular type at a time. While creating a channel, the type of data l has to be specified while initializing a new channel. Channel can be created using make. In the below example, we are creating a channel which holds data of type string. <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">events := make(chan string)  \/\/Unbuffered channel\nevents2 := make(chan string, 2)  \/\/Buffered channel of length 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Closing a channel<\/p>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>close() <\/strong>function can be used to close a channel. Closing a channel means that no more values can be sent to the channel<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let's see a working code example of both buffered and unbuffered channel<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Buffered Channel Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Creating a buffered channel of length 3\n    eventsChan := make(chan string, 3)\n    eventsChan <- \"a\"\n    eventsChan <- \"b\"\n    eventsChan <- \"c\"\n    \/\/Closing the channel\n    close(eventsChan)\n    for event := range eventsChan {\n        fmt.Println(event)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\nc<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>UnBuffered Channel Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    eventsChan := make(chan string)\n    go sendEvents(eventsChan)\n    for event := range eventsChan {\n        fmt.Println(event)\n    }\n}\n\nfunc sendEvents(eventsChan chan<- string) {\n    eventsChan <- \"a\"\n    eventsChan <- \"b\"\n    eventsChan <- \"c\"\n    close(eventsChan)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\nc<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Maps\"><\/span><strong>Maps<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">maps are golang builtin datatype similar to a hash which map key to a value. maps are referenced data types. When you assign one map to another both refer to the same underlying map.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Zero Value<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">zero value of a map is nil<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Declare<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A map can be declared using the var keyword specifying the type of both it's key and value. For eg below map declares a map with the name <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var employeeSalary map[string]int<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Initialize<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using make<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var employeeSalary make(map[string]int)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using curly braces. You can specify map literal value in the map or can also leave empty curly braces<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">\/\/Empty braces\nemployeeSalary := map[string]int{}\n\n\/\/Specify values\nemployeeSalary := map[string]int{\n\"John\": 1000\n\"Sam\": 2000\n} <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Operations<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Add to a map <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employeeSalary[\"John\"] = 1000<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Get from a map<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">salary := employeeSalary[\"John\"]<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Delete a key from the map<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">delete(employeeSalary, \"John\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below example shows all the points we discussed above<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    var employeeSalary map[string]int\n    fmt.Println(employeeSalary)\n    \n    \/\/Intialize using make\n    employeeSalary2 := make(map[string]int)\n    fmt.Println(employeeSalary2)\n    \n    \/\/Intialize using map lieteral\n    employeeSalary3 := map[string]int{\n        \"John\": 1000,\n        \"Sam\":  1200,\n    }\n    fmt.Println(employeeSalary3)\n    \n    \/\/Operations\n    \/\/Add\n    employeeSalary3[\"Carl\"] = 1500\n    \n    \/\/Get\n    fmt.Printf(\"John salary is %d\\n\", employeeSalary3[\"John\"])\n    \n    \/\/Delete\n    delete(employeeSalary3, \"Carl\")\n    \n    \/\/Print map\n    fmt.Println(\"\\nPrinting employeeSalary3 map\")\n    fmt.Println(employeeSalary3)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">map[]\nmap[]\nmap[John:1000 Sam:1200]\nJohn salary is 1000\n\nPrinting employeeSalary3 map\nmap[John:1000 Sam:1200]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Pointers\"><\/span><strong>Pointers<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Pointer is a variable that holds a memory address of another variable. The zero value of a pointer is nil.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Declare a pointer <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In the below example ex is int pointer.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var ex *int<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Initialize<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>&amp;&nbsp; <\/strong>used to get the address of a variable<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a := 2\nb := &b<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">* operator can be used to dereference a pointer which means getting the value at address stored in the pointer.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(*b) \/\/Print the value stored at address b <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Pointers can also be initialized using <strong>new <\/strong>operator<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a := new(int)\n*a = 10\nfmt.Println(*a) \/\/Output will be 10<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let's see a working code covering all the above points<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Declare\n    var b *int\n    a := 2\n    b = &a\n    \n    \/\/Will print a address. Output will be different everytime.\n    fmt.Println(b)\n    fmt.Println(*b)\n    b = new(int)\n    *b = 10\n    fmt.Println(*b) \n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">0xc000018080\n2\n10<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Functions\"><\/span><strong>Functions<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">In Go function are values and can be passed around like a value. Basically, function can be used as first-order objects and can be passed around.&nbsp; The signature of a function is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func some_func_name(arguments) return_values<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">A function has a name, arguments and returns values. Also, note that there are some important differences between method and function in Go. Let's see the signature of a method<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Method:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (receiver receiver_type) some_func_name(arguments) return_values<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">From the above signature, it is clear that the method has a receiver argument. A receiver can be a struct or any other type. The method will have access to the properties of the receiver and can call the receiver's other methods.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is a working example of function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    add := func(x, y int) int {\n        return x + y\n    }\n    fmt.Println(add(1, 2))\n}\n\nfunc doOperation(fn func(int, int) int, x, y int) int {\n    return fn(x, y)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">3<\/code><\/pre>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Interface\"><\/span><strong>Interface<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Interface is a type in Go which is a collection of method signatures. Any type which implements all methods of the interface is of that interface type. Zero value of an interface is nil.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Signature of Interface<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type name_of_interface interface{\n\/\/Method signature 1\n\/\/Method signature 2\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Interface are implemented implicitly<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">There is no explicit declaration that a type implements an interface. In fact, in Go there doesn't exist any <strong>\"implements\" <\/strong>keyword similar to Java.&nbsp; A type implements an interface if it implements all the methods of the interface.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">It is correct to define a variable of an interface type and we can assign any concrete type value to this variable if the concrete type implements all the methods of the interface. Let's see a working example of interface. In the below program<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>We declare an interface of name shape with one method <strong>area<\/strong><\/li><li>square struct implements the area method, hence it implicitly implements the shape interface<\/li><li>we declare the variable of name \"s\" of type shape. <\/li><li>s is assigned a concrete value of type square. This works because square struct implements all methods of shape interface <\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype shape interface {\n    area() int\n}\n\ntype square struct {\n    side int\n}\n\nfunc (s *square) area() int {\n    return s.side * s.side\n}\n\nfunc main() {\n    var s shape\n    s = &square{side: 4}\n    fmt.Println(s.area())\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">16<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Special_case_of_empty_interface\"><\/span><strong>Special case of empty interface<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">An empty interface has no methods, hence by default all concrete types implement the empty interface. If you write a function that accepts an empty interface then you can pass any type to that function. See working code below:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    test(\"thisisstring\")\n    test(\"10\")\n    test(true)\n}\n\nfunc test(a interface{}) {\n    fmt.Printf(\"(%v, %T)\\n\", a, a)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">(thisisstring, string)\n(10, string)\n(true, bool)<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about the builtin data types that exist in Go. Hopefully by going through this article you will have better undertstanding of data types in Go.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Note: If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;Golang Comprehensive Tutorial Series. Now let&#8217;s see the current tutorial&#8230;.<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[117],"class_list":["post-1311","post","type-post","status-publish","format-standard","hentry","category-tech","tag-sidetoc"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>All data types in Golang with examples - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"All data types in Golang with examples - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Note: If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;Golang Comprehensive Tutorial Series. Now let&#8217;s see the current tutorial....\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-02-01T18:56:56+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-07-14T16:50:11+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"27 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/\",\"url\":\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/\",\"name\":\"All data types in Golang with examples - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-02-01T18:56:56+00:00\",\"dateModified\":\"2022-07-14T16:50:11+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"All data types in Golang with examples\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"All data types in Golang with examples - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/","og_locale":"en_US","og_type":"article","og_title":"All data types in Golang with examples - Welcome To Golang By Example","og_description":"Note: If you are interested in learning Golang, then for that we have a golang comprehensive tutorial series. Do check it out \u2013&nbsp;Golang Comprehensive Tutorial Series. Now let&#8217;s see the current tutorial....","og_url":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-02-01T18:56:56+00:00","article_modified_time":"2022-07-14T16:50:11+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"27 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/","url":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/","name":"All data types in Golang with examples - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-02-01T18:56:56+00:00","dateModified":"2022-07-14T16:50:11+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/all-data-types-in-golang-with-examples\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"All data types in Golang with examples"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-l9","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1311","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=1311"}],"version-history":[{"count":42,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1311\/revisions"}],"predecessor-version":[{"id":8012,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1311\/revisions\/8012"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=1311"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=1311"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=1311"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}