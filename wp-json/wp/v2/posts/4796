{"id":4796,"date":"2020-12-25T15:31:10","date_gmt":"2020-12-25T10:01:10","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4796"},"modified":"2020-12-25T20:48:18","modified_gmt":"2020-12-25T15:18:18","slug":"base64-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/base64-golang\/","title":{"rendered":"Base64 encoding\/Decoding in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/base64-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/base64-golang\/#StdEncoding\" title=\"StdEncoding\">StdEncoding<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/base64-golang\/#URLEncoding\" title=\"URLEncoding\">URLEncoding<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/base64-golang\/#RawStdEncoding\" title=\"RawStdEncoding\">RawStdEncoding<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/base64-golang\/#RawURLEncoding\" title=\"RawURLEncoding\">RawURLEncoding<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Golang provides an <strong>encoding\/base64<\/strong> package that can be used to encode strings to base64 and decode the base64 encoded string back to the original string. <a href=\"https:\/\/golang.org\/pkg\/encoding\/base64\/\">https:\/\/golang.org\/pkg\/encoding\/base64\/<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Go supports base64 in 4 different ways.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>StdEncoding<\/strong>&#8211; Standard 64 characters with padding. It encodes into below characters<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>URLEncoding<\/strong> &#8211;\u00a0 Same as StdEncoding just that in this, the <strong>&#8216;+&#8217;<\/strong> and <strong>&#8216;\\&#8217;<\/strong> sign is replaced with <strong>&#8216;-&#8216;<\/strong> and <strong>&#8216;_&#8217;<\/strong>. They are replaced to make them compatible with filenames and URLs. Below is the character set for base64 URL encoding<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>RawStdEncoding<\/strong> &#8211; This is the same as StdEncoding just that it omits padding characters.\u00a0 So it is unpadded base64\u00a0 STD encoding.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>RawURLEncoding<\/strong> &#8211; This is also the same as URL encoding just that it omits padding characters. So it is unpadded base64 URL encoding.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Each of the above encodings is represented by the Encoding struct<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/encoding\/base64\/#Encoding\">https:\/\/golang.org\/pkg\/encoding\/base64\/#Encoding<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Encoding struct further defines two methods for encoding and decoding<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>EncodeToString<\/strong> &#8211; Below is the signature of the method. It takes bytes as an input and returns the base64 encoded string depending upon which one of the above 4 encodings is used.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (enc *Encoding) EncodeToString(src []byte) string<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>DecodeString<\/strong> &#8211; Below is the signature of the method. It takes the encoded string as an input and returns the original string depending upon which one of the above 4 encodings is used.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func (enc *Encoding) DecodeString(s string) ([]byte, error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a detailed example of each<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"StdEncoding\"><\/span><strong>StdEncoding<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is the standard base64 encoding which is defined in RFC 4648. It uses the below 64 characters set along with padding character <strong>&#8216;=&#8217;.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">Value Encoding  Value Encoding  Value Encoding  Value Encoding\n         0 A            17 R            34 i            51 z\n         1 B            18 S            35 j            52 0\n         2 C            19 T            36 k            53 1\n         3 D            20 U            37 l            54 2\n         4 E            21 V            38 m            55 3\n         5 F            22 W            39 n            56 4\n         6 G            23 X            40 o            57 5\n         7 H            24 Y            41 p            58 6\n         8 I            25 Z            42 q            59 7\n         9 J            26 a            43 r            60 8\n        10 K            27 b            44 s            61 9\n        11 L            28 c            45 t            62 +\n        12 M            29 d            46 u            63 \/\n        13 N            30 e            47 v\n        14 O            31 f            48 w         (pad) =\n        15 P            32 g            49 x\n        16 Q            33 h            50 y<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of this<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"encoding\/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tsample := \"a@\"\n\tencodedString := base64.StdEncoding.EncodeToString([]byte(sample))\n\tfmt.Println(encodedString)\n\n\toriginalStringBytes, err := base64.StdEncoding.DecodeString(encodedString)\n\tif err != nil {\n\t\tlog.Fatalf(\"Some error occured during base64 decode. Error %s\", err.Error())\n\t}\n\tfmt.Println(string(originalStringBytes))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">YUA=\na@<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that in the above example we are encoding the below string using base64 Std encoding<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample := \"a@\"\nencodedString := base64.StdEncoding.EncodeToString([]byte(sample))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we are decoding the base64 encoded string back to the original string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">originalStringBytes, err := base64.StdEncoding.DecodeString(encodedString)\nif err != nil {\n\tlog.Fatalf(\"Some error occured during base64 decode. Error %s\", err.Error())\n}\nfmt.Println(string(originalStringBytes))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">It correctly outputs the original string back on decoding<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"URLEncoding\"><\/span><strong>URLEncoding<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">In this, the <strong>&#8216;+&#8217;<\/strong> and <strong>&#8216;\\&#8217;<\/strong> sign is replaced with <strong>&#8216;-&#8216;<\/strong> and <strong>&#8216;_&#8217;<\/strong>. They are replaced to make them compatible with filenames and URLs.\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>URL<\/strong>: In URLs <strong>&#8216;+&#8217;<\/strong> and <strong>&#8216;\\&#8217;<\/strong>\u00a0 are further encoded into hexadecimal sequences due to URL encoding thereby further increasing the length of the URL. For eg <strong>&#8216;+&#8217;<\/strong> will be converted to &#8216;%2B&#8217; and <strong>&#8216;\\&#8217;<\/strong> will be encoded to &#8216;%2F&#8217; in the URL encoding.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Filenames<\/strong>:\u00a0 <strong>&#8216;\\&#8217;<\/strong> is used in file paths in both Unix and Windows. Hence it &#8216;\\&#8217; is replaced with <strong>&#8216;_&#8217;<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"encoding\/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tsample := \"\ufffd\"\n\n\tencodedStringURL := base64.URLEncoding.EncodeToString([]byte(sample))\n\tfmt.Printf(\"URL Encoding: %s\\n\", encodedStringURL)\n\tencodedStringSTD := base64.StdEncoding.EncodeToString([]byte(sample))\n\tfmt.Printf(\"STD Encoding: %s\\n\", encodedStringSTD)\n\n\toriginalStringBytes, err := base64.URLEncoding.DecodeString(encodedStringURL)\n\tif err != nil {\n\t\tlog.Fatalf(\"Some error occured during base64 decode. Error %s\", err.Error())\n\t}\n\tfmt.Println(string(originalStringBytes))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">URL Encoding: 77-9\nSTD Encoding: 77+9\n\ufffd<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that in the above example we have taken the example of the below string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">sample := \"\ufffd\"<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we are printing both the StdEncoding as well as URL Encoding of the above string<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">encodedStringURL := base64.URLEncoding.EncodeToString([]byte(sample))\nfmt.Printf(\"URL Encoding: %s\\n\", encodedStringURL)\nencodedStringSTD := base64.StdEncoding.EncodeToString([]byte(sample))\nfmt.Printf(\"STD Encoding: %s\\n\", encodedStringSTD)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice the difference in output<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For URL encoding it prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">77-9<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">while for STD encoding, it prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">77+9<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is because <strong>&#8216;+&#8217;<\/strong> is present in STD encoding but in URL encoding <strong>&#8216;+&#8217;<\/strong> is replaced with <strong>&#8216;-&#8216;<\/strong><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"RawStdEncoding\"><\/span><strong>RawStdEncoding<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is the same as StdEncoding just that it omits padding characters.&nbsp; So it is unpadded STD base64 encoding. Let&#8217;s see an example. Before we see an example of Raw STD encoding we want to explain why the raw version of std encoding exists which omits padding characters.&nbsp; That brings a very important topic related to base64 encoding which is <strong>&#8216;Is padding necessary&#8217;. <\/strong>The answer is that it depends<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Padding is not necessary when you are sending a single string.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Padding is important when you are concatenating base64 encodings of multiple strings. If unpadded strings are concatenated then it will be impossible to get the original string as information about the bytes added will be lost. As an illustration, consider below<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-table is-style-stripes\"><table><tbody><tr><td><strong>Actual String<\/strong><\/td><td><strong>Base64 Encoded with Padding<\/strong><\/td><td><strong>Base64 Encoded without Padding<\/strong><\/td><\/tr><tr><td>a<\/td><td>YQ==<\/td><td>YQ<\/td><\/tr><tr><td>bc<\/td><td>YmM=<\/td><td>YmM<\/td><\/tr><tr><td>def<\/td><td>ZGVm<\/td><td>ZGVm<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s consider both cases.<\/p>\n\n\n\n<p style=\"font-size:28px\"><strong>When the concatenation is sent without padding<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In this case, the concatenated Base64 string will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">YQYmMZGVm<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Try decoding it and you will get the final string as below which is incorrect<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a&1<\/code><\/pre>\n\n\n\n<p style=\"font-size:28px\"><strong>When the concatenation is sent with padding<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In this case, the concatenated Base64 string will be<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">YQ==YmM=ZGVm<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Try decoding it in groups of 4 characters and you will get the final string as below which is correct<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">abcdef<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Now again the question that comes to mind is why do you need to concatenate multiple base64 encoded strings. The answer is that it is always good in cases where there is streaming data and you want to send the base64 encoded data as it comes. For example, buffering of video.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So that is why padding is encouraged though not absolutely not necessary in all cases. Now let&#8217;s see an example of Raw Std Encoding<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"encoding\/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tsample := \"a@\"\n\tencodedStringStdEncoding := base64.StdEncoding.EncodeToString([]byte(sample))\n\tfmt.Printf(\"STD Encoding: %s\\n\", encodedStringStdEncoding)\n\n\tencodedStringRawStdEncoding := base64.RawStdEncoding.EncodeToString([]byte(sample))\n\tfmt.Printf(\"Raw STD Encoding: %s\\n\", encodedStringRawStdEncoding)\n\n\toriginalStringBytes, err := base64.RawStdEncoding.DecodeString(encodedStringRawStdEncoding)\n\tif err != nil {\n\t\tlog.Fatalf(\"Some error occured during base64 decode. Error %s\", err.Error())\n\t}\n\tfmt.Println(string(originalStringBytes))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">STD Encoding: YUA=\nRaw STD Encoding: YUA\na@<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example we are printing both the result of both <strong>StdEncoding<\/strong> as well as <strong>RawStdEncoding<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">encodedStringStdEncoding := base64.StdEncoding.EncodeToString([]byte(sample))\nfmt.Printf(\"STD Encoding: %s\\n\", encodedStringStdEncoding)\n\nencodedStringRawStdEncoding := base64.RawStdEncoding.EncodeToString([]byte(sample))\nfmt.Printf(\"Raw STD Encoding: %s\\n\", encodedStringRawStdEncoding)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice the difference in output<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For STD encoding it prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">YUA=<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">while for Raw STD encoding, it prints<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">YUA<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As you can notice that RAW STD Encoding omits padding characters.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"RawURLEncoding\"><\/span><strong>RawURLEncoding<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is also the same as URL encoding just that it omits padding characters. So it is unpadded STD base64 encoding.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"encoding\/base64\"\n    \"fmt\"\n    \"log\"\n)\nfunc main() {\n    sample := \"a@\"\n    encodedStringURLEncoding := base64.URLEncoding.EncodeToString([]byte(sample))\n    fmt.Printf(\"URL Encoding: %s\\n\", encodedStringURLEncoding)\n\n    encodedStringRawURLEncoding := base64.RawURLEncoding.EncodeToString([]byte(sample))\n    fmt.Printf(\"Raw URL Encoding: %s\\n\", encodedStringRawURLEncoding)\n\n    originalStringBytes, err := base64.RawStdEncoding.DecodeString(encodedStringRawURLEncoding)\n    if err != nil {\n        log.Fatalf(\"Some error occured during base64 decode. Error %s\", err.Error())\n    }\n    fmt.Println(string(originalStringBytes))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">\u00a0<strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">URL Encoding: YUA=\nRaw URL Encoding: YUA\na@<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above example, we are again printing the result of both URL encoding and as well as RAW URL encoding and you can notice that padding character <strong>&#8216;=&#8217; <\/strong>is omitted in the Raw URL encoding.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewStdEncodingURLEncodingRawStdEncodingRawURLEncoding Overview Golang provides an encoding\/base64 package that can be used to encode strings to base64 and decode the base64 encoded string back to the original string. https:\/\/golang.org\/pkg\/encoding\/base64\/ Go&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[],"class_list":["post-4796","post","type-post","status-publish","format-standard","hentry","category-tech"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Base64 encoding\/Decoding in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/base64-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Base64 encoding\/Decoding in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewStdEncodingURLEncodingRawStdEncodingRawURLEncoding Overview Golang provides an encoding\/base64 package that can be used to encode strings to base64 and decode the base64 encoded string back to the original string. https:\/\/golang.org\/pkg\/encoding\/base64\/ Go...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/base64-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-12-25T10:01:10+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-12-25T15:18:18+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/base64-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/base64-golang\/\",\"name\":\"Base64 encoding\/Decoding in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-12-25T10:01:10+00:00\",\"dateModified\":\"2020-12-25T15:18:18+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/base64-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/base64-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/base64-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Base64 encoding\/Decoding in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Base64 encoding\/Decoding in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/base64-golang\/","og_locale":"en_US","og_type":"article","og_title":"Base64 encoding\/Decoding in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewStdEncodingURLEncodingRawStdEncodingRawURLEncoding Overview Golang provides an encoding\/base64 package that can be used to encode strings to base64 and decode the base64 encoded string back to the original string. https:\/\/golang.org\/pkg\/encoding\/base64\/ Go...","og_url":"https:\/\/golangbyexamples.com\/base64-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-12-25T10:01:10+00:00","article_modified_time":"2020-12-25T15:18:18+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/base64-golang\/","url":"https:\/\/golangbyexamples.com\/base64-golang\/","name":"Base64 encoding\/Decoding in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-12-25T10:01:10+00:00","dateModified":"2020-12-25T15:18:18+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/base64-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/base64-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/base64-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Base64 encoding\/Decoding in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1fm","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4796","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4796"}],"version-history":[{"count":4,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4796\/revisions"}],"predecessor-version":[{"id":4803,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4796\/revisions\/4803"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4796"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4796"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4796"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}