{"id":2363,"date":"2020-06-21T02:11:47","date_gmt":"2020-06-20T20:41:47","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=2363"},"modified":"2020-06-21T02:15:05","modified_gmt":"2020-06-20T20:45:05","slug":"short-variable-declaration-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/","title":{"rendered":"Understanding := symbol or short variable declaration in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">Go provides another way of declaring variables which is using the <strong>:=<\/strong> operator. When <strong>:=<\/strong> operator is used both <strong>var <\/strong>keyword and type info can be omitted. Below is the format for such declaration<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{var_name} := {value}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Type inference will happen based upon the type of value. Also please refer to this article for details on type inference. Let&#8217;s see a working example. In below code<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Type of <strong>m2<\/strong> is correctly inferred as <strong>int<\/strong> as value assigned to it is 123 which is <strong>int<\/strong>.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Similarly, type of n2 is also correctly inferred as string as the value assigned to it is <strong>&#8220;circle&#8221;<\/strong> which is a <strong>string<\/strong> and so on.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Also notice that the type of variable <strong>t2<\/strong> is inferred correctly as a struct <strong>main.sample<\/strong><\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Type of <strong>u2<\/strong> is also correctly inferred as<strong> []string <\/strong>as this is type returned by the <strong>get()<\/strong> function call.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    m2 := 123                   \/\/Type Inferred will be int\n    n2 := \"circle\"              \/\/Type Inferred will be string\n    o2 := 5.6                   \/\/Type Inferred will be float64\n    p2 := true                  \/\/Type Inferred will be bool\n    q2 := 'a'                   \/\/Type Inferred will be rune\n    r2 := 3 + 5i                \/\/Type Inferred will be complex128\n    s2 := &sample{name: \"test\"} \/\/Type Inferred will be pointer to main.sample\n    t2 := sample{name: \"test\"}  \/\/Type Inferred will be main.sample\n    u2 := get()                 \/\/Type inferred will []string as that is the return value of function get()\n\n    fmt.Println(\"\")\n    fmt.Printf(\"m2: Type: %T Value: %v\\n\", m2, m2)\n    fmt.Printf(\"n2: Type: %T Value: %v\\n\", n2, n2)\n    fmt.Printf(\"o2: Type: %T Value: %v\\n\", o2, o2)\n    fmt.Printf(\"p2: Type: %T Value: %v\\n\", p2, p2)\n    fmt.Printf(\"q2: Type: %T Value: %v\\n\", q2, q2)\n    fmt.Printf(\"r2: Type: %T Value: %v\\n\", r2, r2)\n    fmt.Printf(\"s2: Type: %T Value: %v\\n\", s2, s2)\n    fmt.Printf(\"t2: Type: %T Value: %v\\n\", t2, t2)\n    fmt.Printf(\"u2: Type: %T Value: %v\\n\", u2, u2)\n}\n\ntype sample struct {\n    name string\n}\n\nfunc get() []string {\n    return []string{\"a\", \"b\"}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">m2: Type: int Value: 123\nn2: Type: string Value: circle\no2: Type: float64 Value: 5.6\np2: Type: bool Value: true\nq2: Type: int32 Value: 97\nr2: Type: complex128 Value: (3+5i)\ns2: Type: *main.sample Value: &{test}\nt2: Type: main.sample Value: {test}\nu2: Type: []string Value: [a b]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Some points to be noted about the := operator<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>:= operator is only available within a function. It is not allowed outside the function.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A variable once declared using := cannot be redeclared using the := operator. So the below statement will raise a compiler error \u00a0&#8220;<strong>no new variables in the left side of\u00a0:=&#8221;.<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a := 8\na := 16<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>:= operator can also be used to declare multiple variables in a single line. See below example<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">a,b := 1, 2<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>In the case of multiple declarations, := can also be used again for a particular variable if at least one of the variables on the left-hand side is new. See the below example. Notice that b is again declared using := This is only possible if at least one of the variables is new which is variable <strong>c<\/strong> here. In this case it acts as a assignment for variable <strong>b<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    a, b := 1, 2\n    b, c := 3, 4\n    fmt.Println(a, b, c)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">1, 3, 4<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Go provides another way of declaring variables which is using the := operator. When := operator is used both var keyword and type info can be omitted. Below is the format for&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-2363","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understanding := symbol or short variable declaration in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understanding := symbol or short variable declaration in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Go provides another way of declaring variables which is using the := operator. When := operator is used both var keyword and type info can be omitted. Below is the format for...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-20T20:41:47+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-06-20T20:45:05+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/\",\"name\":\"Understanding := symbol or short variable declaration in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-06-20T20:41:47+00:00\",\"dateModified\":\"2020-06-20T20:45:05+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understanding := symbol or short variable declaration in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understanding := symbol or short variable declaration in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/","og_locale":"en_US","og_type":"article","og_title":"Understanding := symbol or short variable declaration in Go (Golang) - Welcome To Golang By Example","og_description":"Go provides another way of declaring variables which is using the := operator. When := operator is used both var keyword and type info can be omitted. Below is the format for...","og_url":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-06-20T20:41:47+00:00","article_modified_time":"2020-06-20T20:45:05+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/","url":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/","name":"Understanding := symbol or short variable declaration in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-06-20T20:41:47+00:00","dateModified":"2020-06-20T20:45:05+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/short-variable-declaration-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/short-variable-declaration-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understanding := symbol or short variable declaration in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-C7","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2363","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=2363"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2363\/revisions"}],"predecessor-version":[{"id":2367,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/2363\/revisions\/2367"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=2363"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=2363"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=2363"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}