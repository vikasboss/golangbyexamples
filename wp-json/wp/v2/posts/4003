{"id":4003,"date":"2020-09-20T23:37:34","date_gmt":"2020-09-20T18:07:34","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4003"},"modified":"2021-07-10T13:17:17","modified_gmt":"2021-07-10T07:47:17","slug":"panic-and-recover-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/","title":{"rendered":"Panic and Recover in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the&nbsp; chapter 28 and also the last chapter of the golang comprehensive tutorial series. This is Refer to this link for other chapters of the series \u2013&nbsp;<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\">Error -Part 2<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Runtime_Error_Panic\" title=\"Runtime Error Panic\">Runtime Error Panic<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Calling_the_panic_function_explicitly\" title=\"Calling the panic function explicitly\">Calling the panic function explicitly<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Panic_with_defer\" title=\"Panic with&nbsp;defer\">Panic with&nbsp;defer<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Recover_in_golang\" title=\"Recover in golang\">Recover in golang<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#PanicRecover_and_Goroutine\" title=\"Panic\/Recover and Goroutine\">Panic\/Recover and Goroutine<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Printing_stack_trace\" title=\"Printing stack trace\">Printing stack trace<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Return_value_of_the_function_when_panic_is_recovered\" title=\"Return value of the function when panic is recovered\">Return value of the function when panic is recovered<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Panic in golang is similar to the exception. Panic is meant to exit from a program in abnormal conditions. Panic can occur in a program in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Runtime error in the program<\/li><li>By calling the panic function explicitly. This can be called by the programmer when the program cannot continue and it has to exit<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Go provides a special function to create a panic. Below is the syntax of the function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func panic(v interface{})<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This function can be called explicitly by the programmer to create a panic. It takes an empty interface as an argument.&nbsp; When a panic happens in a&nbsp; program it outputs two things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The error message that is passed to the panic function as an&nbsp;argument<\/li><li>Stack trace of where the panic happened<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Runtime_Error_Panic\"><\/span><strong>Runtime Error Panic<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Runtime error in the program can happen in below cases<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Out of bounds array access<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Calling a function on a nil pointer<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Sending on a closed channel<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Incorrect type assertion<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of runtime error caused by out of bounds array access.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\ta := []string{\"a\", \"b\"}\n\tprint(a, 2)\n}\n\nfunc print(a []string, index int) {\n\tfmt.Println(a[index])\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">panic: runtime error: index out of range [2] with length 2\n\ngoroutine 1 [running]:\nmain.checkAndPrint(...)\n        main.go:12\nmain.main()\n        \/main.go:8 +0x1b\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have a slice of length 2 and we are trying to access slice at index 3 in the <strong>print<\/strong> function. Out of bound access is not allowed and&nbsp;it will create panic&nbsp;as seen from the output. Notice that in the output there are two things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The error message<\/li><li>Stack trace of where the panic happened<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">There are many more cases in which runtime error can happen in a program. We are not going to mention all of them but you get the idea<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Calling_the_panic_function_explicitly\"><\/span><strong>Calling the panic function explicitly<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Some of the cases where panic function can be called explicitly by the programmer are:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The function expected a valid argument but instead, a nil argument was supplied. In such a case, the program cannot continue and it will raise a panic for a nil argument passed<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Any other scenario in which the program cannot continue.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\ta := []string{\"a\", \"b\"}\n\tcheckAndPrint(a, 2)\n}\n\nfunc checkAndPrint(a []string, index int) {\n\tif index > (len(a) - 1) {\n\t\tpanic(\"Out of bound access for slice\")\n\t}\n\tfmt.Println(a[index])\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">panic: Out of bound access for slice\n\ngoroutine 1 [running]:\nmain.checkAndPrint(0xc000104f58, 0x2, 0x2, 0x2)\n      main.go:13 +0xe2\nmain.main()\n        main.go:8 +0x7d\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we again have a function <strong>checkAndPrint<\/strong> which accepts a slice as an argument and an index. Then it checks whether the index passed is greater than the length of slice minus 1. If it is, then it is out of bounds access for the slice so it panics. If not then it prints the value at that index. Again notice that in the output there are two things<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The error message<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Stack trace of where the panic happened<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Panic_with_defer\"><\/span><strong>Panic with&nbsp;defer<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">When the panic is raised in a function then the execution of that function is stopped and any deferred function will be executed. In fact deferred function of all the function calls in the stack will also be executed until all the functions have&nbsp; returned .At that time the program will exit and it will print the panic message<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So if a&nbsp; defer function is present it then it will be executed and the control will&nbsp;be&nbsp; returned back to the caller function which will again execute its defer function if present and the chain goes on until the program exists.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    defer fmt.Println(\"Defer in main\")\n    panic(\"Panic with Defer\")\n    fmt.Println(\"After painc in f2\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in main\npanic: Panic Create\n\ngoroutine 1 [running]:\nmain.main()\n        \/Users\/slohia\/go\/src\/github.com\/golang-examples\/articles\/tutorial\/panicRecover\/deferWithPanic\/main.go:7 +0x95\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have a defer function first and then we manually create the panic. As you can see from the output that defer function got executed as below line is printed in the output<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in main<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s understand what happens when panic happens in a program. Imagine a function call from <strong>main<\/strong> function to <strong>f1<\/strong> function to <strong>f2<\/strong> function<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>main<\/strong>-&gt;<strong>f1<\/strong>-&gt;<strong>f2<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let&#8217;s say that panic happens in function <strong>f2<\/strong> then below will be the sequence of events that will be happening<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Execution of <strong>f2<\/strong> will stop. Defer functions in <strong>f2<\/strong> will be executed if present. Control will return to the caller which is a function <strong>f1<\/strong>.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>f1<\/strong> function will behave in a similar way as if panic happened in that function and after that call will return to the caller which is <strong>main<\/strong> function. Note that if there are more functions in between then the process will continue up the stack in a similar way<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>main<\/strong> function will also behave as if panic happened in that function and after that, the program will crash<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Once the program crashes, it will print the panic message along with this stack trace<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    f1()\n}\nfunc f1() {\n    defer fmt.Println(\"Defer in f1\")\n    f2()\n    fmt.Println(\"After painc in f1\")\n}\nfunc f2() {\n    defer fmt.Println(\"Defer in f2\")\n    panic(\"Panic Demo\")\n    fmt.Println(\"After painc in f2\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in f2\nDefer in f1\npanic: Panic Demo\n\ngoroutine 1 [running]:\nmain.f2()\n        main.go:17 +0x95\nmain.f1()\n        main.go:11 +0x96\nmain.main()\n        main.go:6 +0x20\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, panic happened in the f2 function like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">panic(\"Panic Demo\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">the defer function in f2 is called after that and it prints the below message<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in f2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that as soon as the panic happens in the <strong>f2<\/strong> function, its execution stops therefore below line if <strong>f2<\/strong> never gets executed<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(\"After painc in f2\")<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Control returns to <strong>f1<\/strong> and it it has a defer function. The defer gets executed and it prints the below message.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Defer in f1<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Control returns to main function after that and then the program crashes.The output prints the panic message along with the entire stack trace from main to f1 to f2.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Recover_in_golang\"><\/span><strong>Recover in golang<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Go provides a built-in function <strong>recover<\/strong> for recovering from a panic. Below is the signature of this function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func recover() interface{}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We already learn above that <strong>defer<\/strong> function is the only function that is called after the <strong>panic<\/strong>. So it makes sense to put the <strong>recover<\/strong> function in the <strong>defer<\/strong> function only. If the <strong>recover <\/strong>function is not within the&nbsp;defer function then it will not stop <strong>panic<\/strong>.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of recover<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\ta := []string{\"a\", \"b\"}\n\tcheckAndPrint(a, 2)\n\tfmt.Println(\"Exiting normally\")\n}\n\nfunc checkAndPrint(a []string, index int) {\n\tdefer handleOutOfBounds()\n\tif index > (len(a) - 1) {\n\t\tpanic(\"Out of bound access for slice\")\n\t}\n\tfmt.Println(a[index])\n}\n\nfunc handleOutOfBounds() {\n\tif r := recover(); r != nil {\n\t\tfmt.Println(\"Recovering from panic:\", r)\n\t}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice\nExiting normally<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have a function <strong>checkAndPrint<\/strong> which checks and prints slice element at an index passed in the argument. If the index passed is greater than the length of the array&nbsp;then the program panics.&nbsp; We have added a defer function named <strong>handleOutIfBounds<\/strong> as well at the start of the function <strong>checkAndPrint<\/strong>.&nbsp; &nbsp;This function&nbsp; contains&nbsp; the&nbsp; call to recover function&nbsp;as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">if r := recover(); r != nil {\n    fmt.Println(\"Recovering from panic:\", r)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The <strong>recover<\/strong> function will catch the panic and we can also print the message from the panic.&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">After the recover function the program continues and the control returns to the called function which is&nbsp; <strong>main<\/strong> here. That is why we get output as<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Exiting normally<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The recover function returns the value which was passed\u00a0to the panic function. Therefore it is a good practice to check the return value of the recover function. If the return value is nil then panic did not happen and recover function was not called with the panic. That is why we have below code in the\u00a0 defer function <strong>handleOutofBounds<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">if r := recover(); r != nil <\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Here if <strong>r<\/strong> is nil then panic did not happened. So if there is no panic then call to recover will return nil<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Note that if&nbsp;the defer function and recover function is not called from the panicking function then it that case also panic can be recovered in the called function as well. Infact it is possible to recover from panic subsequently up in the chain of call stack. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example of this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    a := []string{\"a\", \"b\"}\n    checkAndPrintWithRecover(a, 2)\n    fmt.Println(\"Exiting normally\")\n}\nfunc checkAndPrintWithRecover(a []string, index int) {\n    defer handleOutOfBounds()\n    checkAndPrint(a, 2)\n}\nfunc checkAndPrint(a []string, index int) {\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    fmt.Println(a[index])\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice\nExiting normally<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The above program is quite the same as the previous program other than we have an additional function <strong>checkAndPrintWithRecover <\/strong>which contains the call to&nbsp;<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>defer function with recover which is <strong>handleOutOfBounds<\/strong><\/li><li>calls&nbsp;<strong>checkAndPrint <\/strong>function<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong><\/strong>So basically <strong>checkAndPrint<\/strong> function raises the panic but doesn&#8217;t have the recover function instead call to recover lies in the <strong>checkAndPrintWithRecover <\/strong>function. But still the program is able to recover from panic&nbsp; as panic can also be recovered in the called function also and subsequently in the chain as well<\/p>\n\n\n\n<p class=\"has-medium-font-size\">We mentioned above that if the recover function is not within defer function then it will not stop the panic. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see an example program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\ta := []string{\"a\", \"b\"}\n\tcheckAndPrint(a, 2)\n\tfmt.Println(\"Exiting normally\")\n}\n\nfunc checkAndPrint(a []string, index int) {\n\thandleOutOfBounds()\n\tif index > (len(a) - 1) {\n\t\tpanic(\"Out of bound access for slice\")\n\t}\n\tfmt.Println(a[index])\n}\n\nfunc handleOutOfBounds() {\n\tif r := recover(); r != nil {\n\t\tfmt.Println(\"Recovering from panic:\", r)\n\t}\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">panic: Out of bound access for slice\n\ngoroutine 1 [running]:\nmain.checkAndPrint(0xc000104f58, 0x2, 0x2, 0x2)\n        \/Users\/slohia\/go\/src\/github.com\/golang-examples\/articles\/tutorial\/panicRecover\/recoverNegativeExample\/main.go:15 +0xea\nmain.main()\n        \/Users\/slohia\/go\/src\/github.com\/golang-examples\/articles\/tutorial\/panicRecover\/recoverNegativeExample\/main.go:8 +0x81\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program the&nbsp;recover function&nbsp; is not within defer function.&nbsp; as you can see from the output that it does not stop panic and hence&nbsp; you see the above output<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"PanicRecover_and_Goroutine\"><\/span><strong>Panic\/Recover and Goroutine<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">An important point to note about be recover function is that it can only recover the panic happening in the same goroutine.&nbsp; If the panic is happening in&nbsp;different&nbsp; goroutine and recover&nbsp;is in a different goroutine then it won&#8217;t stop&nbsp; panic. Lets see a program for that<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    a := []string{\"a\", \"b\"}\n    checkAndPrintWithRecover(a, 2)\n    time.Sleep(time.Second)\n    fmt.Println(\"Exiting normally\")\n}\nfunc checkAndPrintWithRecover(a []string, index int) {\n    defer handleOutOfBounds()\n    go checkAndPrint(a, 2)\n}\nfunc checkAndPrint(a []string, index int) {\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    fmt.Println(a[index])\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Exiting normally\npanic: Out of bound access for slice\n\ngoroutine 18 [running]:\nmain.checkAndPrint(0xc0000a6020, 0x2, 0x2, 0x2)\n        \/Users\/slohia\/go\/src\/github.com\/golang-examples\/articles\/tutorial\/panicRecover\/goroutine\/main.go:19 +0xe2\ncreated by main.checkAndPrintWithRecover\n        \/Users\/slohia\/go\/src\/github.com\/golang-examples\/articles\/tutorial\/panicRecover\/goroutine\/main.go:14 +0x82\nexit status 2<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have <strong>checkAndPrint<\/strong> in the goroutine&nbsp;and it raises&nbsp;<strong>panic<\/strong> in that goroutine.&nbsp; The <strong>recover<\/strong> function is in the calling goroutine. As you can see from the output that it does not stop <strong>panic<\/strong> and hence&nbsp; you see the above output<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Printing_stack_trace\"><\/span><strong>Printing stack trace<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Debug package of golang also provide StackTrace function that can be used print the stack trace of the panic in the&nbsp;recover function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"runtime\/debug\"\n)\nfunc main() {\n    a := []string{\"a\", \"b\"}\n    checkAndPrint(a, 2)\n    fmt.Println(\"Exiting normally\")\n}\nfunc checkAndPrint(a []string, index int) {\n    defer handleOutOfBounds()\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    fmt.Println(a[index])\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n        fmt.Println(\"Stack Trace:\")\n        debug.PrintStack()\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice\nStack Trace:\ngoroutine 1 [running]:\nruntime\/debug.Stack(0xd, 0x0, 0x0)\n        stack.go:24 +0x9d\nruntime\/debug.PrintStack()\n        stack.go:16 +0x22\nmain.handleOutOfBounds()\n        main.go:27 +0x10f\npanic(0x10ab8c0, 0x10e8f60)\n        \/Users\/slohia\/Documents\/goversion\/go1.14.1\/src\/runtime\/panic.go:967 +0x166\nmain.checkAndPrint(0xc000104f58, 0x2, 0x2, 0x2)\n        main.go:18 +0x111\nmain.main()\n        main.go:11 +0x81\nExiting normally<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we print the stack trace of the panic in the recover function using the <strong>StackTrace<\/strong> function. It prints the correct&nbsp; stack trace as seen from the output<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Return_value_of_the_function_when_panic_is_recovered\"><\/span><strong>Return value of the function when panic is recovered<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">When the panic is recovered&nbsp;then the return value of a panicking function will be the default value of the return types of&nbsp; the panicking function<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Let&#8217;s see a program for it<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    a := []int{5, 6}\n    val, err := checkAndGet(a, 2)\n    fmt.Printf(\"Val: %d\\n\", val)\n    fmt.Println(\"Error: \", err)\n}\nfunc checkAndGet(a []int, index int) (int, error) {\n    defer handleOutOfBounds()\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    return a[index], nil\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice\nVal: 0\nError:  <nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program we have <strong>checkAndGet<\/strong> function which gets the value at a particular index in int slice. If the index passed to this function is greater than (length of slice-1), then it raises a panic. There is also a <strong>handleOutOfBounds<\/strong> function which is used to recover from the panic.&nbsp; So we pass index 2 to the <strong>checkAndGet <\/strong>function and it raises the panic which is recovered in the <strong>handleOutOfBounds <\/strong>function. That is why we first get this output<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice in main function that we recollect the return value from the <strong>checkAndGet <\/strong>like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">val, err := checkAndGet(a, 2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>checkAndGet <\/strong>has two return values<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>int<\/li><li>error<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Since <strong>checkAndGet <\/strong>creates panic which is recovered in the handleOutOfBounds function therefore the return value of the <strong>checkAndGet <\/strong>will be the default value of its types.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Therefore<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> fmt.Printf(\"Val: %d\\n\", val)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">outputs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Val: 0<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">because zero is the default value of <strong>int<\/strong> type.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">And<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Println(\"Error: \", err)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">outputs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Error:  <nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">because nil is the default value of <strong>error<\/strong> type.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">If you don&#8217;t want to return default zero value of types then named return value can be used. Let&#8217;s see a program for that.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    a := []int{5, 6}\n    val, err := checkAndGet(a, 2)\n    fmt.Printf(\"Val: %d\\n\", val)\n    fmt.Println(\"Error: \", err)\n}\nfunc checkAndGet(a []int, index int) (value int, err error) {\n    value = 10\n    defer handleOutOfBounds()\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    value = a[index]\n    return value, nil\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice\nVal: 10\nError:  <nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This program is same as previous program, the only difference being that we are using named return value in the <strong>checkAndGet<\/strong> function.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func checkAndGet(a []int, index int) (value int, err error)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">We set the named return value to 10 in <strong>checkAndGet<\/strong> function<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">value = 10<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">That is why we get below output in this program as panic is created and it is recovered<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Recovering from panic: Out of bound access for slice\nVal: 10\nError:  <nil><\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also note that If panic would not have created in the program then it would have output the correct value at index.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span><strong>Conclusion<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">That is all about panic and recover in golang. Hope you have liked the article. please share feedback\/improvements\/mistakes in comments<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Previous Tutorial<\/strong>&nbsp;\u2013 <a href=\"https:\/\/golangbyexamples.com\/error-in-golang-advanced\/\">Error -Part 2<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the&nbsp; chapter 28 and also the last chapter of the golang comprehensive tutorial series. This is Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[3,4],"class_list":["post-4003","post","type-post","status-publish","format-standard","hentry","category-tech","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Panic and Recover in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Panic and Recover in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the&nbsp; chapter 28 and also the last chapter of the golang comprehensive tutorial series. This is Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-20T18:07:34+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-07-10T07:47:17+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"12 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\",\"name\":\"Panic and Recover in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-09-20T18:07:34+00:00\",\"dateModified\":\"2021-07-10T07:47:17+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Panic and Recover in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Panic and Recover in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/","og_locale":"en_US","og_type":"article","og_title":"Panic and Recover in Go (Golang) - Welcome To Golang By Example","og_description":"This is the&nbsp; chapter 28 and also the last chapter of the golang comprehensive tutorial series. This is Refer to this link for other chapters of the series \u2013&nbsp;Golang Comprehensive Tutorial Series...","og_url":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-09-20T18:07:34+00:00","article_modified_time":"2021-07-10T07:47:17+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"12 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/","url":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/","name":"Panic and Recover in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-09-20T18:07:34+00:00","dateModified":"2021-07-10T07:47:17+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/panic-and-recover-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/panic-and-recover-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Panic and Recover in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-12z","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4003","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4003"}],"version-history":[{"count":9,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4003\/revisions"}],"predecessor-version":[{"id":5885,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4003\/revisions\/5885"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4003"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4003"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4003"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}