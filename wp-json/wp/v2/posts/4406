{"id":4406,"date":"2020-11-21T01:13:44","date_gmt":"2020-11-20T19:43:44","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4406"},"modified":"2020-11-25T00:28:41","modified_gmt":"2020-11-24T18:58:41","slug":"all-basic-data-types-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/","title":{"rendered":"All basic data types in Go (Golang)"},"content":{"rendered":"\n<p class=\"has-medium-font-size\">This is the\u00a0 chapter 7 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Comprehensive Tutorial Series<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/function-golang-complete-guide\/\">Functions<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013<a href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\">Variables<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Now let\u2019s check out the current tutorial. Below is the table of contents for current tutorial.<\/p>\n\n\n\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Basic_Types\" title=\"Basic Types\">Basic Types<\/a><ul class=\"ez-toc-list-level-2\"><li class=\"ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Integers\" title=\"Integers&nbsp;\">Integers&nbsp;<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Signed_Integers\" title=\"Signed Integers\">Signed Integers<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#UnSigned\" title=\"UnSigned\">UnSigned<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-6\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Floats\" title=\"Floats\">Floats<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-7\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Complex_Numbers\" title=\"Complex Numbers\">Complex Numbers<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-8\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Byte\" title=\"Byte\">Byte<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-9\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Rune\" title=\"Rune\">Rune<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-10\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#String\" title=\"String\">String<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-11\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Booleans\" title=\"Booleans\">Booleans<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-12\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#Conclusion\" title=\"Conclusion\">Conclusion<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">Golang is a statically typed programming language meaning that each variable has a type. Go has several built-in types. Data types in Go can be categorized into two types.<\/p>\n\n\n\n<ol class=\"has-medium-font-size wp-block-list\"><li>Basic Types<\/li><li>Composite Types<\/li><\/ol>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Basic Types<ul><li>Integers<ul><li>Signed<ul><li>int<\/li><li>int8<\/li><li>int16&nbsp;<\/li><li>int32&nbsp;<\/li><li>int64<\/li><\/ul><\/li><li>Unsigned<ul><li>uint<\/li><li>uint8<\/li><li>uint16<\/li><li>uint32<\/li><li>uint64<\/li><li>uintptr<\/li><\/ul><\/li><\/ul><\/li><li>Floats<ul><li>float32<\/li><li>float64<\/li><\/ul><\/li><li>Complex Numbers<ul><li>complex64<\/li><li>complex128<\/li><\/ul><\/li><li>Byte<\/li><li>Rune<\/li><li>String<\/li><li>Boolean<\/li><\/ul><\/li><li>Composite Types<ul><li>Collection\/Aggregation or Non-Reference Types<ul><li>Arrays<\/li><li>Structs<\/li><\/ul><\/li><li>Reference Types<ul><li>Slices<\/li><li>Maps<\/li><li>Channels<\/li><li>Pointers<\/li><li>Function\/Methods<\/li><\/ul><\/li><li>Interface<ul><li>Special case of empty Interface<\/li><\/ul><\/li><\/ul><\/li><\/ul>\n\n\n\n<h1 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Basic_Types\"><\/span><strong>Basic Types<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p>In this article we are going to discuss basic types only.<\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Integers\"><\/span><strong>Integers<\/strong>&nbsp;<span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Integers can be signed or unsigned.<\/p>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Signed_Integers\"><\/span><strong>Signed Integers<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">Signed integers are of 5 types as below<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Size<\/strong><\/td><\/tr><tr><td>int<\/td><td>Platform Dependent<\/td><\/tr><tr><td>int8<\/td><td>8 bits\/1 byte<\/td><\/tr><tr><td>int16<\/td><td>16 bits\/2 byte<\/td><\/tr><tr><td>int32<\/td><td>32 bits\/4 byte<\/td><\/tr><tr><td>int64<\/td><td>64 bits\/8 byte<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>Platform Dependent.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the size of int will be 32 bits or 4 byte.<\/li><li>On 64 bit machines, the size of int will be 64 bits or 8 byte<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Again Platform dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the size of int will be 32 bits or 4 bytes.<\/li><li>On 64 bit machines, the size of int will be 64 bits or 8 bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is a good idea to use int&nbsp;whenever using signed Integer other than the cases mentioned below<ul><li>When the machine is a 32 bit and the range needed is greater than -231&nbsp;to 231&nbsp;-1, then use int64 instead of int. Note that in this case for int64,&nbsp; 2 32-bit memory addresses to form a 64-bit number together.<\/li><li>When the range is less then use the appropriate integer type.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Properties:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a int<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var a int<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>int is default type for <strong>integer. <\/strong>When you don&#8217;t specify a type the default will be int<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">b := 2 \/\/The default is also intfmt.Println(reflect.TypeOf(b)) => int<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>bits <\/strong>package of golang can help know the size of an <strong>int <\/strong>on your system<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">\/\/This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) \/\/ 32 or 64sizeOfIntInBits := bits.UintSizefmt.Println(sizeOfIntInBits) => 32 0r 34<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>unsafe.Sizeof() <\/strong>function can also be used to see the size of int in bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Full Working Code<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the full working code of the above properties<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"math\/bits\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) \/\/ 32 or 64\n    sizeOfIntInBits := bits.UintSize\n    fmt.Printf(\"%d bits\\n\", sizeOfIntInBits)\n    \n    var a int\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n    \n    b := 2\n    fmt.Printf(\"b's typs is %s\\n\", reflect.TypeOf(b))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">64 bits\n8 bytes\na's type is int\nb's typs is int<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int8<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>8 bits or 1 byte<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: -2<sup>7<\/sup>&nbsp;to 2<sup>7<\/sup>&nbsp;-1.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use int8 when there it is known that the int range will be between -2<sup>7<\/sup>&nbsp;to 2<sup>7<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For array values which lies between -27&nbsp;to 27&nbsp;-1, is a good use case for using int8. For eg if you are storing ASCII index for lowercase letters then int8 can be used.<\/li><li>It is a good idea to use int8 for data values.<\/li><\/ul>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int16<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>16 bits or 2 byte<br><strong>Range<\/strong>: -2<sup>15<\/sup>&nbsp;to 2<sup>15<\/sup>&nbsp;-1.<strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use int16 when there it is known that the int range will be between -2<sup>15<\/sup>&nbsp;to 2<sup>15<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>For array values which lie between -215&nbsp;to 215&nbsp;-1, is a good use case for using int8. For eg if you are storing ASCII index for lowercase letters then int16 can be used.<\/li><\/ul>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>32 bits or 4 byte<br><strong>Range<\/strong>: -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>int64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>64 bits or 8 byte<br><strong>Range<\/strong>: -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1.<strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>int64<\/strong> is used when range is higher. For eg <strong>time.Duration<\/strong> is of type <strong>int64<\/strong><\/li><\/ul>\n\n\n\n<h3 class=\"has-vivid-cyan-blue-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"UnSigned\"><\/span><strong>UnSigned<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p>UnSigned integers are of 5 types as below<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Size<\/strong><\/td><\/tr><tr><td>uint<\/td><td>Platform Dependent<\/td><\/tr><tr><td>uint8<\/td><td>8 bits\/1 byte<\/td><\/tr><tr><td>uint16<\/td><td>16 bits\/2 byte<\/td><\/tr><tr><td>uint32<\/td><td>32 bits\/4 byte<\/td><\/tr><tr><td>uint64<\/td><td>64 bits\/8 byte<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>Platform Dependent.<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines the size of int will be 32 bits or 4 byte.<\/li><li>On 64 bit machines the size of int will be 64 bits or 8 byte<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Again Platform dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines the range of int will be -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/li><li>On 64 bit machines the range of int will be -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is a good idea to use uint&nbsp; whenever using signed Integer other than the cases mention below<ul><li>When machine is a 32 bit and range needed is greater than -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1, then use <strong>int64<\/strong> instead <strong>int<\/strong>. Note that in this case for int64,&nbsp; 2 32-bit memory addresses to form a 64-bit number together.<\/li><li>When the range is less then use the appropriate int type<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Properties:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a uint<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">var a uint<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>bits <\/strong>package of golang can help know the size of an <strong>uint <\/strong>on your system<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">\/\/This is computed as const uintSize = 32 << (^uint(0) >> 32 & 1) \/\/ 32 or 64sizeOfUintInBits := bits.UintSizefmt.Println(sizeOfIntInBits) => 32 or 64<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>unsafe.Sizeof() <\/strong>function can also be used to see the size of uint in bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Full Working Code <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the full working code of the above properties<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"math\/bits\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/This is computed as const uintSize = 32 << (^uuint(0) >> 32 & 1) \/\/ 32 or 64\n    sizeOfuintInBits := bits.UintSize\n    fmt.Printf(\"%d bits\\n\", sizeOfuintInBits)\n\n    var a uint\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">64 bits\n8 bytes\na's type is uint<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uintptr<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is an unsigned integer type that is large enough to hold any pointer address. Therefore is size and range are platform dependent.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>Platform Dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines, the size of an int will be 32 bits or 4 bytes.<\/li><li>On 64 bit machines, the size of an int will be 64 bits or 8 bytes.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Again Platform dependent<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>On 32 bit machines the range of int will be -2<sup>31<\/sup>&nbsp;to 2<sup>31<\/sup>&nbsp;-1.<\/li><li>On 64 bit machines the range of int will be -2<sup>63<\/sup>&nbsp;to 2<sup>63<\/sup>&nbsp;-1<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Properties:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>A uintptr can be converted to unsafe.Pointer and vice versa<\/li><li>Arithmetic can be performed on the uintptr<\/li><li>uintptr even though it holds a pointer address, is just a value, and does not reference any object. Therefore<ul><li>Its value will not be updated if the corresponding object moves. For Eg When goroutine stack changes<\/li><li>The corresponding object can be garbage collected.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong><\/strong><strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Its purpose is to be used along with unsafe.Pointer mainly used for unsafe memory access.<\/li><li>When you want to save the pointer address value for printing it or storing it. Since the address is just stored and does not reference anything, the corresponding object can be garbage collected.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Full Working Code<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype sample struct {\n    a int\n    b string\n}\n\nfunc main() {\n    s := &sample{a: 1, b: \"test\"}\n    \n   \/\/Getting the address of field b in struct s\n    p := unsafe.Pointer(uintptr(unsafe.Pointer(s)) + unsafe.Offsetof(s.b))\n    \n    \/\/Typecasting it to a string pointer and printing the value of it\n    fmt.Println(*(*string)(p))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">test<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint8<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>8 bits or 1 byte<br><strong>Range<\/strong>:&nbsp; 0 to 255 or 0&nbsp;to 2<sup>8<\/sup>&nbsp;-1.<strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use uint8 when there it is known that the int range will be between 2<sup>8<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants, it is still advisable to use int even though it might take more space because it is likely to be promoted to int in some operations or library calls.<\/li><li>For array values which lies between&nbsp; 2<sup>8<\/sup>&nbsp;-1. is a good use case for using uint8. For eg if you are storing ascii index in an array then <strong>uint8<\/strong> can be used.<\/li><\/ul>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint16<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>16 bits or 2 byte<br><strong>Range<\/strong>: 0 to 2<sup>16<\/sup>&nbsp;-1<strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Use int16 when there it is known that the int range will be between 0 to 2<sup>16<\/sup>&nbsp;-1.&nbsp; For temporary values such as loop invariants it is still advisable to use int even though it might take more space, because it is likely to be promoted to int in some operations or library calls.<\/li><li>For array values which lies between -0 to 2<sup>16<\/sup>&nbsp;-1, is a good use case for using int8.<\/li><\/ul>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>32 bits or 4 byte<br><strong>Range<\/strong>: 0 to 2<sup>32<\/sup>&nbsp;-1<br><\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>uint64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size: <\/strong>64 bits or 8 byte<br><strong>Range<\/strong>: 0 to 2<sup>64<\/sup>&nbsp;-1<strong>When to Use:<\/strong><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>uint64 is used when the range is higher.<\/li><\/ul>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Floats\"><\/span><strong>Floats<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Floats are numbers with decimals. It is of two types<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Size<\/strong><\/td><\/tr><tr><td>float32<\/td><td>32 bits or 4 bytes<\/td><\/tr><tr><td>float64<\/td><td>64 bits or 8 bytes<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\"><strong>float64<\/strong> is the default float type. When you initialize a variable with a decimal value and don&#8217;t specify the float type, the default type inferred will be <strong>float64<\/strong>.<\/p>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>float32<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>float32<\/strong> uses a single-precision floating-point format to store values. Basically, it is the set of all IEEE-754 32-bit floating-point numbers. The 32 bits are divided into &#8211; 1 bit sign, 8 bits exponent, and 23 bits mantissa. float 32 take half much size as float 64 and are comparatively faster on some machine architectures.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: 32 bits or 4 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 1.2E-38 to 3.4E+38<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>DefaultValue<\/strong>: 0.0<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">If in your system memory is a bottleneck and range is less, then <strong>float32<\/strong> can be used.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a float32<\/li><li>Print size of float32 in bytes<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a float32\n    var a float32 = 2\n    \n    \/\/Size of float32 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">4 bytes\na's type is float32<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>float64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">float64 uses a double-precision floating-point format to store values. Basically it is the set of all IEEE-754 64-bit floating-point numbers. The 64 bits are divided into &#8211; 1-bit sign, 11 bits exponent, 52 bits mantissa. float64 takes twice as much size compared to float32 but can represent numbers more accurately than float32.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: 32 bits or 4 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: 1.2E-38 to 3.4E+38<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>DefaultValue<\/strong>: 0.0<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">When the precision needed is high<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example illustrates below points<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Declare a float64<\/li><li>Print size of float64 in bytes<\/li><li>Default is float64 when you don&#8217;t specify a type<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    \/\/Declare a float64\n    var a float64 = 2\n    \n    \/\/Size of float64 in bytes\n    fmt.Printf(\"%d bytes\\n\", unsafe.Sizeof(a))\n    fmt.Printf(\"a's type is %s\\n\", reflect.TypeOf(a))\n    \n    \/\/Default is float64 when you don't specify a type\n    b := 2.3\n    fmt.Printf(\"b's type is %s\\n\", reflect.TypeOf(b))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">8 bytes\na's type is float64\nb's type is float64<\/code><\/pre>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Complex_Numbers\"><\/span><strong>Complex Numbers<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Complex Numbers are of two types<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"has-subtle-light-gray-background-color has-background\"><tbody><tr><td><strong>Type<\/strong><\/td><td><strong>Property<\/strong><\/td><\/tr><tr><td>complex64<\/td><td>Both real and imaginary part are float32<\/td><\/tr><tr><td> complex128<\/td><td>Both real and imaginary part are float64<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p class=\"has-medium-font-size\">The default complex type is complex128<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Initialization<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Complex Numbers can be initialized in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using complex function. It has below signature.  Do make sure that both a and b should be of same type , meaning either they both should be float32 or both should be float64<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">complext(a, b)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Using the shorthand syntax. This is used when creating a complex number with direct numbers. The complex type created using below method will be of type <strong>complex128 <\/strong>if type is not specified<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a := 5 + 6i<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>complex64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">For complex 64 both real and imaginary part are float32<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: Both real and imaginary part are of same size as float32. It is of size 32 bits or 4 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Both real and imaginary part range is same as float32 i.e 1.2E-38 to 3.4E+38<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is a sample code that shows<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>How to create a complex64 number using the above two method<\/li><li>Print size of a complex64 number. Size will be&nbsp; 8 bytes(4 +4) which is equivalent to two float32 numbers<\/li><li>Print type of a complex64 number<\/li><li>+ operation on complex number<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    var a float32 = 3\n    var b float32 = 5\n    \n    \/\/Initialize-1\n    c := complex(a, b)\n    \n    \/\/Initialize-2\n    var d complex64\n    d = 4 + 5i\n    \n    \/\/Print Size\n    fmt.Printf(\"c's size is %d bytes\\n\", unsafe.Sizeof(c))\n    fmt.Printf(\"d's size is %d bytes\\n\", unsafe.Sizeof(d))\n    \n    \/\/Print type\n    fmt.Printf(\"c's type is %s\\n\", reflect.TypeOf(c))\n    fmt.Printf(\"d's type is %s\\n\", reflect.TypeOf(d))\n    \n    \/\/Operations on complex number\n    fmt.Println(c+d, c-d, c*d, c\/d)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">c's size is 8 bytes\nd's size is 8 bytes\nc's type is complex64\nd's type is complex64\n(7+10i) (-1+0i) (-13+35i) (0.902439+0.12195122i)<\/code><\/pre>\n\n\n\n<p class=\"has-vivid-red-color has-text-color has-medium-font-size\"><strong>complex128<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">For complex128 both <strong>real<\/strong> and <strong>imaginary<\/strong> part are <strong>float64<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Size<\/strong>: Both <strong>real<\/strong> and <strong>imaginary<\/strong> part are of same size as float64. It is of size 64 bits or 8 bytes<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Range<\/strong>: Both <strong>real<\/strong> and <strong>imaginary<\/strong> part range is same as <strong>float64<\/strong> i.e -1.7E+308 to +1.7E+308<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is a sample code that shows<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>How to create a complex128 number using above two method. It also shows when type is not specified, the default type will be <strong>complex128<\/strong><\/li><li>Print size of a complex128 number. Size will be&nbsp; 16 bytes(8 +8) which is equivalent to two float64 numbers<\/li><li>Print type of a complex128 number<\/li><li>Different operations on complex number<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\n\nfunc main() {\n    var a float64 = 3\n    var b float64 = 5\n    \n    \/\/Initialize-1\n    c := complex(a, b)\n    \n    \/\/Initialize-2. When don't specify a type , the default type will be complex128\n    d := 4 + 5i\n    \n    \/\/Print Size\n    fmt.Printf(\"c's size is %d bytes\\n\", unsafe.Sizeof(c))\n    fmt.Printf(\"d's size is %d bytes\\n\", unsafe.Sizeof(d))\n    \n    \/\/Print type\n    fmt.Printf(\"c's type is %s\\n\", reflect.TypeOf(c))\n    fmt.Printf(\"d's type is %s\\n\", reflect.TypeOf(d))\n    \n    \/\/Operations on complex number\n    fmt.Println(c+d, c-d, c*d, c\/d)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">c's size is 16 bytes\nd's size is 16 bytes\nc's type is complex128\nd's type is complex128\n(7+10i) (-1+0i) (-13+35i) (0.902439024390244+0.12195121951219513i)<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Byte\"><\/span><strong>Byte<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">byte in Go is an alias for <strong>uint8 <\/strong>meaning it is an integer value. This integer value is of 8 bits and it represents one byte i.e number between 0-255). A single byte therefore can represent ASCII characters. Golang does not have any data type of &#8216;char&#8217;. Therefore <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>byte is used to represent the ASCII character<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>rune is used to represent all UNICODE characters which include every character that exists. We will study about rune later in this tutorial.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Define Byte<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">var rbyte byte := 'a'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">While declaring byte we have specify the type, as we have in the program above. If we don&#8217;t specify the type, then the default type is meant as a <strong>rune. <\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">In below code example:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>How to define a byte<\/li><li>Print the byte type<\/li><li>Print size of byte<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    var r byte = 'a'\n    \n    \/\/Print Size\n    fmt.Printf(\"Size: %d\\n\", unsafe.Sizeof(r))\n    \n    \/\/Print Type\n    fmt.Printf(\"Type: %s\\n\", reflect.TypeOf(r))\n    \n    \/\/Print Character\n    fmt.Printf(\"Character: %c\\n\", r)\n    s := \"abc\"\n    \n    \/\/This will the decimal value of byte\n    fmt.Println([]byte(s))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Size: 1\nType: uint8\nCharacter: a\n[97 98 99]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Rune\"><\/span><strong>Rune<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">rune in Go is&nbsp; an alias for <strong>int32 <\/strong>meaning it is an integer value. This integer value is meant to represent a Unicode Code Point. To understand rune you have to know what Unicode is. Below is short description but you can refer to famous blog post about it &#8211; <a href=\"http:\/\/www.joelonsoftware.com\/articles\/Unicode.html\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>What is UniCode<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Unicode is a superset of ASCII characters which assigns a unique number to every character that exists. This unique number is called Unicode Code Point.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For eg <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Digit <strong>0<\/strong> is represented as Unicode Point <strong>U+0030 (Decimal Value &#8211; 48)<\/strong><\/li><li>Small Case <strong>b<\/strong> is represented as Unicode Point&nbsp; <strong>U+0062 (Decimal Value &#8211; 98)<\/strong><\/li><li>A pound symbol <strong>\u00a3&nbsp;<\/strong>is represented as Unicode Point <strong>U+00A3 (Decimal Value &#8211; 163)<\/strong><\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Visit <a href=\"https:\/\/en.wikipedia.org\/wiki\/List_of_Unicode_characters\">https:\/\/en.wikipedia.org\/wiki\/List_of_Unicode_characters<\/a> to know about Unicode Point of other characters. But Unicode doesn&#8217;t talk about how these code points will be saved in memory. This is where <strong>utf-8<\/strong> comes into picture<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>UTF-8<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">utf-8 saves every Unicode Point either using 1, 2, 3 or 4 bytes. ASCII points are stored using 1 byte. That is why rune is an alias for int32 because a Unicode Point can be of max 4 bytes in Go as in GO every string is encoded using utf-8.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Every rune is intended to refer to one Unicode Point.&nbsp; For eg if you print a string after typecasting it to a rune array then it will print the Unicode Point for each of character. For for below string <strong>&#8220;0b\u00a3&#8221;<\/strong> output will be &#8211; <strong>[U+0030 U+0062 U+00A3]<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"%U\\n\", []rune(\"0b\u00a3\"))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Declare Rune<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">A rune is declared using a character between single quotes like below declaring a variable named <strong>&#8216;rPound&#8217;<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">rPound := '\u00a3'<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">After declaring Rune you can perform below things as well<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print Type &#8211; <\/strong>Output will be <strong>int32<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Type: %s\\n\", reflect.TypeOf(rPound))<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print Unicode Code Point &#8211; <\/strong>Output will be <strong>U+00A3<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Unicode CodePoint: %U\\n\", rPound)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>Print Character &#8211; <\/strong>Output will be <strong>\u00a3<\/strong><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Printf(\"Character: %c\\n\", r)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>When to Use<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">You should use a rune when you intend to save Unicode Code Point in the value. A rune array should be used when all values in the array are meant to be a Unicode Code Point.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">Below is the code illustrating each point we discussed<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"unsafe\"\n)\nfunc main() {\n    r := 'a'\n    \n    \/\/Print Size\n    fmt.Printf(\"Size: %d\\n\", unsafe.Sizeof(r))\n    \n    \/\/Print Type\n    fmt.Printf(\"Type: %s\\n\", reflect.TypeOf(r))\n    \n    \/\/Print Code Point\n    fmt.Printf(\"Unicode CodePoint: %U\\n\", r)\n    \n    \/\/Print Character\n    fmt.Printf(\"Character: %c\\n\", r)\n    s := \"0b\u00a3\"\n    \n    \/\/This will print the Unicode Points\n    fmt.Printf(\"%U\\n\", []rune(s))\n    \n    \/\/This will the decimal value of Unicode Code Point\n    fmt.Println([]rune(s))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Size: 4\nType: int32\nUnicode CodePoint: U+0061\nCharacter: a\n[U+0030 U+0062 U+00A3]\n[48 98 163]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"String\"><\/span><strong>String<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">string is a read only slice of bytes in golang. String can be initialized in two ways<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>using double quotes &#8220;&#8221; eg &#8220;this&#8221;<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">string in double quotes honors the escape sequences. For eg if the string contains a \\n then while printing there will be a new line<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>using back quotes ` eg&nbsp; \\`this`<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">String in back quotes is just a raw string and it does not honor any kind of escape sequences.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Each character in a string will occupy some bytes depending upon encoding used. For eg in utf-8 encoded string, each character will occupy between 1-4 bytes. You can read about utf-8 in this must read famous blog-<a href=\"http:\/\/www.joelonsoftware.com\/articles\/Unicode.html\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)<\/a>. &nbsp; In utf-8 , the characters <strong>a<\/strong> or <strong>b <\/strong>are encoded using 1&nbsp; byte while the character pound sign <strong>\u00a3 <\/strong> is encoded using two bytes . Therefore the string &#8220;ab\u00a3&#8221; will output 4 bytes when you will convert the string to byte array and print it like below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">s := \"ab\u00a3\"\nfmt.Println([]byte(s))<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">[48 98 194 163]<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also when you try to print the length of the above string using <strong>len(&#8220;ab\u00a3&#8221;),<\/strong> it will output 4 and not 3 because it contains 4 bytes.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Also note that <strong>range<\/strong> loops over sequences of byte which form each character, therefore for the below range loop <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">for _, c := range s {\n   fmt.Println(string(c))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Output will be <\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a\nb\n\u00a3<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">There are many operations that can be performed on a string. One such operation is concatenation which combines two string. The sign &#8216;+&#8217; is used for concatenation.  Let&#8217;s see full working&nbsp; code for all above things that we discussed<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    \/\/String in double quotes\n    x := \"this\\nthat\"\n    fmt.Printf(\"x is: %s\\n\", x)\n    \n    \/\/String in back quotes\n    y := `this\\nthat`\n    fmt.Printf(\"y is: %s\\n\", y)\n    s := \"ab\u00a3\"\n    \n    \/\/This will print the byte sequence. \n    \/\/Since character a and b occupies 1 byte each and \u00a3 character occupies 2 bytes. \n    \/\/The final output will 4 bytes\n    fmt.Println([]byte(s))\n    \n    \/\/The output will be 4 for same reason as above\n    fmt.Println(len(s))\n    \n    \/\/range loops over sequences of byte which form each character\n    for _, c := range s {\n        fmt.Println(string(c))\n    }\n    \n    \/\/Concatenation\n    fmt.Println(\"c\" + \"d\")\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">x is: this\nthat\ny is: this\\nthat\n[97 98 194 163]\n4\na\nb\n\u00a3\ncd<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h2 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Booleans\"><\/span><strong>Booleans<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">The data type is <strong>bool <\/strong>and has two possible values true or false. <\/p>\n\n\n\n<p class=\"has-medium-font-size\">Default Value: false<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Operations: <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>AND &#8211; &amp;&amp;<\/li><li>OR&nbsp; &#8211; ||<\/li><li>Negation &#8211; !<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Example<\/strong><\/p>\n\n\n\n<p class=\"has-medium-font-size\">The below code example shows <\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>If not initialized the default value is <strong>false<\/strong><\/li><li>All the above operations on the bool <\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Code<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    \/\/Default value will be false it not initialized\n    var a bool\n    fmt.Printf(\"a's value is %t\\n\", a)\n    \n    \/\/And operation on one true and other false\n    andOperation := 1 < 2 &#038;&#038; 1 > 3\n    fmt.Printf(\"Ouput of AND operation on one true and other false %t\\n\", andOperation)\n    \n    \/\/OR operation on one true and other false\n    orOperation := 1 < 2 || 1 > 3\n    fmt.Printf(\"Ouput of OR operation on one true and other false: %t\\n\", orOperation)\n    \n    \/\/Negation Operation on a false value\n    negationOperation := !(1 > 2)\n    fmt.Printf(\"Ouput of NEGATION operation on false value: %t\\n\", negationOperation)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">a's value is false\nOuput of AND operation on one true and other false false\nOuput of OR operation on one true and other false: true\nOuput of NEGATION operation on false value: true<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Conclusion\"><\/span>Conclusion<span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">This is all about basic types in golang. Hope you have liked this article. Please share feedback or improvement or mistakes in comments<\/p>\n\n\n\n<p><br><strong>Next Tutorial<\/strong>\u00a0\u2013\u00a0<a href=\"https:\/\/golangbyexamples.com\/function-golang-complete-guide\/\">Functions<\/a><br><strong>Previous Tutorial<\/strong>\u00a0\u2013<a href=\"https:\/\/golangbyexamples.com\/variables-in-golang-complete-guide\/\">Variables<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is the\u00a0 chapter 7 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0FunctionsPrevious Tutorial\u00a0\u2013Variables Now let\u2019s check out&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[],"class_list":["post-4406","post","type-post","status-publish","format-standard","hentry","category-tech"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>All basic data types in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"All basic data types in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This is the\u00a0 chapter 7 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0FunctionsPrevious Tutorial\u00a0\u2013Variables Now let\u2019s check out...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-11-20T19:43:44+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-11-24T18:58:41+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"18 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\",\"name\":\"All basic data types in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-11-20T19:43:44+00:00\",\"dateModified\":\"2020-11-24T18:58:41+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"All basic data types in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"All basic data types in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/","og_locale":"en_US","og_type":"article","og_title":"All basic data types in Go (Golang) - Welcome To Golang By Example","og_description":"This is the\u00a0 chapter 7 of the golang comprehensive tutorial series. Refer to this link for other chapters of the series \u2013\u00a0Golang Comprehensive Tutorial Series Next Tutorial\u00a0\u2013\u00a0FunctionsPrevious Tutorial\u00a0\u2013Variables Now let\u2019s check out...","og_url":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-11-20T19:43:44+00:00","article_modified_time":"2020-11-24T18:58:41+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"18 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/","url":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/","name":"All basic data types in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-11-20T19:43:44+00:00","dateModified":"2020-11-24T18:58:41+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/all-basic-data-types-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"All basic data types in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-194","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4406","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4406"}],"version-history":[{"count":9,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4406\/revisions"}],"predecessor-version":[{"id":4539,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4406\/revisions\/4539"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4406"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4406"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4406"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}