{"id":1142,"date":"2020-01-15T15:50:17","date_gmt":"2020-01-15T15:50:17","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=1142"},"modified":"2020-01-15T15:50:48","modified_gmt":"2020-01-15T15:50:48","slug":"iterative-binary-search-tree-go","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/","title":{"rendered":"Iterative Binary Search Tree in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/#Introduction\" title=\"Introduction\">Introduction<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/#Full_Working_Code\" title=\"Full Working Code\">Full Working Code<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Introduction\"><\/span><strong>Introduction<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\">A binary search tree abbreviated as BST is a binary tree. For each node in a Binary Search Tree<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Value of each node in the left\u00a0 subtree is less than the current node value<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Value of each node in the right subtree is greater than the current node value<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Both left and right subtree are themselves Binary Search Tree<\/li><\/ul>\n\n\n\n<p><\/p>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Full_Working_Code\"><\/span><strong>Full Working Code<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong> insertRec()<\/strong> function inserts into the bst in an iterative manner<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\ntype bstnode struct {\n    value int\n    left  *bstnode\n    right *bstnode\n}\n\ntype bst struct {\n    root *bstnode\n}\n\nfunc initList() *bst {\n    return &bst{}\n}\n\nfunc (b *bst) reset() {\n    b.root = nil\n}\n\nfunc (b *bst) insert(value int) {\n    b.insertRec(b.root, value)\n}\n\nfunc (b *bst) insertRec(node *bstnode, value int) {\n    if b.root == nil {\n        b.root = &bstnode{\n            value: value,\n        }\n    }\n    if node == nil {\n        return\n    }\n    \/\/Find the terminalNode where to insert the new node\n    var terminalNode *bstnode\n    for node != nil {\n        terminalNode = node\n        if value <= node.value {\n            node = node.left\n        } else {\n            node = node.right\n        }\n    }\n    if value <= terminalNode.value {\n        terminalNode.left = &#038;bstnode{value: value}\n    } else {\n        terminalNode.right = &#038;bstnode{value: value}\n    }\n    return\n}\n\nfunc (b *bst) find(value int) error {\n    node := b.findRec(b.root, value)\n    if node == nil {\n        return fmt.Errorf(\"Value: %d not found in tree\", value)\n    }\n    return nil\n}\n\nfunc (b *bst) findRec(node *bstnode, value int) *bstnode {\n    if node == nil {\n        return nil\n    }\n    if node.value == value {\n        return b.root\n    }\n    if value < node.value {\n        return b.findRec(node.left, value)\n    }\n    return b.findRec(node.right, value)\n}\n\nfunc (b *bst) inorder() {\n    b.inorderRec(b.root)\n}\n\nfunc (b *bst) inorderRec(node *bstnode) {\n    if node != nil {\n        b.inorderRec(node.left)\n        fmt.Println(node.value)\n        b.inorderRec(node.right)\n    }\n}\n\nfunc main() {\n    bst := &#038;bst{}\n    eg := []int{2, 5, 7, -1, -1, 5, 5}\n    for _, val := range eg {\n        bst.insert(val)\n    }\n    fmt.Println(\"Printing Inorder\")\n    bst.inorder()\n    bst.reset()\n    eg = []int{4, 5, 7, 6, -1, 99, 5}\n    for _, val := range eg {\n        bst.insert(val)\n    }\n    fmt.Println(\"Printing Inorder\")\n    bst.inorder()\n    err := bst.find(2)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 2)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 2)\n    }\n    err = bst.find(6)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 6)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 6)\n    }\n    err = bst.find(5)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 5)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 5)\n    }\n    err = bst.find(1)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 1)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 1)\n    }\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Printing Inorder\n-1\n-1\n2\n5\n5\n5\n7\nPrinting Inorder\n-1\n4\n5\n5\n6\n7\n99\nValue 2 Not Found\nValue 6 Found\nValue 5 Found\nValue 1 Not Found<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents IntroductionFull Working Code Introduction A binary search tree abbreviated as BST is a binary tree. For each node in a Binary Search Tree Value of each node in the&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[120,3,4,159],"class_list":["post-1142","post","type-post","status-publish","format-standard","hentry","category-tech","tag-bst","tag-go","tag-golang","tag-iterative"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Iterative Binary Search Tree in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Iterative Binary Search Tree in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents IntroductionFull Working Code Introduction A binary search tree abbreviated as BST is a binary tree. For each node in a Binary Search Tree Value of each node in the...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2020-01-15T15:50:17+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-01-15T15:50:48+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/\",\"url\":\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/\",\"name\":\"Iterative Binary Search Tree in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2020-01-15T15:50:17+00:00\",\"dateModified\":\"2020-01-15T15:50:48+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Iterative Binary Search Tree in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Iterative Binary Search Tree in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/","og_locale":"en_US","og_type":"article","og_title":"Iterative Binary Search Tree in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents IntroductionFull Working Code Introduction A binary search tree abbreviated as BST is a binary tree. For each node in a Binary Search Tree Value of each node in the...","og_url":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2020-01-15T15:50:17+00:00","article_modified_time":"2020-01-15T15:50:48+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/","url":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/","name":"Iterative Binary Search Tree in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2020-01-15T15:50:17+00:00","dateModified":"2020-01-15T15:50:48+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/iterative-binary-search-tree-go\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Iterative Binary Search Tree in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-iq","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1142","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=1142"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1142\/revisions"}],"predecessor-version":[{"id":1144,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/1142\/revisions\/1144"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=1142"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=1142"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=1142"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}