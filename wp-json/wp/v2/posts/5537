{"id":5537,"date":"2021-04-29T22:30:56","date_gmt":"2021-04-29T17:00:56","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=5537"},"modified":"2021-04-29T22:31:03","modified_gmt":"2021-04-29T17:01:03","slug":"errorf-function-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/errorf-function-golang\/","title":{"rendered":"Understanding Errorf function in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#Overview\" title=\"Overview\">Overview<\/a><ul class=\"ez-toc-list-level-3\"><li class=\"ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#Formatting_a_string_variable\" title=\"Formatting a string variable\">Formatting a string variable<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#Formatting_an_integer\" title=\"Formatting an integer\">Formatting an integer<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-3\"><a class=\"ez-toc-link ez-toc-heading-4\" href=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#Formatting_a_struct\" title=\"Formatting a struct\">Formatting a struct<\/a><\/li><\/ul><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-2\"><a class=\"ez-toc-link ez-toc-heading-5\" href=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#Wrapping_of_error\" title=\"Wrapping of error\">Wrapping of error<\/a><\/li><\/ul><\/nav><\/div>\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Errorf<\/strong> function is defined in the <strong>fmt<\/strong> package and is used to create a custom error with a formatted message as per the format specifier provided.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golang.org\/pkg\/fmt\/#Errorf\">https:\/\/golang.org\/pkg\/fmt\/#Errorf<\/a><\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Its main use is to create a custom error in golang with a formatted message.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>It is also used to create a custom error which can wrap another error provided to it. In golang, an error can wrap another error as well.\u00a0 What does the wrapping of error mean? It means to create a hierarchy of errors in which a\u00a0 particular instance of error wraps another error and that particular instance itself can be wrapped inside another error.\u00a0We will see about this in detail later in this tutorial.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Below is the function prototype of <strong>Errorf<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">func Errorf(format string, a ...interface{}) error<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">As you can see it returns an instance of the error.<\/p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Errorf<\/strong> is also a variadic function meaning that it can have multiple arguments.\u00a0There are two important points about its argument list<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Notice that the first argument is a <strong>format<\/strong> or <strong>template<\/strong>\u00a0string.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>The next is a variable number of arguments. Each of the arguments in this list could be string, int, struct, or anything. That is why it is an empty interface<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Errrof<\/strong> formats the string using custom specifiers. The first argument that is the <strong>format<\/strong> or <strong>template<\/strong> string contains the actual string that needs to be formatted plus some formating verbs. These formating verbs tell how the trailing arguments will be formatted in the final string.\u00a0 So basically the format string argument contains certain symbols which are replaced by trailing arguments.\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Eg\u00a0<\/p>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Formatting_a_string_variable\"><\/span><strong>Formatting a string variable<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%s<\/strong> symbol is used<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Example\u00a0<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">name := \"J\"\nfmt.Errorf(\"Name has less then 3 character. Name: %s\\n\", name)<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Formatting_an_integer\"><\/span><strong>Formatting an integer<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%d<\/strong> symbol is used<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Example\u00a0<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">age := 0\nfmt.Errorf(\"Age is 0: Age:%d\\n\", age)<\/code><\/pre>\n\n\n\n<h3 class=\"has-vivid-green-cyan-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Formatting_a_struct\"><\/span><strong>Formatting a struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h3>\n\n\n\n<p class=\"has-medium-font-size\">For example, there are three format specifiers for printing a struct.&nbsp;<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%v<\/strong>\u00a0\u2013 It will print only values. The field name will not be printed. This is the default way of printing a struct when using Println<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%+v \u2013\u00a0<\/strong>It will print both field and value.\u00a0<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%#v \u2013\u00a0<\/strong>It will print the struct, also both field name and value<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">That is why<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">fmt.Errorf(\"Employee not found. Details: %v\\n\", e)\nfmt.Errorf(\"Employee not found. Details: %+v\\n\", e)\nfmt.Errorf(\"Employee not found. Details: %#v\\n\", e)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">returns an error with below formatted message respectively<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Here is the working program for the same<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype employee struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tsampleErr := \"database connection issue\"\n\n\terr := fmt.Errorf(\"Err is: %s\", sampleErr)\n\tfmt.Println(err)\n\n\tport := 8080\n\n\terr = fmt.Errorf(\"Err is: %s to port %d\", sampleErr, port)\n\tfmt.Println(err)\n\n\te := employee{\n\t\tName: \"John\",\n\t}\n\n\terr = fmt.Errorf(\"Employee not found. Details %v\", e)\n\tfmt.Println(err)\n\terr = fmt.Errorf(\"Employee not found. Details %+v\", e)\n\tfmt.Println(err)\n\terr = fmt.Errorf(\"Employee not found. Details %#v\", e)\n\tfmt.Println(err)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Err is: database connection issue\nErr is: database connection issue to port 8080\nEmployee not found. Details {John 0}\nEmployee not found. Details {Name:John Age:0}\nEmployee not found. Details main.employee{Name:\"John\", Age:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that in below <strong>Errorf<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">err = fmt.Errorf(\"Err is: %s to port %d\", sampleErr, port)<\/code><\/pre>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%s <\/strong>is replaced by <strong>sampleErr<\/strong>.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>%d<\/strong> is replaced by <strong>port<\/strong>.<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">So basically the symbols or verbs in the format string argument are replaced by trailing arguments in order<\/p>\n\n\n\n<p class=\"has-medium-font-size\">If the number of format specifiers in the format string does not match the number of next variable arguments then the format specifier will be printed as is. For example, in the below code, we have two format specifier<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>%s<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>%d<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">While the next variable number of arguments is only one. Hence when we format it then it returns the formatted error with second format specifier as is with MISSING as a warning<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n\tname := \"John\"\n\n\terr := fmt.Errorf(\"Employee not found with name: %s and age %d\", name)\n\tfmt.Println(err)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">Employee not found with name: John and age %!d(MISSING)<\/code><\/pre>\n\n\n\n<h2 class=\"has-luminous-vivid-orange-color has-text-color wp-block-heading\"><span class=\"ez-toc-section\" id=\"Wrapping_of_error\"><\/span><strong>Wrapping of error<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h2>\n\n\n\n<p class=\"has-medium-font-size\">Below is the syntax for wrapping an error<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e := fmt.Errorf(\"... %w ...\", ..., err, ...)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>%w<\/strong>\u00a0directive Is used for wrapping the error.\u00a0 The\u00a0<strong>fmt.Errorf\u00a0<\/strong>should be called with only one\u00a0%w\u00a0directive. Let\u2019s see an example.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n)\n\ntype errorOne struct{}\n\nfunc (e errorOne) Error() string {\n\treturn \"Error One happened\"\n}\n\nfunc main() {\n\n\te1 := errorOne{}\n\n\te2 := fmt.Errorf(\"E2: %w\", e1)\n\n\te3 := fmt.Errorf(\"E3: %w\", e2)\n\n\tfmt.Println(e2)\n\n\tfmt.Println(e3)\n\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happened\nE3: E2: Error One happened<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">In the above program, we created a struct\u00a0<strong>errorOne<\/strong>\u00a0that has an\u00a0<strong>Error<\/strong>\u00a0method hence it implements the\u00a0<strong>error<\/strong>\u00a0interface. Then we created an instance of the\u00a0<strong>errorOne<\/strong>\u00a0struct named\u00a0<strong>e1<\/strong>.\u00a0Then we wrapped that instance\u00a0<strong>e1<\/strong>\u00a0into another error\u00a0<strong>e2<\/strong>\u00a0like this<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e2 := fmt.Errorf(\"E2: %w\", e1)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then we wrapped\u00a0<strong>e2<\/strong>\u00a0into\u00a0<strong>e3<\/strong>\u00a0like below.\u00a0<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">e3 := fmt.Errorf(\"E3: %w\", e2)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">So so we created a hierarchy of errors in which\u00a0<strong>e3<\/strong>\u00a0wraps\u00a0<strong>e2<\/strong>\u00a0and\u00a0<strong>e2<\/strong>\u00a0wraps\u00a0<strong>e1<\/strong>.\u00a0 Thus\u00a0<strong>e3<\/strong>\u00a0also wraps\u00a0<strong>e1<\/strong>\u00a0transitively. When we print\u00a0<strong>e2\u00a0<\/strong>\u00a0it also prints the error from\u00a0<strong>e1<\/strong>\u00a0and gives the output.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E2: Error One happened<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">When we print\u00a0<strong>e3<\/strong>\u00a0it prints the error from\u00a0<strong>e2<\/strong>\u00a0as well as\u00a0<strong>e1<\/strong>\u00a0and gives the output.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">E3: E2: Error One happened<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">You can read about wrapping and unwrapping of error in detail here <\/p>\n\n\n\n<p class=\"has-medium-font-size\"><a href=\"https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/\">https:\/\/golangbyexamples.com\/wrapping-and-unwrapping-error-golang\/<\/a><\/p>\n\n\n\n<p class=\"has-medium-font-size\">This is all about the Errorf function. Hope you have liked this article. Please share feedback in the comments. Also, check out our Golang advance tutorial Series &#8211; <a href=\"https:\/\/golangbyexamples.com\/golang-comprehensive-tutorial\/\">Golang Advance Tutorial<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewFormatting a string variableFormatting an integerFormatting a structWrapping of error Overview Errorf function is defined in the fmt package and is used to create a custom error with a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[318,3,4],"class_list":["post-5537","post","type-post","status-publish","format-standard","hentry","category-tech","tag-errorf","tag-go","tag-golang"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Understanding Errorf function in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"description\" content=\"This tutorial in detail covers the information about the Errorf function provided by the fmt package in golang.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Understanding Errorf function in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"This tutorial in detail covers the information about the Errorf function provided by the fmt package in golang.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/errorf-function-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-04-29T17:00:56+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-04-29T17:01:03+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/errorf-function-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/errorf-function-golang\/\",\"name\":\"Understanding Errorf function in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-04-29T17:00:56+00:00\",\"dateModified\":\"2021-04-29T17:01:03+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"description\":\"This tutorial in detail covers the information about the Errorf function provided by the fmt package in golang.\",\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/errorf-function-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/errorf-function-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Understanding Errorf function in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Understanding Errorf function in Go (Golang) - Welcome To Golang By Example","description":"This tutorial in detail covers the information about the Errorf function provided by the fmt package in golang.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/errorf-function-golang\/","og_locale":"en_US","og_type":"article","og_title":"Understanding Errorf function in Go (Golang) - Welcome To Golang By Example","og_description":"This tutorial in detail covers the information about the Errorf function provided by the fmt package in golang.","og_url":"https:\/\/golangbyexamples.com\/errorf-function-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-04-29T17:00:56+00:00","article_modified_time":"2021-04-29T17:01:03+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/errorf-function-golang\/","url":"https:\/\/golangbyexamples.com\/errorf-function-golang\/","name":"Understanding Errorf function in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-04-29T17:00:56+00:00","dateModified":"2021-04-29T17:01:03+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"description":"This tutorial in detail covers the information about the Errorf function provided by the fmt package in golang.","breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/errorf-function-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/errorf-function-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/errorf-function-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Understanding Errorf function in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1rj","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5537","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=5537"}],"version-history":[{"count":3,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5537\/revisions"}],"predecessor-version":[{"id":5542,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/5537\/revisions\/5542"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=5537"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=5537"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=5537"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}