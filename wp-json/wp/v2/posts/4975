{"id":4975,"date":"2021-01-18T22:39:11","date_gmt":"2021-01-18T17:09:11","guid":{"rendered":"https:\/\/golangbyexamples.com\/?p=4975"},"modified":"2021-01-18T22:39:18","modified_gmt":"2021-01-18T17:09:18","slug":"struct-json-golang","status":"publish","type":"post","link":"https:\/\/golangbyexamples.com\/struct-json-golang\/","title":{"rendered":"Conversion between struct and JSON in Go (Golang)"},"content":{"rendered":"\n<div id=\"ez-toc-container\" class=\"ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-light-blue\">\n<div class=\"ez-toc-title-container\">\n<p class=\"ez-toc-title\">Table of Contents<\/p>\n<span class=\"ez-toc-title-toggle\"><a class=\"ez-toc-pull-right ez-toc-btn ez-toc-btn-xs ez-toc-btn-default ez-toc-toggle\" style=\"display: none;\"><i class=\"ez-toc-glyphicon ez-toc-icon-toggle\"><\/i><\/a><\/span><\/div>\n<nav><ul class=\"ez-toc-list ez-toc-list-level-1\"><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-1\" href=\"https:\/\/golangbyexamples.com\/struct-json-golang\/#Overview\" title=\"Overview\">Overview<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-2\" href=\"https:\/\/golangbyexamples.com\/struct-json-golang\/#Struct_to_JSON\" title=\"Struct to JSON\">Struct to JSON<\/a><\/li><li class=\"ez-toc-page-1 ez-toc-heading-level-1\"><a class=\"ez-toc-link ez-toc-heading-3\" href=\"https:\/\/golangbyexamples.com\/struct-json-golang\/#JSON_to_struct\" title=\"JSON to struct\">JSON to struct<\/a><\/li><\/ul><\/nav><\/div>\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Overview\"><\/span><strong>Overview<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>encoding\/json<\/strong> package provides utilities that can be used to convert to and from JSON. The same utility can be used to convert a golang struct to a JSON string and vice versa.&nbsp; Two functions which are used are<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Marshal &#8211; To convert a struct into JSON string<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Unmarshal- To convert a JSON string back to struct<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Before we see how to convert a struct to JSON and vice versa we need to know two things about golang struct:<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Only exported fields of the struct are visible to the external library. Hence only exported fields of the struct will be present in the converted JSON string. Also to note that capitalized fields of a struct are exported in go.<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Struct fields have a meta section that contains additional information about that field. These meta fields are used while converting a struct into JSON and vice-versa. Also, note that these struct meta fields is that they are optional. Let\u2019s say we have the below struct<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice meta tags associated with each of the fields annotated with name as \u2018json\u2019. These meta fields are used while converting a struct into JSON and vice versa.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">So the above struct when converted to JSON will be as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\n  \"name\" : \"John\",\n  \"age\"  : 21\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then\u00a0<strong>name\u00a0<\/strong>key of the above JSON string will map to the\u00a0<strong>Name<\/strong>\u00a0field of the\u00a0<strong>employee<\/strong>\u00a0struct and the\u00a0<strong>age<\/strong>\u00a0key in the JSON string will map to the\u00a0<strong>Age<\/strong>\u00a0field of the struct. Also,\u00a0when converting the above JSON string\u00a0 to a struct, the value in the <strong>name<\/strong> field of json will go to value in the <strong>Name<\/strong> field of the struct, and value in the <strong>age<\/strong> field of json will go to value in the <strong>Age <\/strong>field of struct\u00a0.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">As another example, let\u2019s say we have below struct<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n\tName string `json:\"n\"`\n\tAge  int    `json:\"ag\"`\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Then after conversion to JSON, \u00a0<strong>\u2018n\u2019<\/strong>\u00a0key of the JSON will map to the\u00a0<strong>Name<\/strong>\u00a0field of the struct and\u00a0<strong>\u2018ag\u2019\u00a0<\/strong>key of the JSON will map to the\u00a0<strong>Age<\/strong>\u00a0field of the struct. So it will produce below JSON<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\n  \"n\" : \"John\",\n  \"age\"  : 21\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also,\u00a0when converting the above JSON string\u00a0 to a struct, the value in the <strong>&#8216;n&#8217;<\/strong> field of JSON string will go to value in the <strong>Name<\/strong> field of the struct, and value in the <strong>&#8216;a&#8217;<\/strong> field of json will go to value in the <strong>Age <\/strong>field of struct\u00a0<\/p>\n\n\n\n<p class=\"has-medium-font-size\">If the struct doesn&#8217;t contain any meta tags then the resulting key name in the JSON will be the same as the struct field&#8217;s name and vice versa. For eg if we have below struct<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">type employee struct {\n\tName string \n\tAge  int   \n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice then none of the fields has the JSON meta tags. So after converting to JSON it will be like<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\n  \"Name\" : \"John\",\n  \"Age\"  : 21\n}<\/code><\/pre>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"Struct_to_JSON\"><\/span><strong>Struct to JSON<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>json.Marshal<\/strong> function can be used to convert a struct to <strong>JSON<\/strong>. Let&#8217;s see an example of conversion from a struct to JSON. To illustrate all points above we have created two structs<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>employee1<\/strong> struct &#8211; It has meta tags<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>employee2<\/strong> struct &#8211; It doesn&#8217;t have meta tags<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">Also, the salary field in both the struct is unexported<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"encoding\/json\"\n    \"fmt\"\n    \"log\"\n)\ntype employee1 struct {\n    Name   string `json:\"n\"`\n    Age    int    `json:\"a\"`\n    salary int    `json:\"s\"`\n}\ntype employee2 struct {\n    Name   string\n    Age    int\n    salary int\n}\nfunc main() {\n    e1 := employee1{\n        Name:   \"John\",\n        Age:    21,\n        salary: 1000,\n    }\n    j, err := json.Marshal(e1)\n    if err != nil {\n        log.Fatalf(\"Error occured during marshaling. Error: %s\", err.Error())\n    }\n    fmt.Printf(\"employee1 JSON: %s\\n\", string(j))\n    e2 := employee2{\n        Name:   \"John\",\n        Age:    21,\n        salary: 1000,\n    }\n    j, err = json.Marshal(e2)\n    if err != nil {\n        log.Fatalf(\"Error occured during marshaling. Error: %s\", err.Error())\n    }\n    fmt.Printf(\"\\nemployee2 JSON: %s\\n\", string(j))\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employee1 JSON: {\"n\":\"John\",\"a\":21}\n\nemployee2 JSON: {\"Name\":\"John\",\"Age\":21}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Notice that we are using <strong>json.Marshal<\/strong> function to convert from the struct to JSON.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">For the <strong>employee1<\/strong> struct to JSON conversion, the output is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\"n\":\"John\",\"a\":21}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is because<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>salary<\/strong> field is not present in the output because it is not exported ie the field is not capitalized<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Because of json tags associated with the <strong>employee1<\/strong> struct, the <strong>&#8216;Name&#8217;<\/strong> field of the <strong>employee1<\/strong> struct is mapped to <strong>&#8216;n&#8217;<\/strong> field of the JSON, and &#8216;<strong>Age&#8217;<\/strong> field is mapped to &#8216;<strong>a&#8217;<\/strong> field of the JSON<\/li><\/ul>\n\n\n\n<p class=\"has-medium-font-size\">For the <strong>employee2<\/strong> struct to JSON conversion, the output is<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\"Name\":\"John\",\"Age\":21}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This is because<\/p>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li><strong>salary<\/strong> field is not present in the output because it is not exported ie the field is not capitalized<\/li><\/ul>\n\n\n\n<ul class=\"has-medium-font-size wp-block-list\"><li>Since no json tags are associated with the <strong>employee2<\/strong> struct, the <strong>&#8216;Name&#8217;<\/strong> field of the <strong>employee1<\/strong> struct is mapped to <strong>&#8216;Name&#8217;<\/strong> field of the JSON, and &#8216;<strong>Age&#8217;<\/strong> field is mapped to <strong>&#8216;Age&#8217;<\/strong> field of the JSON<\/li><\/ul>\n\n\n\n<h1 class=\"wp-block-heading\"><span class=\"ez-toc-section\" id=\"JSON_to_struct\"><\/span><strong>JSON to struct<\/strong><span class=\"ez-toc-section-end\"><\/span><\/h1>\n\n\n\n<p class=\"has-medium-font-size\"><strong>json.Unmarshal<\/strong> function can be used to convert from JSON to a struct. Whatever rules we discussed above also apply to conversion from JSON to a struct.\u00a0 Let&#8217;s see an example<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\n\nimport (\n\t\"encoding\/json\"\n\t\"fmt\"\n\t\"log\"\n)\n\ntype employee1 struct {\n\tName   string `json:\"n\"`\n\tAge    int    `json:\"a\"`\n\tsalary int    `json:\"s\"`\n}\n\ntype employee2 struct {\n\tName   string\n\tAge    int\n\tsalary int\n}\n\nfunc main() {\n\te1Json := `{\"n\":\"John\",\"a\":21}`\n\n\tvar e1Converted employee1\n\terr := json.Unmarshal([]byte(e1Json), &e1Converted)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error occured during unmarshaling. Error: %s\", err.Error())\n\t}\n\tfmt.Printf(\"employee1 Struct: %#v\\n\", e1Converted)\n\n\te2Json := `{\"Name\":\"John\",\"Age\":21}`\n\tvar e2Converted employee2\n\terr = json.Unmarshal([]byte(e2Json), &e2Converted)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error occured during unmarshaling. Error: %s\", err.Error())\n\t}\n\tfmt.Printf(\"\\nemployee2 Struct: %#v\\n\", e2Converted)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employee1 Struct: main.employee1{Name:\"John\", Age:21, salary:0}\n\nemployee2 Struct: main.employee2{Name:\"John\", Age:21, salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">This example uses the json string that was the output from the first example. Here we are using the <strong>json.Unmarsha<\/strong>l function to convert from JSON string to structThe first thing to note is that we need to pass the address of the struct to the <strong>json.Unmarshal <\/strong>function as below<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">err = json.Unmarshal(j, &e1Converted)<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">The first argument is the JSON bytes and the second is the address of the struct.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">Unmarshing of<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\"n\":\"John\",\"a\":21}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">into <strong>employee1<\/strong> struct outputs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">main.employee1{Name:\"John\", Age:21, salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Unmarshling of<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\"Name\":\"John\",\"Age\":21}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">into <strong>employee2 <\/strong>struct outputs<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">main.employee2{Name:\"John\", Age:21, salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Also if you try unmarshalling<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">{\"n\":\"John\",\"a\":21}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\"> into employee2 struct then the output will be <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">main.employee2{Name:\"\", Age:0, salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Nothing will get unmarshalled because there are no meta tags in the <strong>employee2<\/strong> struct and key names in the <strong>employee2<\/strong> struct and key names in JSON is different. Hence an empty <strong>employee2<\/strong> struct will be created with each of the fields in the struct initialized with the default zero value of its type.<\/p>\n\n\n\n<p class=\"has-medium-font-size\">What if the JSON string contains the <strong>salary<\/strong> field. Then the value for the <strong>salary<\/strong> field in the JSON string will not reflect in the <strong>salary<\/strong> field of the struct because the <strong>salary<\/strong> field is not exported in the struct. See this example for the same.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">package main\nimport (\n    \"encoding\/json\"\n    \"fmt\"\n    \"log\"\n)\ntype employee1 struct {\n    Name   string `json:\"n\"`\n    Age    int    `json:\"a\"`\n    salary int    `json:\"s\"`\n}\nfunc main() {\n    e1Json := `{\"n\":\"John\",\"a\":21,\"salary\":1000}`\n    var e1Converted employee1\n    err := json.Unmarshal([]byte(e1Json), &e1Converted)\n    if err != nil {\n        log.Fatalf(\"Error occured during unmarshaling. Error: %s\", err.Error())\n    }\n    fmt.Printf(\"employee1 Struct: %#v\\n\", e1Converted)\n}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-go\">employee1 Struct: main.employee1{Name:\"John\", Age:21, salary:0}<\/code><\/pre>\n\n\n\n<p class=\"has-medium-font-size\">Even though the <strong>salary<\/strong> field in the JSON string has a value of 1000 but after converting it to the struct the <strong>salary<\/strong> field in the struct is 0.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents OverviewStruct to JSONJSON to struct Overview encoding\/json package provides utilities that can be used to convert to and from JSON. The same utility can be used to convert a&#8230;<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"spay_email":"","footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false},"categories":[1],"tags":[],"class_list":["post-4975","post","type-post","status-publish","format-standard","hentry","category-tech"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v22.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Conversion between struct and JSON in Go (Golang) - Welcome To Golang By Example<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/golangbyexamples.com\/struct-json-golang\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Conversion between struct and JSON in Go (Golang) - Welcome To Golang By Example\" \/>\n<meta property=\"og:description\" content=\"Table of Contents OverviewStruct to JSONJSON to struct Overview encoding\/json package provides utilities that can be used to convert to and from JSON. The same utility can be used to convert a...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/golangbyexamples.com\/struct-json-golang\/\" \/>\n<meta property=\"og:site_name\" content=\"Welcome To Golang By Example\" \/>\n<meta property=\"article:published_time\" content=\"2021-01-18T17:09:11+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-01-18T17:09:18+00:00\" \/>\n<meta name=\"author\" content=\"admin\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"admin\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/golangbyexamples.com\/struct-json-golang\/\",\"url\":\"https:\/\/golangbyexamples.com\/struct-json-golang\/\",\"name\":\"Conversion between struct and JSON in Go (Golang) - Welcome To Golang By Example\",\"isPartOf\":{\"@id\":\"https:\/\/golangbyexamples.com\/#website\"},\"datePublished\":\"2021-01-18T17:09:11+00:00\",\"dateModified\":\"2021-01-18T17:09:18+00:00\",\"author\":{\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\"},\"breadcrumb\":{\"@id\":\"https:\/\/golangbyexamples.com\/struct-json-golang\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/golangbyexamples.com\/struct-json-golang\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/golangbyexamples.com\/struct-json-golang\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/golangbyexamples.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Conversion between struct and JSON in Go (Golang)\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/golangbyexamples.com\/#website\",\"url\":\"https:\/\/golangbyexamples.com\/\",\"name\":\"Welcome To Golang By Example\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/golangbyexamples.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f\",\"name\":\"admin\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g\",\"caption\":\"admin\"},\"url\":\"https:\/\/golangbyexamples.com\/author\/admin\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Conversion between struct and JSON in Go (Golang) - Welcome To Golang By Example","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/golangbyexamples.com\/struct-json-golang\/","og_locale":"en_US","og_type":"article","og_title":"Conversion between struct and JSON in Go (Golang) - Welcome To Golang By Example","og_description":"Table of Contents OverviewStruct to JSONJSON to struct Overview encoding\/json package provides utilities that can be used to convert to and from JSON. The same utility can be used to convert a...","og_url":"https:\/\/golangbyexamples.com\/struct-json-golang\/","og_site_name":"Welcome To Golang By Example","article_published_time":"2021-01-18T17:09:11+00:00","article_modified_time":"2021-01-18T17:09:18+00:00","author":"admin","twitter_card":"summary_large_image","twitter_misc":{"Written by":"admin","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/golangbyexamples.com\/struct-json-golang\/","url":"https:\/\/golangbyexamples.com\/struct-json-golang\/","name":"Conversion between struct and JSON in Go (Golang) - Welcome To Golang By Example","isPartOf":{"@id":"https:\/\/golangbyexamples.com\/#website"},"datePublished":"2021-01-18T17:09:11+00:00","dateModified":"2021-01-18T17:09:18+00:00","author":{"@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f"},"breadcrumb":{"@id":"https:\/\/golangbyexamples.com\/struct-json-golang\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/golangbyexamples.com\/struct-json-golang\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/golangbyexamples.com\/struct-json-golang\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/golangbyexamples.com\/"},{"@type":"ListItem","position":2,"name":"Conversion between struct and JSON in Go (Golang)"}]},{"@type":"WebSite","@id":"https:\/\/golangbyexamples.com\/#website","url":"https:\/\/golangbyexamples.com\/","name":"Welcome To Golang By Example","description":"","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/golangbyexamples.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/8833ea7638dafd763cb1db6c0ca4576f","name":"admin","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/golangbyexamples.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/?s=96&d=mm&r=g","caption":"admin"},"url":"https:\/\/golangbyexamples.com\/author\/admin\/"}]}},"jetpack_featured_media_url":"","jetpack_publicize_connections":[],"jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/paOs1b-1if","amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4975","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/comments?post=4975"}],"version-history":[{"count":2,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4975\/revisions"}],"predecessor-version":[{"id":4977,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/posts\/4975\/revisions\/4977"}],"wp:attachment":[{"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/media?parent=4975"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/categories?post=4975"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/golangbyexamples.com\/wp-json\/wp\/v2\/tags?post=4975"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}